-- WARNING: This module was generated by `tree-sitter-generate-ast`.
--
-- build-depends:
--   , base          >=4.13 && <5
--   , bytestring    >=0.11 && <0.13
--   , containers    >=0.6  && <0.8
--   , mtl           >=2.3  && <2.4
--   , prettyprinter >=1.7  && <1.8
--   , transformers  >=0.6  && <0.7
--   , tree-sitter
--
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE ImportQualifiedPost #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE PatternSynonyms #-}
{-# LANGUAGE StandaloneKindSignatures #-}
{-# LANGUAGE TypeData #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE UndecidableInstances #-}

module Cubix.Language.SuiMove.Modularized (
) where

import Control.Applicative (Alternative (..), optional)
import Control.Monad (MonadPlus (..))
import Control.Monad.IO.Class (MonadIO (..))
import Control.Monad.Reader (MonadReader, ReaderT (..), asks)
import Control.Monad.State.Strict (MonadState (..), StateT (..), gets, modify')
import Control.Monad.Trans.Maybe (MaybeT (..))
import Data.ByteString.Char8 qualified as BSC
import Data.IntMap.Strict (IntMap)
import Data.IntMap.Strict qualified as IM
import Data.Kind (Type)
import Data.List.NonEmpty (NonEmpty (..))
import Data.Maybe (isJust)
import Data.Type.Equality (type (:~:) (..), type (:~~:) (..))
import Prettyprinter (Doc, Pretty (..), nest, parens, sep)
import TreeSitter (NodeId (..), Range (..))
import TreeSitter qualified as TS

import Data.Comp.Multi.Kinds (type Sort)

--------------------------------------------------------------------------------
-- Modularized syntax
--------------------------------------------------------------------------------

data SourceFile e l where
  SourceFile ::
    [e ModuleDefinitionL] ->
    SourceFile SourceFileL

data ModuleDefinition e l where
  ModuleDefinition ::
    e ModuleIdentityL ->
    e ModuleBodyL ->
    ModuleDefinition ModuleDefinitionL

data ModuleBody e l where
  ModuleBody ::
    [Either (e FriendDeclarationL) (Either (e ConstantL) (Either (e HiddenFunctionItemL) (Either (e HiddenStructItemL) (Either (e HiddenEnumItemL) (Either (e SpecBlockL) (e UseDeclarationL))))))] ->
    ModuleBody ModuleBodyL

data HiddenEnumItem e l where
  EnumDefinition ::
    e HiddenEnumSignatureL -> e EnumVariantsL -> Maybe (e PostfixAbilityDeclsL) ->
    HiddenEnumItem HiddenEnumItemL

data HiddenEnumSignature e l where
  HiddenEnumSignature ::
    e HiddenEnumIdentifierL ->
    Maybe (e TypeParametersL) ->
    Maybe (e AbilityDeclsL) ->
    HiddenEnumSignature HiddenEnumSignatureL

data HiddenEnumIdentifier e l where
  HiddenEnumIdentifier ::
    e IdentifierL ->
    HiddenEnumIdentifier HiddenEnumIdentifierL

data Identifier e l where
  Identifier ::
     ->
    Identifier IdentifierL

data AbilityDecls e l where
  AbilityDecls ::
    Maybe (e AbilityL) -> [e AbilityL] ->
    AbilityDecls AbilityDeclsL

data Ability e l where

data TypeParameters e l where
  TypeParameters ::
    [e TypeParameterL] -> e TypeParameterL ->
    TypeParameters TypeParametersL

data TypeParameter e l where
  TypeParameter ::
    e HiddenTypeParameterIdentifierL ->
    Maybe [e AbilityL] -> e AbilityL ->
    TypeParameter TypeParameterL

data HiddenTypeParameterIdentifier e l where
  HiddenTypeParameterIdentifier ::
    e IdentifierL ->
    HiddenTypeParameterIdentifier HiddenTypeParameterIdentifierL

data EnumVariants e l where
  EnumVariants ::
    Maybe (e VariantL) -> [e VariantL] ->
    EnumVariants EnumVariantsL

data Variant e l where
  Variant ::
    e HiddenVariantIdentifierL ->
    Maybe (e DatatypeFieldsL) ->
    Variant VariantL

data HiddenVariantIdentifier e l where
  HiddenVariantIdentifier ::
    e IdentifierL ->
    HiddenVariantIdentifier HiddenVariantIdentifierL

data DatatypeFields e l where
  PositionalFields ::
    Maybe (e HiddenTypeL) -> [e HiddenTypeL] ->
    DatatypeFields DatatypeFieldsL
  NamedFields ::
    Maybe (e FieldAnnotationL) -> [e FieldAnnotationL] ->
    DatatypeFields DatatypeFieldsL

data HiddenType e l where
  ApplyType ::
    Maybe (e TypeArgumentsL) -> e ModuleAccessL ->
    HiddenType HiddenTypeL
  RefType ::
    e HiddenTypeL -> e HiddenReferenceL ->
    HiddenType HiddenTypeL
  TupleType ::
    Maybe (e HiddenTypeL) -> [e HiddenTypeL] ->
    HiddenType HiddenTypeL
  FunctionType ::
    Maybe (e HiddenTypeL) -> e FunctionTypeParametersL ->
    HiddenType HiddenTypeL
  PrimitiveType ::
     ->
    HiddenType HiddenTypeL

data HiddenReference e l where
  ImmRef ::
     ->
    HiddenReference HiddenReferenceL
  MutRef ::
     ->
    HiddenReference HiddenReferenceL

data FunctionTypeParameters e l where
  FunctionTypeParameters ::
    Maybe (e HiddenTypeL) -> [e HiddenTypeL] ->
    FunctionTypeParameters FunctionTypeParametersL

data ModuleAccess e l where

data TypeArguments e l where
  TypeArguments ::
    [e HiddenTypeL] -> e HiddenTypeL ->
    TypeArguments TypeArgumentsL

data FieldAnnotation e l where
  FieldAnnotation ::
    e HiddenFieldIdentifierL ->
    e HiddenTypeL ->
    FieldAnnotation FieldAnnotationL

data HiddenFieldIdentifier e l where
  HiddenFieldIdentifier ::
    e IdentifierL ->
    HiddenFieldIdentifier HiddenFieldIdentifierL

data PostfixAbilityDecls e l where
  PostfixAbilityDecls ::
    Maybe (e AbilityL) -> [e AbilityL] ->
    PostfixAbilityDecls PostfixAbilityDeclsL

data HiddenFunctionItem e l where
  NativeFunctionDefinition ::
    e HiddenFunctionSignatureL ->
    HiddenFunctionItem HiddenFunctionItemL
  MacroFunctionDefinition ::
    e HiddenMacroSignatureL -> e BlockL -> Maybe (e ModifierL) ->
    HiddenFunctionItem HiddenFunctionItemL
  FunctionDefinition ::
    e BlockL -> e HiddenFunctionSignatureL ->
    HiddenFunctionItem HiddenFunctionItemL

data HiddenFunctionSignature e l where
  HiddenFunctionSignature ::
    Maybe (e ModifierL) ->
    Maybe (e ModifierL) ->
    Maybe (e ModifierL) ->
    e HiddenFunctionIdentifierL ->
    Maybe (e TypeParametersL) ->
    e FunctionParametersL ->
    Maybe (e RetTypeL) ->
    HiddenFunctionSignature HiddenFunctionSignatureL

data HiddenFunctionIdentifier e l where
  HiddenFunctionIdentifier ::
    e IdentifierL ->
    HiddenFunctionIdentifier HiddenFunctionIdentifierL

data FunctionParameters e l where
  FunctionParameters ::
    Maybe (Either (e FunctionParameterL) (e MutFunctionParameterL)) -> [Either (e FunctionParameterL) (e MutFunctionParameterL)] ->
    FunctionParameters FunctionParametersL

data FunctionParameter e l where
  FunctionParameter ::
    Either (e HiddenVariableIdentifierL) (e HiddenVariableIdentifierL) ->
    e HiddenTypeL ->
    FunctionParameter FunctionParameterL

data HiddenVariableIdentifier e l where
  HiddenVariableIdentifier ::
    e IdentifierL ->
    HiddenVariableIdentifier HiddenVariableIdentifierL

data MutFunctionParameter e l where
  MutFunctionParameter ::
    e FunctionParameterL ->
    MutFunctionParameter MutFunctionParameterL

data Modifier e l where

data RetType e l where
  RetType ::
    e HiddenTypeL ->
    RetType RetTypeL

data HiddenMacroSignature e l where
  HiddenMacroSignature ::
    Maybe (e ModifierL) ->
    e HiddenFunctionIdentifierL ->
    Maybe (e TypeParametersL) ->
    e FunctionParametersL ->
    Maybe (e RetTypeL) ->
    HiddenMacroSignature HiddenMacroSignatureL

data Block e l where
  Block ::
    [e UseDeclarationL] ->
    [e BlockItemL] ->
    Maybe (e HiddenExpressionL) ->
    Block BlockL

data HiddenExpression e l where
  CallExpression ::
    e ArgListL -> e NameExpressionL ->
    HiddenExpression HiddenExpressionL
  MacroCallExpression ::
    Maybe (e TypeArgumentsL) -> e ArgListL -> e MacroModuleAccessL ->
    HiddenExpression HiddenExpressionL
  LambdaExpression ::
    Maybe (e HiddenTypeL) -> e HiddenExpressionL -> e LambdaBindingsL ->
    HiddenExpression HiddenExpressionL
  IfExpression ::
    e HiddenExpressionL -> e HiddenExpressionL -> Maybe (e HiddenExpressionL) ->
    HiddenExpression HiddenExpressionL
  WhileExpression ::
    e HiddenExpressionL -> e HiddenExpressionL ->
    HiddenExpression HiddenExpressionL
  ReturnExpression ::
    Either (Maybe (e LabelL)) Maybe (e LabelL) -> e HiddenExpressionL ->
    HiddenExpression HiddenExpressionL
  AbortExpression ::
    Maybe (e HiddenExpressionL) ->
    HiddenExpression HiddenExpressionL
  AssignExpression ::
    e HiddenExpressionL -> e HiddenUnaryExpressionL ->
    HiddenExpression HiddenExpressionL
  HiddenUnaryExpression ::
    Either (e BorrowExpressionL) (Either (e DereferenceExpressionL) (Either (e MoveOrCopyExpressionL) (Either (e HiddenExpressionTermL) (e UnaryExpressionL)))) ->
    HiddenExpression HiddenExpressionL
  BinaryExpression ::
    Either e HiddenExpressionL -> e HiddenExpressionL (Either e HiddenExpressionL -> e HiddenExpressionL (Either e HiddenExpressionL -> e HiddenExpressionL (Either e HiddenExpressionL -> e HiddenExpressionL (Either e HiddenExpressionL -> e HiddenExpressionL (Either e HiddenExpressionL -> e HiddenExpressionL (Either e HiddenExpressionL -> e HiddenExpressionL (Either e HiddenExpressionL -> e HiddenExpressionL (Either e HiddenExpressionL -> e HiddenExpressionL (Either e HiddenExpressionL -> e HiddenExpressionL (Either e HiddenExpressionL -> e HiddenExpressionL (Either e HiddenExpressionL -> e HiddenExpressionL (Either e HiddenExpressionL -> e HiddenExpressionL (Either e HiddenExpressionL -> e HiddenExpressionL (Either e HiddenExpressionL -> e HiddenExpressionL (Either e HiddenExpressionL -> e HiddenExpressionL (Either e HiddenExpressionL -> e HiddenExpressionL (Either e HiddenExpressionL -> e HiddenExpressionL (Either e HiddenExpressionL -> e HiddenExpressionL e HiddenExpressionL -> e HiddenExpressionL)))))))))))))))))) ->
    HiddenExpression HiddenExpressionL
  CastExpression ::
    e HiddenTypeL -> e HiddenExpressionL ->
    HiddenExpression HiddenExpressionL
  QuantifierExpression ::
    e QuantifierBindingsL -> Maybe (e HiddenExpressionL) -> e HiddenExpressionL -> Either (e HiddenExistsL) (e HiddenForallL) ->
    HiddenExpression HiddenExpressionL
  MatchExpression ::
    e HiddenExpressionL -> e HiddenMatchBodyL ->
    HiddenExpression HiddenExpressionL
  VectorExpression ::
    Maybe (e HiddenExpressionL) -> [e HiddenExpressionL] -> Maybe [e HiddenTypeL] -> e HiddenTypeL ->
    HiddenExpression HiddenExpressionL
  LoopExpression ::
    e HiddenExpressionL ->
    HiddenExpression HiddenExpressionL
  IdentifiedExpression ::
    e HiddenExpressionL -> e BlockIdentifierL ->
    HiddenExpression HiddenExpressionL

data HiddenExists e l where
  HiddenExists ::
     ->
    HiddenExists HiddenExistsL

data HiddenExpressionTerm e l where
  CallExpression ::
    e ArgListL -> e NameExpressionL ->
    HiddenExpressionTerm HiddenExpressionTermL
  BreakExpression ::
    Maybe (e LabelL) -> Maybe (e HiddenExpressionL) ->
    HiddenExpressionTerm HiddenExpressionTermL
  ContinueExpression ::
    Maybe (e LabelL) ->
    HiddenExpressionTerm HiddenExpressionTermL
  NameExpression ::
    e ModuleAccessL ->
    HiddenExpressionTerm HiddenExpressionTermL
  MacroCallExpression ::
    Maybe (e TypeArgumentsL) -> e ArgListL -> e MacroModuleAccessL ->
    HiddenExpressionTerm HiddenExpressionTermL
  PackExpression ::
    e FieldInitializeListL -> e NameExpressionL ->
    HiddenExpressionTerm HiddenExpressionTermL
  HiddenLiteralValue ::
    Either (e BoolLiteralL) (Either (e NumLiteralL) (Either (e HexStringLiteralL) (Either (e ByteStringLiteralL) (e AddressLiteralL)))) ->
    HiddenExpressionTerm HiddenExpressionTermL
  UnitExpression ::
     ->
    HiddenExpressionTerm HiddenExpressionTermL
  ExpressionList ::
    [e HiddenExpressionL] -> e HiddenExpressionL ->
    HiddenExpressionTerm HiddenExpressionTermL
  AnnotationExpression ::
    e HiddenExpressionL -> e HiddenTypeL ->
    HiddenExpressionTerm HiddenExpressionTermL
  Block ::
    [e UseDeclarationL] -> [e BlockItemL] -> Maybe (e HiddenExpressionL) ->
    HiddenExpressionTerm HiddenExpressionTermL
  SpecBlock ::
    Either (e HiddenSpecFunctionL) e SpecBodyL -> Maybe (e HiddenSpecBlockTargetL) ->
    HiddenExpressionTerm HiddenExpressionTermL
  IfExpression ::
    e HiddenExpressionL -> e HiddenExpressionL -> Maybe (e HiddenExpressionL) ->
    HiddenExpressionTerm HiddenExpressionTermL
  DotExpression ::
    e HiddenExpressionTermL -> e HiddenExpressionTermL ->
    HiddenExpressionTerm HiddenExpressionTermL
  IndexExpression ::
    Maybe (e HiddenExpressionL) -> [e HiddenExpressionL] -> e HiddenExpressionTermL ->
    HiddenExpressionTerm HiddenExpressionTermL
  VectorExpression ::
    Maybe (e HiddenExpressionL) -> [e HiddenExpressionL] -> Maybe [e HiddenTypeL] -> e HiddenTypeL ->
    HiddenExpressionTerm HiddenExpressionTermL
  MatchExpression ::
    e HiddenExpressionL -> e HiddenMatchBodyL ->
    HiddenExpressionTerm HiddenExpressionTermL

data HiddenMatchBody e l where
  HiddenMatchBody ::
    Maybe (e MatchArmL) -> [e MatchArmL] ->
    HiddenMatchBody HiddenMatchBodyL

data MatchArm e l where
  MatchArm ::
    e BindListL ->
    Maybe (e MatchConditionL) ->
    e HiddenExpressionL ->
    MatchArm MatchArmL

data BindList e l where
  HiddenBind ::
    Either (e BindUnpackL) (Either (e AtBindL) (Either (e HiddenLiteralValueL) (Either (e HiddenVariableIdentifierL) (e MutBindVarL)))) ->
    BindList BindListL
  CommaBindList ::
    Maybe (e HiddenBindL) -> [e HiddenBindL] ->
    BindList BindListL
  OrBindList ::
    [e HiddenBindL] -> e HiddenBindL ->
    BindList BindListL

data HiddenBind e l where
  MutBindVar ::
    e HiddenVariableIdentifierL ->
    HiddenBind HiddenBindL
  BindVar ::
    e HiddenVariableIdentifierL ->
    HiddenBind HiddenBindL
  BindUnpack ::
    Maybe (e BindFieldsL) -> e NameExpressionL ->
    HiddenBind HiddenBindL
  AtBind ::
    e BindListL -> e HiddenVariableIdentifierL ->
    HiddenBind HiddenBindL
  HiddenLiteralValue ::
    Either (e BoolLiteralL) (Either (e NumLiteralL) (Either (e HexStringLiteralL) (Either (e ByteStringLiteralL) (e AddressLiteralL)))) ->
    HiddenBind HiddenBindL

data AddressLiteral e l where
  AddressLiteral ::
     ->
    AddressLiteral AddressLiteralL

data BindFields e l where
  BindPositionalFields ::
    Maybe (Either (e MutBindFieldL) (e BindFieldL)) -> [Either (e MutBindFieldL) (e BindFieldL)] ->
    BindFields BindFieldsL
  BindNamedFields ::
    Maybe (Either (e MutBindFieldL) (e BindFieldL)) -> [Either (e MutBindFieldL) (e BindFieldL)] ->
    BindFields BindFieldsL

data BindField e l where

data MutBindField e l where
  MutBindField ::
    e BindFieldL ->
    MutBindField MutBindFieldL

data BoolLiteral e l where

data ByteStringLiteral e l where
  ByteStringLiteral ::
     ->
    ByteStringLiteral ByteStringLiteralL

data HexStringLiteral e l where
  HexStringLiteral ::
     ->
    HexStringLiteral HexStringLiteralL

data NameExpression e l where
  NameExpression ::
    e ModuleAccessL ->
    NameExpression NameExpressionL

data NumLiteral e l where
  NumLiteral ::
    NumLiteral NumLiteralL

data HiddenLiteralValue e l where
  AddressLiteral ::
     ->
    HiddenLiteralValue HiddenLiteralValueL
  BoolLiteral ::
     ->
    HiddenLiteralValue HiddenLiteralValueL
  NumLiteral ::
     ->
    HiddenLiteralValue HiddenLiteralValueL
  HexStringLiteral ::
     ->
    HiddenLiteralValue HiddenLiteralValueL
  ByteStringLiteral ::
     ->
    HiddenLiteralValue HiddenLiteralValueL

data AtBind e l where
  AtBind ::
    e HiddenVariableIdentifierL ->
    e BindListL ->
    AtBind AtBindL

data BindUnpack e l where
  BindUnpack ::
    e NameExpressionL ->
    Maybe (e BindFieldsL) ->
    BindUnpack BindUnpackL

data MutBindVar e l where
  MutBindVar ::
    e HiddenVariableIdentifierL ->
    MutBindVar MutBindVarL

data MatchCondition e l where
  MatchCondition ::
    e HiddenExpressionL ->
    MatchCondition MatchConditionL

data HiddenSpecBlockTarget e l where
  HiddenSpecBlockIdentifier ::
    e IdentifierL ->
    HiddenSpecBlockTarget HiddenSpecBlockTargetL
  SpecBlockTargetModule ::
     ->
    HiddenSpecBlockTarget HiddenSpecBlockTargetL
  SpecBlockTargetSchema ::
    e HiddenStructIdentifierL -> Maybe (e TypeParametersL) ->
    HiddenSpecBlockTarget HiddenSpecBlockTargetL

data HiddenStructIdentifier e l where
  HiddenStructIdentifier ::
    e IdentifierL ->
    HiddenStructIdentifier HiddenStructIdentifierL

data HiddenSpecFunction e l where
  NativeSpecFunction ::
    e HiddenSpecFunctionSignatureL ->
    HiddenSpecFunction HiddenSpecFunctionL
  UsualSpecFunction ::
    e HiddenSpecFunctionSignatureL -> e BlockL ->
    HiddenSpecFunction HiddenSpecFunctionL
  UninterpretedSpecFunction ::
    e HiddenSpecFunctionSignatureL ->
    HiddenSpecFunction HiddenSpecFunctionL

data HiddenSpecFunctionSignature e l where
  HiddenSpecFunctionSignature ::
    e HiddenFunctionIdentifierL ->
    Maybe (e TypeParametersL) ->
    e FunctionParametersL ->
    e RetTypeL ->
    HiddenSpecFunctionSignature HiddenSpecFunctionSignatureL

data ArgList e l where
  ArgList ::
    Maybe (e HiddenExpressionL) -> [e HiddenExpressionL] ->
    ArgList ArgListL

data BlockItem e l where
  BlockItem ::
    Either (e LetStatementL) (e HiddenExpressionL) ->
    BlockItem BlockItemL

data LetStatement e l where
  LetStatement ::
    e BindListL ->
    Maybe (e HiddenTypeL) ->
    Maybe (e HiddenExpressionL) ->
    LetStatement LetStatementL

data FieldInitializeList e l where
  FieldInitializeList ::
    Maybe (e ExpFieldL) -> [e ExpFieldL] ->
    FieldInitializeList FieldInitializeListL

data ExpField e l where
  ExpField ::
    e HiddenFieldIdentifierL ->
    Maybe (e HiddenExpressionL) ->
    ExpField ExpFieldL

data Label e l where
  Label ::
    e IdentifierL ->
    Label LabelL

data MacroModuleAccess e l where
  MacroModuleAccess ::
    e ModuleAccessL ->
    MacroModuleAccess MacroModuleAccessL

data SpecBody e l where
  SpecBody ::
    [e UseDeclarationL] ->
    [e HiddenSpecBlockMemeberL] ->
    SpecBody SpecBodyL

data HiddenSpecBlockMemeber e l where
  SpecInvariant ::
    Maybe (e ConditionPropertiesL) -> e HiddenExpressionL ->
    HiddenSpecBlockMemeber HiddenSpecBlockMemeberL
  HiddenSpecFunction ::
    Either (e UsualSpecFunctionL) (Either (e UninterpretedSpecFunctionL) (e NativeSpecFunctionL)) ->
    HiddenSpecBlockMemeber HiddenSpecBlockMemeberL
  SpecCondition ::
    Either (e HiddenSpecAbortIfL) (Either (e HiddenSpecAbortWithOrModifiesL) (e HiddenSpecConditionL)) ->
    HiddenSpecBlockMemeber HiddenSpecBlockMemeberL
  SpecInclude ::
    e HiddenExpressionL ->
    HiddenSpecBlockMemeber HiddenSpecBlockMemeberL
  SpecApply ::
    e HiddenExpressionL -> [e SpecApplyPatternL] -> e SpecApplyPatternL -> Maybe [e SpecApplyPatternL] -> e SpecApplyPatternL ->
    HiddenSpecBlockMemeber HiddenSpecBlockMemeberL
  SpecPragma ::
    Maybe (e SpecPropertyL) -> [e SpecPropertyL] ->
    HiddenSpecBlockMemeber HiddenSpecBlockMemeberL
  SpecVariable ::
    e IdentifierL -> Maybe (e TypeParametersL) -> e HiddenTypeL ->
    HiddenSpecBlockMemeber HiddenSpecBlockMemeberL
  SpecLet ::
    e IdentifierL -> e HiddenExpressionL ->
    HiddenSpecBlockMemeber HiddenSpecBlockMemeberL

data HiddenSpecAbortIf e l where
  HiddenSpecAbortIf ::
    Maybe (e ConditionPropertiesL) ->
    e HiddenExpressionL ->
    Maybe (e HiddenExpressionL) ->
    HiddenSpecAbortIf HiddenSpecAbortIfL

data ConditionProperties e l where
  ConditionProperties ::
    Maybe (e SpecPropertyL) -> [e SpecPropertyL] ->
    ConditionProperties ConditionPropertiesL

data SpecProperty e l where
  SpecProperty ::
    e IdentifierL ->
    Maybe (e HiddenLiteralValueL) ->
    SpecProperty SpecPropertyL

data HiddenSpecAbortWithOrModifies e l where
  HiddenSpecAbortWithOrModifies ::
    Maybe (e ConditionPropertiesL) ->
    [e HiddenExpressionL] -> e HiddenExpressionL ->
    HiddenSpecAbortWithOrModifies HiddenSpecAbortWithOrModifiesL

data HiddenSpecCondition e l where
  HiddenSpecCondition ::
    Maybe (e HiddenSpecConditionKindL) ->
    Maybe (e ConditionPropertiesL) ->
    e HiddenExpressionL ->
    HiddenSpecCondition HiddenSpecConditionL

data HiddenSpecConditionKind e l where

data NativeSpecFunction e l where
  NativeSpecFunction ::
    e HiddenSpecFunctionSignatureL ->
    NativeSpecFunction NativeSpecFunctionL

data SpecApplyPattern e l where
  SpecApplyPattern ::
    e SpecApplyNamePatternL ->
    Maybe (e TypeParametersL) ->
    SpecApplyPattern SpecApplyPatternL

data SpecApplyNamePattern e l where
  SpecApplyNamePattern ::
     ->
    SpecApplyNamePattern SpecApplyNamePatternL

data UninterpretedSpecFunction e l where
  UninterpretedSpecFunction ::
    e HiddenSpecFunctionSignatureL ->
    UninterpretedSpecFunction UninterpretedSpecFunctionL

data UsualSpecFunction e l where
  UsualSpecFunction ::
    e HiddenSpecFunctionSignatureL ->
    e BlockL ->
    UsualSpecFunction UsualSpecFunctionL

data UseDeclaration e l where
  UseDeclaration ::
    Either (e UseModuleL) (Either (e UseModuleMemberL) (Either (e UseModuleMembersL) (e UseFunL))) ->
    UseDeclaration UseDeclarationL

data UseFun e l where
  UseFun ::
    e ModuleAccessL ->
    e HiddenFunctionIdentifierL -> e ModuleAccessL ->
    UseFun UseFunL

data UseModule e l where
  UseModule ::
    e ModuleIdentityL ->
    Maybe (e HiddenModuleIdentifierL) ->
    UseModule UseModuleL

data HiddenModuleIdentifier e l where
  HiddenModuleIdentifier ::
    e IdentifierL ->
    HiddenModuleIdentifier HiddenModuleIdentifierL

data ModuleIdentity e l where
  ModuleIdentity ::
    Either (e HiddenModuleIdentifierL) (e NumLiteralL) ->
    e HiddenModuleIdentifierL ->
    ModuleIdentity ModuleIdentityL

data UseModuleMember e l where
  UseModuleMember ::
    e ModuleIdentityL ->
    e UseMemberL ->
    UseModuleMember UseModuleMemberL

data UseMember e l where

data UseModuleMembers e l where

data HiddenForall e l where
  HiddenForall ::
     ->
    HiddenForall HiddenForallL

data HiddenUnaryExpression e l where
  HiddenUnaryExpression ::
    Either (e BorrowExpressionL) (Either (e DereferenceExpressionL) (Either (e MoveOrCopyExpressionL) (Either (e HiddenExpressionTermL) (e UnaryExpressionL)))) ->
    HiddenUnaryExpression HiddenUnaryExpressionL

data BorrowExpression e l where
  BorrowExpression ::
    e HiddenExpressionL -> e HiddenReferenceL ->
    BorrowExpression BorrowExpressionL

data DereferenceExpression e l where
  DereferenceExpression ::
    e HiddenExpressionL ->
    DereferenceExpression DereferenceExpressionL

data MoveOrCopyExpression e l where
  MoveOrCopyExpression ::
    e HiddenExpressionL ->
    MoveOrCopyExpression MoveOrCopyExpressionL

data UnaryExpression e l where
  UnaryExpression ::
    e UnaryOpL ->
    e HiddenExpressionL ->
    UnaryExpression UnaryExpressionL

data UnaryOp e l where

data BlockIdentifier e l where
  BlockIdentifier ::
    e LabelL ->
    BlockIdentifier BlockIdentifierL

data LambdaBindings e l where
  LambdaBindings ::
    Maybe (e LambdaBindingL) -> [e LambdaBindingL] ->
    LambdaBindings LambdaBindingsL

data LambdaBinding e l where
  CommaBindList ::
    Maybe (e HiddenBindL) -> [e HiddenBindL] ->
    LambdaBinding LambdaBindingL
  Bind ::
    e HiddenBindL ->
    LambdaBinding LambdaBindingL

data QuantifierBindings e l where
  QuantifierBindings ::
    e QuantifierBindingL ->
    [e QuantifierBindingL] ->
    QuantifierBindings QuantifierBindingsL

data QuantifierBinding e l where

data HiddenStructItem e l where
  NativeStructDefinition ::
    e HiddenStructSignatureL ->
    HiddenStructItem HiddenStructItemL
  StructDefinition ::
    e HiddenStructSignatureL -> e DatatypeFieldsL -> Maybe (e PostfixAbilityDeclsL) ->
    HiddenStructItem HiddenStructItemL

data HiddenStructSignature e l where
  HiddenStructSignature ::
    e HiddenStructIdentifierL ->
    Maybe (e TypeParametersL) ->
    Maybe (e AbilityDeclsL) ->
    HiddenStructSignature HiddenStructSignatureL

data Constant e l where
  Constant ::
    e IdentifierL ->
    e HiddenTypeL ->
    e HiddenExpressionL ->
    Constant ConstantL

data FriendDeclaration e l where
  FriendDeclaration ::
    e FriendAccessL ->
    FriendDeclaration FriendDeclarationL

data FriendAccess e l where
  LocalModule ::
    e IdentifierL ->
    FriendAccess FriendAccessL
  FullyQualifiedModule ::
    e ModuleIdentityL ->
    FriendAccess FriendAccessL

data SpecBlock e l where
  SpecBlock ::
    Either (e HiddenSpecFunctionL) e SpecBodyL -> Maybe (e HiddenSpecBlockTargetL) ->
    SpecBlock SpecBlockL

--------------------------------------------------------------------------------
-- Signature
--------------------------------------------------------------------------------

type MoveSig = '[]

type MoveTerm      = Term LuaSig
type MoveTermLab l = TermLab LuaSig l

--------------------------------------------------------------------------------
-- Entry point
--------------------------------------------------------------------------------

type RootSort MoveSig = SourceFileL
