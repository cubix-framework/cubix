-- WARNING: This module was generated by `tree-sitter-generate-ast`.
--
-- build-depends:
--   , base          >=4.13 && <5
--   , bytestring    >=0.11 && <0.13
--   , containers    >=0.6  && <0.8
--   , mtl           >=2.3  && <2.4
--   , prettyprinter >=1.7  && <1.8
--   , transformers  >=0.6  && <0.7
--   , tree-sitter
--
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE ImportQualifiedPost #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE PatternSynonyms #-}
{-# LANGUAGE StandaloneKindSignatures #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE TypeData #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE UndecidableInstances #-}

module Cubix.Language.SuiMove.Modularized
  where

import Control.Applicative (Alternative (..), optional)
import Control.Monad (MonadPlus (..))
import Control.Monad.IO.Class (MonadIO (..))
import Control.Monad.Reader (MonadReader, ReaderT (..), asks)
import Control.Monad.State.Strict (MonadState (..), StateT (..), gets, modify')
import Control.Monad.Trans.Maybe (MaybeT (..))
import Data.ByteString.Char8 qualified as BSC
import Data.IntMap.Strict (IntMap)
import Data.IntMap.Strict qualified as IM
import Data.Kind (Type)
import Data.List.NonEmpty (NonEmpty (..))
import Data.Maybe (isJust)
import Data.Text (Text)
import Data.Type.Equality (type (:~:) (..), type (:~~:) (..))
import GHC.TypeLits (Symbol)
import Prettyprinter (Doc, Pretty (..), nest, parens, sep)
import TreeSitter (NodeId (..), Range (..))
import TreeSitter qualified as TS

import Cubix.Language.Info (TermLab)
import Cubix.Language.Parametric.Derive
import Cubix.ParsePretty (type RootSort)
import Data.Comp.Multi (Term)
import Data.Comp.Multi.Kinds qualified as Kinds

--------------------------------------------------------------------------------
-- Sort
--------------------------------------------------------------------------------

data SourceFileL
data ModuleDefinitionL
data ModuleBodyL
data HiddenEnumItemL
data HiddenEnumSignatureL
data HiddenEnumIdentifierL
data IdentifierL
data AbilityDeclsL
data AbilityL
data TypeParametersL
data TypeParameterL
data HiddenTypeParameterIdentifierL
data EnumVariantsL
data VariantL
data HiddenVariantIdentifierL
data DatatypeFieldsL
data HiddenTypeL
data HiddenReferenceL
data FunctionTypeParametersL
data ModuleAccessL
data HiddenModuleIdentifierL
data HiddenReservedIdentifierL
data ModuleIdentityL
data NumLiteralL
data TypeArgumentsL
data FieldAnnotationL
data HiddenFieldIdentifierL
data PostfixAbilityDeclsL
data HiddenFunctionItemL
data HiddenFunctionSignatureL
data HiddenFunctionIdentifierL
data FunctionParametersL
data FunctionParameterL
data HiddenVariableIdentifierL
data MutFunctionParameterL
data ModifierL
data RetTypeL
data HiddenMacroSignatureL
data BlockL
data HiddenExpressionL
data HiddenExistsL
data HiddenExpressionTermL
data HiddenMatchBodyL
data MatchArmL
data BindListL
data HiddenBindL
data AddressLiteralL
data BindFieldsL
data BindFieldL
data MutBindFieldL
data BoolLiteralL
data ByteStringLiteralL
data HexStringLiteralL
data NameExpressionL
data HiddenLiteralValueL
data AtBindL
data BindUnpackL
data MutBindVarL
data MatchConditionL
data HiddenSpecBlockTargetL
data HiddenStructIdentifierL
data HiddenSpecFunctionL
data HiddenSpecFunctionSignatureL
data ArgListL
data BlockItemL
data LetStatementL
data FieldInitializeListL
data ExpFieldL
data LabelL
data MacroModuleAccessL
data SpecBodyL
data HiddenSpecBlockMemeberL
data HiddenSpecAbortIfL
data ConditionPropertiesL
data SpecPropertyL
data HiddenSpecAbortWithOrModifiesL
data HiddenSpecConditionL
data HiddenSpecConditionKindL
data NativeSpecFunctionL
data SpecApplyPatternL
data SpecApplyNamePatternL
data UninterpretedSpecFunctionL
data UsualSpecFunctionL
data UseDeclarationL
data UseFunL
data UseModuleL
data UseModuleMemberL
data UseMemberL
data UseModuleMembersL
data HiddenForallL
data HiddenUnaryExpressionL
data AnnotationExpressionL
data BreakExpressionL
data CallExpressionL
data ContinueExpressionL
data DotExpressionL
data ExpressionListL
data IfExpressionL
data IndexExpressionL
data MacroCallExpressionL
data MatchExpressionL
data PackExpressionL
data SpecBlockL
data UnaryOpL
data UnitExpressionL
data VectorExpressionL
data BlockIdentifierL
data BorrowExpressionL
data DereferenceExpressionL
data LambdaBindingsL
data LambdaBindingL
data MoveOrCopyExpressionL
data QuantifierBindingsL
data QuantifierBindingL
data UnaryExpressionL
data HiddenStructItemL
data HiddenStructSignatureL
data ConstantL
data FriendDeclarationL
data FriendAccessL

--------------------------------------------------------------------------------
-- Modularized syntax
--------------------------------------------------------------------------------

data BangTokL
data NeqTokL
data DollarTokL
data ModTokL
data BitandTokL
data AndTokL
data MulTokL
data AddTokL
data SubTokL
data RangeTokL
data DivTokL
data LtTokL
data ShlTokL
data LeTokL
data AssignTokL
data EqTokL
data ImpliesTokL
data GtTokL
data GeTokL
data ShrTokL
data XorTokL
data AbortsWithTokL
data AddressTokL
data AssertTokL
data AssumeTokL
data BoolTokL
data BytearrayTokL
data CopyTokL
data DecreasesTokL
data DropTokL
data EnsuresTokL
data FriendTokL
data GlobalTokL
data InternalTokL
data KeyTokL
data LocalTokL
data ModifiesTokL
data ModuleTokL
data MoveTokL
data PackTokL
data PackageTokL
data PhantomTokL
data PostTokL
data PublicTokL
data SignerTokL
data StoreTokL
data SucceedsIfTokL
data U128TokL
data U16TokL
data U256TokL
data U32TokL
data U64TokL
data U8TokL
data UnpackTokL
data UpdateTokL
data BitorTokL
data OrTokL

data Token e l where
  Bang :: Token e BangTokL
  Neq :: Token e NeqTokL
  Dollar :: Token e DollarTokL
  Mod :: Token e ModTokL
  Bitand :: Token e BitandTokL
  And :: Token e AndTokL
  Mul :: Token e MulTokL
  Add :: Token e AddTokL
  Sub :: Token e SubTokL
  Range :: Token e RangeTokL
  Div :: Token e DivTokL
  Lt :: Token e LtTokL
  Shl :: Token e ShlTokL
  Le :: Token e LeTokL
  Assign :: Token e AssignTokL
  Eq :: Token e EqTokL
  Implies :: Token e ImpliesTokL
  Gt :: Token e GtTokL
  Ge :: Token e GeTokL
  Shr :: Token e ShrTokL
  Xor :: Token e XorTokL
  AbortsWith :: Token e AbortsWithTokL
  Address :: Token e AddressTokL
  Assert :: Token e AssertTokL
  Assume :: Token e AssumeTokL
  Bool :: Token e BoolTokL
  Bytearray :: Token e BytearrayTokL
  Copy :: Token e CopyTokL
  Decreases :: Token e DecreasesTokL
  Drop :: Token e DropTokL
  Ensures :: Token e EnsuresTokL
  Friend :: Token e FriendTokL
  Global :: Token e GlobalTokL
  Internal :: Token e InternalTokL
  Key :: Token e KeyTokL
  Local :: Token e LocalTokL
  Modifies :: Token e ModifiesTokL
  Module :: Token e ModuleTokL
  Move :: Token e MoveTokL
  Pack :: Token e PackTokL
  Package :: Token e PackageTokL
  Phantom :: Token e PhantomTokL
  Post :: Token e PostTokL
  Public :: Token e PublicTokL
  Signer :: Token e SignerTokL
  Store :: Token e StoreTokL
  SucceedsIf :: Token e SucceedsIfTokL
  U128 :: Token e U128TokL
  U16 :: Token e U16TokL
  U256 :: Token e U256TokL
  U32 :: Token e U32TokL
  U64 :: Token e U64TokL
  U8 :: Token e U8TokL
  Unpack :: Token e UnpackTokL
  Update :: Token e UpdateTokL
  Bitor :: Token e BitorTokL
  Or :: Token e OrTokL

deriveAll [''Token]

data SourceFile e l where
  SourceFile
    :: e [ModuleDefinitionL]
    -> SourceFile e SourceFileL

data ModuleDefinition e l where
  ModuleDefinition
    :: e ModuleTokL
    -> e ModuleIdentityL
    -> e ModuleBodyL
    -> ModuleDefinition e ModuleDefinitionL

data ModuleBody e l where
  ModuleBody
    :: e [Either FriendDeclarationL (Either ConstantL (Either HiddenFunctionItemL (Either HiddenStructItemL (Either HiddenEnumItemL (Either SpecBlockL UseDeclarationL)))))]
    -> ModuleBody e ModuleBodyL

data HiddenEnumItem e l where
  EnumDefinitionEnumItem
    :: HiddenEnumItem e HiddenEnumItemL

data HiddenEnumSignature e l where
  HiddenEnumSignature
    :: e HiddenEnumIdentifierL
    -> e (Maybe TypeParametersL)
    -> e (Maybe AbilityDeclsL)
    -> HiddenEnumSignature e HiddenEnumSignatureL

data HiddenEnumIdentifier e l where
  HiddenEnumIdentifier
    :: e IdentifierL
    -> HiddenEnumIdentifier e HiddenEnumIdentifierL

data Identifier e l where
  Identifier
    :: Identifier e IdentifierL

data AbilityDecls e l where
  AbilityDecls
    :: e (Maybe AbilityL, [AbilityL])
    -> AbilityDecls e AbilityDeclsL

data Ability e l where
  CopyAbility
    :: Ability e AbilityL
  DropAbility
    :: Ability e AbilityL
  StoreAbility
    :: Ability e AbilityL
  KeyAbility
    :: Ability e AbilityL

data TypeParameters e l where
  TypeParameters
    :: e LtTokL
    -> e ([TypeParameterL], TypeParameterL)
    -> e GtTokL
    -> TypeParameters e TypeParametersL

data TypeParameter e l where
  TypeParameter
    :: e (Maybe DollarTokL)
    -> e (Maybe PhantomTokL)
    -> e HiddenTypeParameterIdentifierL
    -> e (Maybe ([(AbilityL, AddTokL)], (Maybe AddTokL, AbilityL)))
    -> TypeParameter e TypeParameterL

data HiddenTypeParameterIdentifier e l where
  HiddenTypeParameterIdentifier
    :: e IdentifierL
    -> HiddenTypeParameterIdentifier e HiddenTypeParameterIdentifierL

data EnumVariants e l where
  EnumVariants
    :: e (Maybe VariantL, [VariantL])
    -> EnumVariants e EnumVariantsL

data Variant e l where
  Variant
    :: e HiddenVariantIdentifierL
    -> e (Maybe DatatypeFieldsL)
    -> Variant e VariantL

data HiddenVariantIdentifier e l where
  HiddenVariantIdentifier
    :: e IdentifierL
    -> HiddenVariantIdentifier e HiddenVariantIdentifierL

data DatatypeFields e l where
  PositionalFieldsDatatypeFields
    :: e (Maybe HiddenTypeL, [HiddenTypeL])
    -> DatatypeFields e DatatypeFieldsL
  NamedFieldsDatatypeFields
    :: e (Maybe FieldAnnotationL, [FieldAnnotationL])
    -> DatatypeFields e DatatypeFieldsL

data HiddenType e l where
  ApplyTypeType
    :: e (Maybe TypeArgumentsL, ModuleAccessL)
    -> HiddenType e HiddenTypeL
  RefTypeType
    :: e (HiddenTypeL, HiddenReferenceL)
    -> HiddenType e HiddenTypeL
  TupleTypeType
    :: e (Maybe HiddenTypeL, [HiddenTypeL])
    -> HiddenType e HiddenTypeL
  FunctionTypeType
    :: e (Maybe HiddenTypeL, FunctionTypeParametersL)
    -> HiddenType e HiddenTypeL
  PrimitiveTypeType
    :: HiddenType e HiddenTypeL

data HiddenReference e l where
  ImmRefReference
    :: HiddenReference e HiddenReferenceL
  MutRefReference
    :: HiddenReference e HiddenReferenceL

data FunctionTypeParameters e l where
  FunctionTypeParameters
    :: e BitorTokL
    -> e (Maybe HiddenTypeL, [HiddenTypeL])
    -> e BitorTokL
    -> FunctionTypeParameters e FunctionTypeParametersL

data ModuleAccess e l where
  ModuleAccess1
    :: e DollarTokL
    -> e IdentifierL
    -> ModuleAccess e ModuleAccessL
  ModuleAccess2
    :: e IdentifierL
    -> ModuleAccess e ModuleAccessL
  MemberModuleAccess
    :: e HiddenReservedIdentifierL
    -> ModuleAccess e ModuleAccessL
  ModuleAccess4
    :: e IdentifierL
    -> e (Maybe TypeArgumentsL)
    -> ModuleAccess e ModuleAccessL
  ModuleAccess5
    :: e HiddenModuleIdentifierL
    -> e (Maybe TypeArgumentsL)
    -> e IdentifierL
    -> ModuleAccess e ModuleAccessL
  ModuleAccess6
    :: e ModuleIdentityL
    -> e IdentifierL
    -> e TypeArgumentsL
    -> ModuleAccess e ModuleAccessL
  ModuleAccess7
    :: e ModuleIdentityL
    -> e (Maybe TypeArgumentsL)
    -> ModuleAccess e ModuleAccessL
  ModuleAccess8
    :: e ModuleIdentityL
    -> e (Maybe TypeArgumentsL)
    -> e IdentifierL
    -> ModuleAccess e ModuleAccessL
  ModuleAccess9
    :: e ModuleIdentityL
    -> e IdentifierL
    -> e (Maybe TypeArgumentsL)
    -> e IdentifierL
    -> ModuleAccess e ModuleAccessL

data HiddenModuleIdentifier e l where
  HiddenModuleIdentifier
    :: e IdentifierL
    -> HiddenModuleIdentifier e HiddenModuleIdentifierL

data HiddenReservedIdentifier e l where
  HiddenForallReservedIdentifier
    :: HiddenReservedIdentifier e HiddenReservedIdentifierL
  HiddenExistsReservedIdentifier
    :: HiddenReservedIdentifier e HiddenReservedIdentifierL

data ModuleIdentity e l where
  ModuleIdentity
    :: e (Either HiddenModuleIdentifierL NumLiteralL)
    -> e HiddenModuleIdentifierL
    -> ModuleIdentity e ModuleIdentityL

data NumLiteral e l where
  NumLiteral
    :: NumLiteral e NumLiteralL

data TypeArguments e l where
  TypeArguments
    :: e LtTokL
    -> e ([HiddenTypeL], HiddenTypeL)
    -> e GtTokL
    -> TypeArguments e TypeArgumentsL

data FieldAnnotation e l where
  FieldAnnotation
    :: e HiddenFieldIdentifierL
    -> e HiddenTypeL
    -> FieldAnnotation e FieldAnnotationL

data HiddenFieldIdentifier e l where
  HiddenFieldIdentifier
    :: e IdentifierL
    -> HiddenFieldIdentifier e HiddenFieldIdentifierL

data PostfixAbilityDecls e l where
  PostfixAbilityDecls
    :: e (Maybe AbilityL, [AbilityL])
    -> PostfixAbilityDecls e PostfixAbilityDeclsL

data HiddenFunctionItem e l where
  NativeFunctionDefinitionFunctionItem
    :: e HiddenFunctionSignatureL
    -> HiddenFunctionItem e HiddenFunctionItemL
  MacroFunctionDefinitionFunctionItem
    :: e (HiddenMacroSignatureL, (BlockL, Maybe ModifierL))
    -> HiddenFunctionItem e HiddenFunctionItemL
  FunctionDefinitionFunctionItem
    :: e (BlockL, HiddenFunctionSignatureL)
    -> HiddenFunctionItem e HiddenFunctionItemL

data HiddenFunctionSignature e l where
  HiddenFunctionSignature
    :: e (Maybe ModifierL)
    -> e (Maybe ModifierL)
    -> e (Maybe ModifierL)
    -> e HiddenFunctionIdentifierL
    -> e (Maybe TypeParametersL)
    -> e FunctionParametersL
    -> e (Maybe RetTypeL)
    -> HiddenFunctionSignature e HiddenFunctionSignatureL

data HiddenFunctionIdentifier e l where
  HiddenFunctionIdentifier
    :: e IdentifierL
    -> HiddenFunctionIdentifier e HiddenFunctionIdentifierL

data FunctionParameters e l where
  FunctionParameters
    :: e (Maybe (Either FunctionParameterL MutFunctionParameterL), [Either FunctionParameterL MutFunctionParameterL])
    -> FunctionParameters e FunctionParametersL

data FunctionParameter e l where
  FunctionParameter
    :: e (Either (HiddenVariableIdentifierL, DollarTokL) HiddenVariableIdentifierL)
    -> e HiddenTypeL
    -> FunctionParameter e FunctionParameterL

data HiddenVariableIdentifier e l where
  HiddenVariableIdentifier
    :: e IdentifierL
    -> HiddenVariableIdentifier e HiddenVariableIdentifierL

data MutFunctionParameter e l where
  MutFunctionParameter
    :: e FunctionParameterL
    -> MutFunctionParameter e MutFunctionParameterL

data Modifier e l where
  Modifier1
    :: Modifier e ModifierL
  EntryModifier
    :: Modifier e ModifierL
  NativeModifier
    :: Modifier e ModifierL

data RetType e l where
  RetType
    :: e HiddenTypeL
    -> RetType e RetTypeL

data HiddenMacroSignature e l where
  HiddenMacroSignature
    :: e (Maybe ModifierL)
    -> e HiddenFunctionIdentifierL
    -> e (Maybe TypeParametersL)
    -> e FunctionParametersL
    -> e (Maybe RetTypeL)
    -> HiddenMacroSignature e HiddenMacroSignatureL

data Block e l where
  Block
    :: e [UseDeclarationL]
    -> e [BlockItemL]
    -> e (Maybe HiddenExpressionL)
    -> Block e BlockL

data HiddenExpression e l where
  CallExpressionExpression
    :: e (ArgListL, NameExpressionL)
    -> HiddenExpression e HiddenExpressionL
  MacroCallExpressionExpression
    :: e (Maybe TypeArgumentsL, (ArgListL, MacroModuleAccessL))
    -> HiddenExpression e HiddenExpressionL
  LambdaExpressionExpression
    :: e (Maybe HiddenTypeL, (HiddenExpressionL, LambdaBindingsL))
    -> HiddenExpression e HiddenExpressionL
  IfExpressionExpression
    :: e (HiddenExpressionL, (HiddenExpressionL, Maybe HiddenExpressionL))
    -> HiddenExpression e HiddenExpressionL
  WhileExpressionExpression
    :: e (HiddenExpressionL, HiddenExpressionL)
    -> HiddenExpression e HiddenExpressionL
  ReturnExpressionExpression
    :: e (Either (Maybe LabelL) (Maybe LabelL, HiddenExpressionL))
    -> HiddenExpression e HiddenExpressionL
  AbortExpressionExpression
    :: e (Maybe HiddenExpressionL)
    -> HiddenExpression e HiddenExpressionL
  AssignExpressionExpression
    :: HiddenExpression e HiddenExpressionL
  HiddenUnaryExpressionExpression
    :: e (Either BorrowExpressionL (Either DereferenceExpressionL (Either MoveOrCopyExpressionL (Either HiddenExpressionTermL UnaryExpressionL))))
    -> HiddenExpression e HiddenExpressionL
  BinaryExpressionExpression
    :: HiddenExpression e HiddenExpressionL
  CastExpressionExpression
    :: e (HiddenTypeL, HiddenExpressionL)
    -> HiddenExpression e HiddenExpressionL
  QuantifierExpressionExpression
    :: e (QuantifierBindingsL, (Maybe HiddenExpressionL, (HiddenExpressionL, Either HiddenExistsL HiddenForallL)))
    -> HiddenExpression e HiddenExpressionL
  MatchExpressionExpression
    :: e (HiddenExpressionL, HiddenMatchBodyL)
    -> HiddenExpression e HiddenExpressionL
  VectorExpressionExpression
    :: HiddenExpression e HiddenExpressionL
  LoopExpressionExpression
    :: e HiddenExpressionL
    -> HiddenExpression e HiddenExpressionL
  IdentifiedExpressionExpression
    :: e (HiddenExpressionL, BlockIdentifierL)
    -> HiddenExpression e HiddenExpressionL

data HiddenExists e l where
  HiddenExists
    :: HiddenExists e HiddenExistsL

data HiddenExpressionTerm e l where
  CallExpressionExpressionTerm
    :: e (ArgListL, NameExpressionL)
    -> HiddenExpressionTerm e HiddenExpressionTermL
  BreakExpressionExpressionTerm
    :: e (Maybe LabelL, Maybe HiddenExpressionL)
    -> HiddenExpressionTerm e HiddenExpressionTermL
  ContinueExpressionExpressionTerm
    :: e (Maybe LabelL)
    -> HiddenExpressionTerm e HiddenExpressionTermL
  NameExpressionExpressionTerm
    :: e ModuleAccessL
    -> HiddenExpressionTerm e HiddenExpressionTermL
  MacroCallExpressionExpressionTerm
    :: e (Maybe TypeArgumentsL, (ArgListL, MacroModuleAccessL))
    -> HiddenExpressionTerm e HiddenExpressionTermL
  PackExpressionExpressionTerm
    :: e (FieldInitializeListL, NameExpressionL)
    -> HiddenExpressionTerm e HiddenExpressionTermL
  HiddenLiteralValueExpressionTerm
    :: e (Either BoolLiteralL (Either NumLiteralL (Either HexStringLiteralL (Either ByteStringLiteralL AddressLiteralL))))
    -> HiddenExpressionTerm e HiddenExpressionTermL
  UnitExpressionExpressionTerm
    :: HiddenExpressionTerm e HiddenExpressionTermL
  ExpressionListExpressionTerm
    :: e ([HiddenExpressionL], HiddenExpressionL)
    -> HiddenExpressionTerm e HiddenExpressionTermL
  AnnotationExpressionExpressionTerm
    :: e (HiddenExpressionL, HiddenTypeL)
    -> HiddenExpressionTerm e HiddenExpressionTermL
  BlockExpressionTerm
    :: e ([UseDeclarationL], ([BlockItemL], Maybe HiddenExpressionL))
    -> HiddenExpressionTerm e HiddenExpressionTermL
  SpecBlockExpressionTerm
    :: e (Either HiddenSpecFunctionL (SpecBodyL, Maybe HiddenSpecBlockTargetL))
    -> HiddenExpressionTerm e HiddenExpressionTermL
  IfExpressionExpressionTerm
    :: e (HiddenExpressionL, (HiddenExpressionL, Maybe HiddenExpressionL))
    -> HiddenExpressionTerm e HiddenExpressionTermL
  DotExpressionExpressionTerm
    :: e (HiddenExpressionTermL, HiddenExpressionTermL)
    -> HiddenExpressionTerm e HiddenExpressionTermL
  IndexExpressionExpressionTerm
    :: e ((Maybe HiddenExpressionL, [HiddenExpressionL]), HiddenExpressionTermL)
    -> HiddenExpressionTerm e HiddenExpressionTermL
  VectorExpressionExpressionTerm
    :: HiddenExpressionTerm e HiddenExpressionTermL
  MatchExpressionExpressionTerm
    :: e (HiddenExpressionL, HiddenMatchBodyL)
    -> HiddenExpressionTerm e HiddenExpressionTermL

data HiddenMatchBody e l where
  HiddenMatchBody
    :: e (Maybe MatchArmL, [MatchArmL])
    -> HiddenMatchBody e HiddenMatchBodyL

data MatchArm e l where
  MatchArm
    :: e BindListL
    -> e (Maybe MatchConditionL)
    -> e HiddenExpressionL
    -> MatchArm e MatchArmL

data BindList e l where
  HiddenBindBindList
    :: e (Either BindUnpackL (Either AtBindL (Either HiddenLiteralValueL (Either HiddenVariableIdentifierL MutBindVarL))))
    -> BindList e BindListL
  CommaBindListBindList
    :: e (Maybe HiddenBindL, [HiddenBindL])
    -> BindList e BindListL
  OrBindListBindList
    :: BindList e BindListL

data HiddenBind e l where
  MutBindVarBind
    :: e HiddenVariableIdentifierL
    -> HiddenBind e HiddenBindL
  BindVarBind
    :: e HiddenVariableIdentifierL
    -> HiddenBind e HiddenBindL
  BindUnpackBind
    :: e (Maybe BindFieldsL, NameExpressionL)
    -> HiddenBind e HiddenBindL
  AtBindBind
    :: e (BindListL, HiddenVariableIdentifierL)
    -> HiddenBind e HiddenBindL
  HiddenLiteralValueBind
    :: e (Either BoolLiteralL (Either NumLiteralL (Either HexStringLiteralL (Either ByteStringLiteralL AddressLiteralL))))
    -> HiddenBind e HiddenBindL

data AddressLiteral e l where
  AddressLiteral
    :: AddressLiteral e AddressLiteralL

data BindFields e l where
  BindPositionalFieldsBindFields
    :: e (Maybe (Either MutBindFieldL BindFieldL), [Either MutBindFieldL BindFieldL])
    -> BindFields e BindFieldsL
  BindNamedFieldsBindFields
    :: e (Maybe (Either MutBindFieldL BindFieldL), [Either MutBindFieldL BindFieldL])
    -> BindFields e BindFieldsL

data BindField e l where
  BindField1
    :: e BindListL
    -> e (Maybe BindListL)
    -> BindField e BindFieldL
  HiddenSpreadOperatorBindField
    :: BindField e BindFieldL

data MutBindField e l where
  MutBindField
    :: e BindFieldL
    -> MutBindField e MutBindFieldL

data BoolLiteral e l where
  TrueBoolLiteral
    :: BoolLiteral e BoolLiteralL
  FalseBoolLiteral
    :: BoolLiteral e BoolLiteralL

data ByteStringLiteral e l where
  ByteStringLiteral
    :: ByteStringLiteral e ByteStringLiteralL

data HexStringLiteral e l where
  HexStringLiteral
    :: HexStringLiteral e HexStringLiteralL

data NameExpression e l where
  NameExpression
    :: e ModuleAccessL
    -> NameExpression e NameExpressionL

data HiddenLiteralValue e l where
  AddressLiteralLiteralValue
    :: HiddenLiteralValue e HiddenLiteralValueL
  BoolLiteralLiteralValue
    :: HiddenLiteralValue e HiddenLiteralValueL
  NumLiteralLiteralValue
    :: HiddenLiteralValue e HiddenLiteralValueL
  HexStringLiteralLiteralValue
    :: HiddenLiteralValue e HiddenLiteralValueL
  ByteStringLiteralLiteralValue
    :: HiddenLiteralValue e HiddenLiteralValueL

data AtBind e l where
  AtBind
    :: e HiddenVariableIdentifierL
    -> e BindListL
    -> AtBind e AtBindL

data BindUnpack e l where
  BindUnpack
    :: e NameExpressionL
    -> e (Maybe BindFieldsL)
    -> BindUnpack e BindUnpackL

data MutBindVar e l where
  MutBindVar
    :: e HiddenVariableIdentifierL
    -> MutBindVar e MutBindVarL

data MatchCondition e l where
  MatchCondition
    :: e HiddenExpressionL
    -> MatchCondition e MatchConditionL

data HiddenSpecBlockTarget e l where
  HiddenSpecBlockIdentifierSpecBlockTarget
    :: e IdentifierL
    -> HiddenSpecBlockTarget e HiddenSpecBlockTargetL
  SpecBlockTargetModuleSpecBlockTarget
    :: HiddenSpecBlockTarget e HiddenSpecBlockTargetL
  SpecBlockTargetSchemaSpecBlockTarget
    :: e (HiddenStructIdentifierL, Maybe TypeParametersL)
    -> HiddenSpecBlockTarget e HiddenSpecBlockTargetL

data HiddenStructIdentifier e l where
  HiddenStructIdentifier
    :: e IdentifierL
    -> HiddenStructIdentifier e HiddenStructIdentifierL

data HiddenSpecFunction e l where
  NativeSpecFunctionSpecFunction
    :: e HiddenSpecFunctionSignatureL
    -> HiddenSpecFunction e HiddenSpecFunctionL
  UsualSpecFunctionSpecFunction
    :: e (HiddenSpecFunctionSignatureL, BlockL)
    -> HiddenSpecFunction e HiddenSpecFunctionL
  UninterpretedSpecFunctionSpecFunction
    :: e HiddenSpecFunctionSignatureL
    -> HiddenSpecFunction e HiddenSpecFunctionL

data HiddenSpecFunctionSignature e l where
  HiddenSpecFunctionSignature
    :: e HiddenFunctionIdentifierL
    -> e (Maybe TypeParametersL)
    -> e FunctionParametersL
    -> e RetTypeL
    -> HiddenSpecFunctionSignature e HiddenSpecFunctionSignatureL

data ArgList e l where
  ArgList
    :: e (Maybe HiddenExpressionL, [HiddenExpressionL])
    -> ArgList e ArgListL

data BlockItem e l where
  BlockItem
    :: e (Either LetStatementL HiddenExpressionL)
    -> BlockItem e BlockItemL

data LetStatement e l where
  LetStatement
    :: e BindListL
    -> e (Maybe HiddenTypeL)
    -> e (Maybe (HiddenExpressionL, AssignTokL))
    -> LetStatement e LetStatementL

data FieldInitializeList e l where
  FieldInitializeList
    :: e (Maybe ExpFieldL, [ExpFieldL])
    -> FieldInitializeList e FieldInitializeListL

data ExpField e l where
  ExpField
    :: e HiddenFieldIdentifierL
    -> e (Maybe HiddenExpressionL)
    -> ExpField e ExpFieldL

data Label e l where
  Label
    :: e IdentifierL
    -> Label e LabelL

data MacroModuleAccess e l where
  MacroModuleAccess
    :: e ModuleAccessL
    -> e BangTokL
    -> MacroModuleAccess e MacroModuleAccessL

data SpecBody e l where
  SpecBody
    :: e [UseDeclarationL]
    -> e [HiddenSpecBlockMemeberL]
    -> SpecBody e SpecBodyL

data HiddenSpecBlockMemeber e l where
  SpecInvariantSpecBlockMemeber
    :: HiddenSpecBlockMemeber e HiddenSpecBlockMemeberL
  HiddenSpecFunctionSpecBlockMemeber
    :: e (Either UsualSpecFunctionL (Either UninterpretedSpecFunctionL NativeSpecFunctionL))
    -> HiddenSpecBlockMemeber e HiddenSpecBlockMemeberL
  SpecConditionSpecBlockMemeber
    :: e (Either HiddenSpecAbortIfL (Either HiddenSpecAbortWithOrModifiesL HiddenSpecConditionL))
    -> HiddenSpecBlockMemeber e HiddenSpecBlockMemeberL
  SpecIncludeSpecBlockMemeber
    :: e HiddenExpressionL
    -> HiddenSpecBlockMemeber e HiddenSpecBlockMemeberL
  SpecApplySpecBlockMemeber
    :: e (HiddenExpressionL, (([SpecApplyPatternL], SpecApplyPatternL), Maybe ([SpecApplyPatternL], SpecApplyPatternL)))
    -> HiddenSpecBlockMemeber e HiddenSpecBlockMemeberL
  SpecPragmaSpecBlockMemeber
    :: e (Maybe SpecPropertyL, [SpecPropertyL])
    -> HiddenSpecBlockMemeber e HiddenSpecBlockMemeberL
  SpecVariableSpecBlockMemeber
    :: HiddenSpecBlockMemeber e HiddenSpecBlockMemeberL
  SpecLetSpecBlockMemeber
    :: HiddenSpecBlockMemeber e HiddenSpecBlockMemeberL

data HiddenSpecAbortIf e l where
  HiddenSpecAbortIf
    :: e (Maybe ConditionPropertiesL)
    -> e HiddenExpressionL
    -> e (Maybe HiddenExpressionL)
    -> HiddenSpecAbortIf e HiddenSpecAbortIfL

data ConditionProperties e l where
  ConditionProperties
    :: e (Maybe SpecPropertyL, [SpecPropertyL])
    -> ConditionProperties e ConditionPropertiesL

data SpecProperty e l where
  SpecProperty
    :: e IdentifierL
    -> e (Maybe (HiddenLiteralValueL, AssignTokL))
    -> SpecProperty e SpecPropertyL

data HiddenSpecAbortWithOrModifies e l where
  HiddenSpecAbortWithOrModifies
    :: e (Either ModifiesTokL AbortsWithTokL)
    -> e (Maybe ConditionPropertiesL)
    -> e ([HiddenExpressionL], HiddenExpressionL)
    -> HiddenSpecAbortWithOrModifies e HiddenSpecAbortWithOrModifiesL

data HiddenSpecCondition e l where
  HiddenSpecCondition
    :: e (Either (Maybe ModuleTokL) HiddenSpecConditionKindL)
    -> e (Maybe ConditionPropertiesL)
    -> e HiddenExpressionL
    -> HiddenSpecCondition e HiddenSpecConditionL

data HiddenSpecConditionKind e l where
  AssertSpecConditionKind
    :: HiddenSpecConditionKind e HiddenSpecConditionKindL
  AssumeSpecConditionKind
    :: HiddenSpecConditionKind e HiddenSpecConditionKindL
  DecreasesSpecConditionKind
    :: HiddenSpecConditionKind e HiddenSpecConditionKindL
  EnsuresSpecConditionKind
    :: HiddenSpecConditionKind e HiddenSpecConditionKindL
  SucceedsIfSpecConditionKind
    :: HiddenSpecConditionKind e HiddenSpecConditionKindL

data NativeSpecFunction e l where
  NativeSpecFunction
    :: e HiddenSpecFunctionSignatureL
    -> NativeSpecFunction e NativeSpecFunctionL

data SpecApplyPattern e l where
  SpecApplyPattern
    :: e (Maybe (Either InternalTokL PublicTokL))
    -> e SpecApplyNamePatternL
    -> e (Maybe TypeParametersL)
    -> SpecApplyPattern e SpecApplyPatternL

data SpecApplyNamePattern e l where
  SpecApplyNamePattern
    :: SpecApplyNamePattern e SpecApplyNamePatternL

data UninterpretedSpecFunction e l where
  UninterpretedSpecFunction
    :: e HiddenSpecFunctionSignatureL
    -> UninterpretedSpecFunction e UninterpretedSpecFunctionL

data UsualSpecFunction e l where
  UsualSpecFunction
    :: e HiddenSpecFunctionSignatureL
    -> e BlockL
    -> UsualSpecFunction e UsualSpecFunctionL

data UseDeclaration e l where
  UseDeclaration
    :: e (Maybe PublicTokL)
    -> e (Either UseModuleL (Either UseModuleMemberL (Either UseModuleMembersL UseFunL)))
    -> UseDeclaration e UseDeclarationL

data UseFun e l where
  UseFun
    :: e ModuleAccessL
    -> e (HiddenFunctionIdentifierL, ModuleAccessL)
    -> UseFun e UseFunL

data UseModule e l where
  UseModule
    :: e ModuleIdentityL
    -> e (Maybe HiddenModuleIdentifierL)
    -> UseModule e UseModuleL

data UseModuleMember e l where
  UseModuleMember
    :: e ModuleIdentityL
    -> e UseMemberL
    -> UseModuleMember e UseModuleMemberL

data UseMember e l where
  UseMember1
    :: e IdentifierL
    -> e ([UseMemberL], UseMemberL)
    -> UseMember e UseMemberL
  UseMember2
    :: e IdentifierL
    -> e IdentifierL
    -> e (Maybe IdentifierL)
    -> UseMember e UseMemberL
  UseMember3
    :: e IdentifierL
    -> e (Maybe IdentifierL)
    -> UseMember e UseMemberL

data UseModuleMembers e l where
  UseModuleMembers1
    :: e (Either HiddenModuleIdentifierL NumLiteralL)
    -> e ([UseMemberL], UseMemberL)
    -> UseModuleMembers e UseModuleMembersL
  UseModuleMembers2
    :: e ModuleIdentityL
    -> e ([UseMemberL], UseMemberL)
    -> UseModuleMembers e UseModuleMembersL

data HiddenForall e l where
  HiddenForall
    :: HiddenForall e HiddenForallL

data HiddenUnaryExpression e l where
  UnaryExpressionUnaryExpression
    :: e (HiddenExpressionL, UnaryOpL)
    -> HiddenUnaryExpression e HiddenUnaryExpressionL
  BorrowExpressionUnaryExpression
    :: e (HiddenExpressionL, HiddenReferenceL)
    -> HiddenUnaryExpression e HiddenUnaryExpressionL
  DereferenceExpressionUnaryExpression
    :: HiddenUnaryExpression e HiddenUnaryExpressionL
  MoveOrCopyExpressionUnaryExpression
    :: HiddenUnaryExpression e HiddenUnaryExpressionL
  HiddenExpressionTermUnaryExpression
    :: e (Either BreakExpressionL (Either ContinueExpressionL (Either NameExpressionL (Either MacroCallExpressionL (Either PackExpressionL (Either HiddenLiteralValueL (Either UnitExpressionL (Either ExpressionListL (Either AnnotationExpressionL (Either BlockL (Either SpecBlockL (Either IfExpressionL (Either DotExpressionL (Either IndexExpressionL (Either VectorExpressionL (Either MatchExpressionL CallExpressionL))))))))))))))))
    -> HiddenUnaryExpression e HiddenUnaryExpressionL

data AnnotationExpression e l where
  AnnotationExpression
    :: e HiddenExpressionL
    -> e HiddenTypeL
    -> AnnotationExpression e AnnotationExpressionL

data BreakExpression e l where
  BreakExpression
    :: e (Maybe LabelL)
    -> e (Maybe HiddenExpressionL)
    -> BreakExpression e BreakExpressionL

data CallExpression e l where
  CallExpression
    :: e NameExpressionL
    -> e ArgListL
    -> CallExpression e CallExpressionL

data ContinueExpression e l where
  ContinueExpression
    :: e (Maybe LabelL)
    -> ContinueExpression e ContinueExpressionL

data DotExpression e l where
  DotExpression
    :: e HiddenExpressionTermL
    -> e HiddenExpressionTermL
    -> DotExpression e DotExpressionL

data ExpressionList e l where
  ExpressionList
    :: e ([HiddenExpressionL], HiddenExpressionL)
    -> ExpressionList e ExpressionListL

data IfExpression e l where
  IfExpression
    :: e HiddenExpressionL
    -> e HiddenExpressionL
    -> e (Maybe HiddenExpressionL)
    -> IfExpression e IfExpressionL

data IndexExpression e l where
  IndexExpression
    :: e HiddenExpressionTermL
    -> e (Maybe HiddenExpressionL, [HiddenExpressionL])
    -> IndexExpression e IndexExpressionL

data MacroCallExpression e l where
  MacroCallExpression
    :: e MacroModuleAccessL
    -> e (Maybe TypeArgumentsL)
    -> e ArgListL
    -> MacroCallExpression e MacroCallExpressionL

data MatchExpression e l where
  MatchExpression
    :: e HiddenExpressionL
    -> e HiddenMatchBodyL
    -> MatchExpression e MatchExpressionL

data PackExpression e l where
  PackExpression
    :: e NameExpressionL
    -> e FieldInitializeListL
    -> PackExpression e PackExpressionL

data SpecBlock e l where
  SpecBlock
    :: e (Either HiddenSpecFunctionL (SpecBodyL, Maybe HiddenSpecBlockTargetL))
    -> SpecBlock e SpecBlockL

data UnaryOp e l where
  UnaryOp
    :: UnaryOp e UnaryOpL

data UnitExpression e l where
  UnitExpression
    :: UnitExpression e UnitExpressionL

data VectorExpression e l where
  VectorExpression
    :: e (Maybe (([HiddenTypeL], HiddenTypeL), GtTokL))
    -> e (Maybe HiddenExpressionL, [HiddenExpressionL])
    -> VectorExpression e VectorExpressionL

data BlockIdentifier e l where
  BlockIdentifier
    :: e LabelL
    -> BlockIdentifier e BlockIdentifierL

data BorrowExpression e l where
  BorrowExpression
    :: e HiddenReferenceL
    -> e HiddenExpressionL
    -> BorrowExpression e BorrowExpressionL

data DereferenceExpression e l where
  DereferenceExpression
    :: e MulTokL
    -> e HiddenExpressionL
    -> DereferenceExpression e DereferenceExpressionL

data LambdaBindings e l where
  LambdaBindings
    :: e BitorTokL
    -> e (Maybe LambdaBindingL, [LambdaBindingL])
    -> e BitorTokL
    -> LambdaBindings e LambdaBindingsL

data LambdaBinding e l where
  CommaBindListLambdaBinding
    :: e (Maybe HiddenBindL, [HiddenBindL])
    -> LambdaBinding e LambdaBindingL
  BindLambdaBinding
    :: e HiddenBindL
    -> LambdaBinding e LambdaBindingL
  LambdaBinding3
    :: e HiddenBindL
    -> e (Maybe HiddenTypeL)
    -> LambdaBinding e LambdaBindingL

data MoveOrCopyExpression e l where
  MoveOrCopyExpression
    :: e (Either CopyTokL MoveTokL)
    -> e HiddenExpressionL
    -> MoveOrCopyExpression e MoveOrCopyExpressionL

data QuantifierBindings e l where
  QuantifierBindings
    :: e QuantifierBindingL
    -> e [QuantifierBindingL]
    -> QuantifierBindings e QuantifierBindingsL

data QuantifierBinding e l where
  QuantifierBinding1
    :: e IdentifierL
    -> e HiddenTypeL
    -> QuantifierBinding e QuantifierBindingL
  QuantifierBinding2
    :: e IdentifierL
    -> e HiddenExpressionL
    -> QuantifierBinding e QuantifierBindingL

data UnaryExpression e l where
  UnaryExpression
    :: e UnaryOpL
    -> e HiddenExpressionL
    -> UnaryExpression e UnaryExpressionL

data HiddenStructItem e l where
  NativeStructDefinitionStructItem
    :: HiddenStructItem e HiddenStructItemL
  StructDefinitionStructItem
    :: HiddenStructItem e HiddenStructItemL

data HiddenStructSignature e l where
  HiddenStructSignature
    :: e HiddenStructIdentifierL
    -> e (Maybe TypeParametersL)
    -> e (Maybe AbilityDeclsL)
    -> HiddenStructSignature e HiddenStructSignatureL

data Constant e l where
  Constant
    :: e IdentifierL
    -> e HiddenTypeL
    -> e AssignTokL
    -> e HiddenExpressionL
    -> Constant e ConstantL

data FriendDeclaration e l where
  FriendDeclaration
    :: e FriendTokL
    -> e FriendAccessL
    -> FriendDeclaration e FriendDeclarationL

data FriendAccess e l where
  LocalModuleFriendAccess
    :: e IdentifierL
    -> FriendAccess e FriendAccessL
  FullyQualifiedModuleFriendAccess
    :: e ModuleIdentityL
    -> FriendAccess e FriendAccessL

--------------------------------------------------------------------------------
-- Compdata derivation

deriveAll
  [ ''SourceFile
  , ''ModuleDefinition
  , ''ModuleBody
  , ''HiddenEnumItem
  , ''HiddenEnumSignature
  , ''HiddenEnumIdentifier
  , ''Identifier
  , ''AbilityDecls
  , ''Ability
  , ''TypeParameters
  , ''TypeParameter
  , ''HiddenTypeParameterIdentifier
  , ''EnumVariants
  , ''Variant
  , ''HiddenVariantIdentifier
  , ''DatatypeFields
  , ''HiddenType
  , ''HiddenReference
  , ''FunctionTypeParameters
  , ''ModuleAccess
  , ''HiddenModuleIdentifier
  , ''HiddenReservedIdentifier
  , ''ModuleIdentity
  , ''NumLiteral
  , ''TypeArguments
  , ''FieldAnnotation
  , ''HiddenFieldIdentifier
  , ''PostfixAbilityDecls
  , ''HiddenFunctionItem
  , ''HiddenFunctionSignature
  , ''HiddenFunctionIdentifier
  , ''FunctionParameters
  , ''FunctionParameter
  , ''HiddenVariableIdentifier
  , ''MutFunctionParameter
  , ''Modifier
  , ''RetType
  , ''HiddenMacroSignature
  , ''Block
  , ''HiddenExpression
  , ''HiddenExists
  , ''HiddenExpressionTerm
  , ''HiddenMatchBody
  , ''MatchArm
  , ''BindList
  , ''HiddenBind
  , ''AddressLiteral
  , ''BindFields
  , ''BindField
  , ''MutBindField
  , ''BoolLiteral
  , ''ByteStringLiteral
  , ''HexStringLiteral
  , ''NameExpression
  , ''HiddenLiteralValue
  , ''AtBind
  , ''BindUnpack
  , ''MutBindVar
  , ''MatchCondition
  , ''HiddenSpecBlockTarget
  , ''HiddenStructIdentifier
  , ''HiddenSpecFunction
  , ''HiddenSpecFunctionSignature
  , ''ArgList
  , ''BlockItem
  , ''LetStatement
  , ''FieldInitializeList
  , ''ExpField
  , ''Label
  , ''MacroModuleAccess
  , ''SpecBody
  , ''HiddenSpecBlockMemeber
  , ''HiddenSpecAbortIf
  , ''ConditionProperties
  , ''SpecProperty
  , ''HiddenSpecAbortWithOrModifies
  , ''HiddenSpecCondition
  , ''HiddenSpecConditionKind
  , ''NativeSpecFunction
  , ''SpecApplyPattern
  , ''SpecApplyNamePattern
  , ''UninterpretedSpecFunction
  , ''UsualSpecFunction
  , ''UseDeclaration
  , ''UseFun
  , ''UseModule
  , ''UseModuleMember
  , ''UseMember
  , ''UseModuleMembers
  , ''HiddenForall
  , ''HiddenUnaryExpression
  , ''AnnotationExpression
  , ''BreakExpression
  , ''CallExpression
  , ''ContinueExpression
  , ''DotExpression
  , ''ExpressionList
  , ''IfExpression
  , ''IndexExpression
  , ''MacroCallExpression
  , ''MatchExpression
  , ''PackExpression
  , ''SpecBlock
  , ''UnaryOp
  , ''UnitExpression
  , ''VectorExpression
  , ''BlockIdentifier
  , ''BorrowExpression
  , ''DereferenceExpression
  , ''LambdaBindings
  , ''LambdaBinding
  , ''MoveOrCopyExpression
  , ''QuantifierBindings
  , ''QuantifierBinding
  , ''UnaryExpression
  , ''HiddenStructItem
  , ''HiddenStructSignature
  , ''Constant
  , ''FriendDeclaration
  , ''FriendAccess
  ]

--------------------------------------------------------------------------------
-- Signature
--------------------------------------------------------------------------------

type MoveSig =
  '[ SourceFile
   , ModuleDefinition
   , ModuleBody
   , HiddenEnumItem
   , HiddenEnumSignature
   , HiddenEnumIdentifier
   , Identifier
   , AbilityDecls
   , Ability
   , TypeParameters
   , TypeParameter
   , HiddenTypeParameterIdentifier
   , EnumVariants
   , Variant
   , HiddenVariantIdentifier
   , DatatypeFields
   , HiddenType
   , HiddenReference
   , FunctionTypeParameters
   , ModuleAccess
   , HiddenModuleIdentifier
   , HiddenReservedIdentifier
   , ModuleIdentity
   , NumLiteral
   , TypeArguments
   , FieldAnnotation
   , HiddenFieldIdentifier
   , PostfixAbilityDecls
   , HiddenFunctionItem
   , HiddenFunctionSignature
   , HiddenFunctionIdentifier
   , FunctionParameters
   , FunctionParameter
   , HiddenVariableIdentifier
   , MutFunctionParameter
   , Modifier
   , RetType
   , HiddenMacroSignature
   , Block
   , HiddenExpression
   , HiddenExists
   , HiddenExpressionTerm
   , HiddenMatchBody
   , MatchArm
   , BindList
   , HiddenBind
   , AddressLiteral
   , BindFields
   , BindField
   , MutBindField
   , BoolLiteral
   , ByteStringLiteral
   , HexStringLiteral
   , NameExpression
   , HiddenLiteralValue
   , AtBind
   , BindUnpack
   , MutBindVar
   , MatchCondition
   , HiddenSpecBlockTarget
   , HiddenStructIdentifier
   , HiddenSpecFunction
   , HiddenSpecFunctionSignature
   , ArgList
   , BlockItem
   , LetStatement
   , FieldInitializeList
   , ExpField
   , Label
   , MacroModuleAccess
   , SpecBody
   , HiddenSpecBlockMemeber
   , HiddenSpecAbortIf
   , ConditionProperties
   , SpecProperty
   , HiddenSpecAbortWithOrModifies
   , HiddenSpecCondition
   , HiddenSpecConditionKind
   , NativeSpecFunction
   , SpecApplyPattern
   , SpecApplyNamePattern
   , UninterpretedSpecFunction
   , UsualSpecFunction
   , UseDeclaration
   , UseFun
   , UseModule
   , UseModuleMember
   , UseMember
   , UseModuleMembers
   , HiddenForall
   , HiddenUnaryExpression
   , AnnotationExpression
   , BreakExpression
   , CallExpression
   , ContinueExpression
   , DotExpression
   , ExpressionList
   , IfExpression
   , IndexExpression
   , MacroCallExpression
   , MatchExpression
   , PackExpression
   , SpecBlock
   , UnaryOp
   , UnitExpression
   , VectorExpression
   , BlockIdentifier
   , BorrowExpression
   , DereferenceExpression
   , LambdaBindings
   , LambdaBinding
   , MoveOrCopyExpression
   , QuantifierBindings
   , QuantifierBinding
   , UnaryExpression
   , HiddenStructItem
   , HiddenStructSignature
   , Constant
   , FriendDeclaration
   , FriendAccess
   ]

type MoveTerm      = Term MoveSig
type MoveTermLab l = TermLab MoveSig l

--------------------------------------------------------------------------------
-- Entry point
--------------------------------------------------------------------------------

type instance RootSort MoveSig = SourceFileL
