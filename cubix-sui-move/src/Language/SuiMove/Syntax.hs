-- WARNING: This module was generated by `tree-sitter-generate-ast`.
--
-- build-depends:
--   , base          >=4.13 && <5
--   , bytestring    >=0.11 && <0.13
--   , containers    >=0.6  && <0.8
--   , mtl           >=2.3  && <2.4
--   , prettyprinter >=1.7  && <1.8
--   , transformers  >=0.6  && <0.7
--   , tree-sitter
--
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE ImportQualifiedPost #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE PatternSynonyms #-}
{-# LANGUAGE StandaloneKindSignatures #-}
{-# LANGUAGE TypeData #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE UndecidableInstances #-}

module Language.SuiMove.Syntax (
  Sort (..),
  SortSing (..),
  decSortSing,
  SymbolType (..),
  SymbolTypeSing (..),
  decSymbolTypeSing,
  Symbol (..),
  SymbolSing (..),
  decSymbolSing,
  symbolToSymbolType,
  SymbolToSort,
  symbolToSort,
  SomeSymbolSing (..),
  SymbolTable,
  mkSymbolTable,
  type (:<) (..),
  Node (
    SourceFile,
    ModuleDefinition,
    ModuleBody,
    EnumItem,
    EnumDefinition,
    EnumSignature,
    EnumIdentifier,
    Identifier,
    AbilityDecls,
    Ability,
    TypeParameters,
    TypeParameter,
    TypeParameterIdentifier,
    EnumVariants,
    Variant,
    VariantIdentifier,
    DatatypeFields,
    NamedFields,
    FieldAnnotation,
    FieldIdentifier,
    Type,
    ApplyType,
    ModuleAccess,
    ModuleIdentifier,
    ReservedIdentifier,
    Exists,
    Forall,
    ModuleIdentity,
    NumLiteral,
    TypeArguments,
    FunctionType,
    FunctionTypeParameters,
    PrimitiveType,
    RefType,
    Reference,
    ImmRef,
    MutRef,
    TupleType,
    PositionalFields,
    PostfixAbilityDecls,
    FunctionItem,
    FunctionDefinition,
    FunctionSignature,
    FunctionIdentifier,
    FunctionParameters,
    FunctionParameter,
    VariableIdentifier,
    MutFunctionParameter,
    Modifier,
    RetType,
    Block,
    Expression,
    UnaryExpression,
    ExpressionTerm,
    LiteralValue,
    AddressLiteral,
    BoolLiteral,
    ByteStringLiteral,
    HexStringLiteral,
    AnnotationExpression,
    BreakExpression,
    Label,
    CallExpression,
    ArgList,
    NameExpression,
    ContinueExpression,
    DotExpression,
    ExpressionList,
    IfExpression,
    IndexExpression,
    MacroCallExpression,
    MacroModuleAccess,
    MatchExpression,
    MatchBody,
    MatchArm,
    BindList,
    Bind,
    AtBind,
    BindUnpack,
    BindFields,
    BindNamedFields,
    BindField,
    SpreadOperator,
    MutBindField,
    BindPositionalFields,
    MutBindVar,
    CommaBindList,
    OrBindList,
    MatchCondition,
    PackExpression,
    FieldInitializeList,
    ExpField,
    SpecBlock,
    Identifier,
    SpecBlockTargetSchema,
    StructIdentifier,
    SpecFunction,
    NativeSpecFunction,
    SpecFunctionSignature,
    UninterpretedSpecFunction,
    UsualSpecFunction,
    SpecBody,
    SpecBlockMemeber,
    SpecApply,
    SpecApplyPattern,
    SpecApplyNamePattern,
    SpecCondition,
    SpecAbortIf,
    ConditionProperties,
    SpecProperty,
    SpecAbortWithOrModifies,
    SpecCondition,
    SpecConditionKind,
    SpecInclude,
    SpecInvariant,
    SpecLet,
    SpecPragma,
    SpecVariable,
    UseDeclaration,
    UseFun,
    UseModule,
    UseModuleMember,
    UseMember,
    UseModuleMembers,
    UnitExpression,
    VectorExpression,
    BorrowExpression,
    DereferenceExpression,
    MoveOrCopyExpression,
    UnaryExpression,
    UnaryOp,
    AbortExpression,
    AssignExpression,
    BinaryExpression,
    CastExpression,
    IdentifiedExpression,
    BlockIdentifier,
    LambdaExpression,
    LambdaBindings,
    LambdaBinding,
    LoopExpression,
    QuantifierExpression,
    QuantifierBindings,
    QuantifierBinding,
    ReturnExpression,
    WhileExpression,
    BlockItem,
    LetStatement,
    MacroFunctionDefinition,
    MacroSignature,
    NativeFunctionDefinition,
    StructItem,
    NativeStructDefinition,
    StructSignature,
    StructDefinition,
    Constant,
    FriendDeclaration,
    FriendAccess,
    Error,
    Missing,
    SortMismatch
  ),
  nodeToNodeId,
  nodeToRange,
  nodeToChildren,
  SomeNode (..),
  someNodeToNodeId,
  someNodeToRange,
  someNodeToChildren,
  NodeContent (..),
  nodeContentToSymbol,
  Children (..),
  ChildList (..),
  Ast,
  AstCache,
  parseAst,
  checkSort,
) where

import Control.Applicative (Alternative (..), optional)
import Control.Monad (MonadPlus (..))
import Control.Monad.IO.Class (MonadIO (..))
import Control.Monad.Reader (MonadReader, ReaderT (..), asks)
import Control.Monad.State.Strict (MonadState (..), StateT (..), gets, modify')
import Control.Monad.Trans.Maybe (MaybeT (..))
import Data.ByteString.Char8 qualified as BSC
import Data.IntMap.Strict (IntMap)
import Data.IntMap.Strict qualified as IM
import Data.Kind (Type)
import Data.List.NonEmpty (NonEmpty (..))
import Data.Maybe (isJust)
import Data.Type.Equality (type (:~:) (..), type (:~~:) (..))
import Prettyprinter (Doc, Pretty (..), nest, parens, sep)
import TreeSitter (NodeId (..), Range (..))
import TreeSitter qualified as TS

--------------------------------------------------------------------------------
-- Entry point
--------------------------------------------------------------------------------

type Ast = Node SourceFileSort

parseAst :: SymbolTable -> TS.Tree -> AstCache -> IO (Maybe (Ast, AstCache))
parseAst symbolTable tree astCache = do
  rootNode <- TS.treeRootNode tree
  treeCursor <- TS.treeCursorNew rootNode
  let pEnv = PEnv symbolTable treeCursor astCache
  let pState = PState rootNode mempty
  (maybeNode, pState') <- runStateT (runReaderT (runMaybeT (unP p)) pEnv) pState
  pure $ (,newCache pState') <$> maybeNode

--------------------------------------------------------------------------------
-- Sort
--------------------------------------------------------------------------------

type data Sort where
  SourceFileSort :: Sort
  ModuleDefinitionSort :: Sort
  ModuleBodySort :: Sort
  EnumItemSort :: Sort
  EnumDefinitionSort :: Sort
  EnumSignatureSort :: Sort
  EnumIdentifierSort :: Sort
  IdentifierSort :: Sort
  AbilityDeclsSort :: Sort
  AbilitySort :: Sort
  TypeParametersSort :: Sort
  TypeParameterSort :: Sort
  TypeParameterIdentifierSort :: Sort
  EnumVariantsSort :: Sort
  VariantSort :: Sort
  VariantIdentifierSort :: Sort
  DatatypeFieldsSort :: Sort
  NamedFieldsSort :: Sort
  FieldAnnotationSort :: Sort
  FieldIdentifierSort :: Sort
  TypeSort :: Sort
  ApplyTypeSort :: Sort
  ModuleAccessSort :: Sort
  ModuleIdentifierSort :: Sort
  ReservedIdentifierSort :: Sort
  ExistsSort :: Sort
  ForallSort :: Sort
  ModuleIdentitySort :: Sort
  NumLiteralSort :: Sort
  TypeArgumentsSort :: Sort
  FunctionTypeSort :: Sort
  FunctionTypeParametersSort :: Sort
  PrimitiveTypeSort :: Sort
  RefTypeSort :: Sort
  ReferenceSort :: Sort
  ImmRefSort :: Sort
  MutRefSort :: Sort
  TupleTypeSort :: Sort
  PositionalFieldsSort :: Sort
  PostfixAbilityDeclsSort :: Sort
  FunctionItemSort :: Sort
  FunctionDefinitionSort :: Sort
  FunctionSignatureSort :: Sort
  FunctionIdentifierSort :: Sort
  FunctionParametersSort :: Sort
  FunctionParameterSort :: Sort
  VariableIdentifierSort :: Sort
  MutFunctionParameterSort :: Sort
  ModifierSort :: Sort
  RetTypeSort :: Sort
  BlockSort :: Sort
  ExpressionSort :: Sort
  UnaryExpressionSort :: Sort
  ExpressionTermSort :: Sort
  LiteralValueSort :: Sort
  AddressLiteralSort :: Sort
  BoolLiteralSort :: Sort
  ByteStringLiteralSort :: Sort
  HexStringLiteralSort :: Sort
  AnnotationExpressionSort :: Sort
  BreakExpressionSort :: Sort
  LabelSort :: Sort
  CallExpressionSort :: Sort
  ArgListSort :: Sort
  NameExpressionSort :: Sort
  ContinueExpressionSort :: Sort
  DotExpressionSort :: Sort
  ExpressionListSort :: Sort
  IfExpressionSort :: Sort
  IndexExpressionSort :: Sort
  MacroCallExpressionSort :: Sort
  MacroModuleAccessSort :: Sort
  MatchExpressionSort :: Sort
  MatchBodySort :: Sort
  MatchArmSort :: Sort
  BindListSort :: Sort
  BindSort :: Sort
  AtBindSort :: Sort
  BindUnpackSort :: Sort
  BindFieldsSort :: Sort
  BindNamedFieldsSort :: Sort
  BindFieldSort :: Sort
  SpreadOperatorSort :: Sort
  MutBindFieldSort :: Sort
  BindPositionalFieldsSort :: Sort
  MutBindVarSort :: Sort
  CommaBindListSort :: Sort
  OrBindListSort :: Sort
  MatchConditionSort :: Sort
  PackExpressionSort :: Sort
  FieldInitializeListSort :: Sort
  ExpFieldSort :: Sort
  SpecBlockSort :: Sort
  SpecBlockTargetSort :: Sort
  StructIdentifierSort :: Sort
  SpecFunctionSort :: Sort
  NativeSpecFunctionSort :: Sort
  SpecFunctionSignatureSort :: Sort
  UninterpretedSpecFunctionSort :: Sort
  UsualSpecFunctionSort :: Sort
  SpecBodySort :: Sort
  SpecBlockMemeberSort :: Sort
  SpecApplySort :: Sort
  SpecApplyPatternSort :: Sort
  SpecApplyNamePatternSort :: Sort
  SpecConditionSort :: Sort
  SpecAbortIfSort :: Sort
  ConditionPropertiesSort :: Sort
  SpecPropertySort :: Sort
  SpecAbortWithOrModifiesSort :: Sort
  SpecConditionSort :: Sort
  SpecConditionKindSort :: Sort
  SpecIncludeSort :: Sort
  SpecInvariantSort :: Sort
  SpecLetSort :: Sort
  SpecPragmaSort :: Sort
  SpecVariableSort :: Sort
  UseDeclarationSort :: Sort
  UseFunSort :: Sort
  UseModuleSort :: Sort
  UseModuleMemberSort :: Sort
  UseMemberSort :: Sort
  UseModuleMembersSort :: Sort
  UnitExpressionSort :: Sort
  VectorExpressionSort :: Sort
  BorrowExpressionSort :: Sort
  DereferenceExpressionSort :: Sort
  MoveOrCopyExpressionSort :: Sort
  UnaryExpressionSort :: Sort
  UnaryOpSort :: Sort
  AbortExpressionSort :: Sort
  AssignExpressionSort :: Sort
  BinaryExpressionSort :: Sort
  CastExpressionSort :: Sort
  IdentifiedExpressionSort :: Sort
  BlockIdentifierSort :: Sort
  LambdaExpressionSort :: Sort
  LambdaBindingsSort :: Sort
  LambdaBindingSort :: Sort
  LoopExpressionSort :: Sort
  QuantifierExpressionSort :: Sort
  QuantifierBindingsSort :: Sort
  QuantifierBindingSort :: Sort
  ReturnExpressionSort :: Sort
  WhileExpressionSort :: Sort
  BlockItemSort :: Sort
  LetStatementSort :: Sort
  MacroFunctionDefinitionSort :: Sort
  MacroSignatureSort :: Sort
  NativeFunctionDefinitionSort :: Sort
  StructItemSort :: Sort
  NativeStructDefinitionSort :: Sort
  StructSignatureSort :: Sort
  StructDefinitionSort :: Sort
  ConstantSort :: Sort
  FriendDeclarationSort :: Sort
  FriendAccessSort :: Sort

data SortSing (sort :: Sort) where
  SSourceFileSort :: SortSing SourceFileSort
  SModuleDefinitionSort :: SortSing ModuleDefinitionSort
  SModuleBodySort :: SortSing ModuleBodySort
  SEnumItemSort :: SortSing EnumItemSort
  SEnumDefinitionSort :: SortSing EnumDefinitionSort
  SEnumSignatureSort :: SortSing EnumSignatureSort
  SEnumIdentifierSort :: SortSing EnumIdentifierSort
  SIdentifierSort :: SortSing IdentifierSort
  SAbilityDeclsSort :: SortSing AbilityDeclsSort
  SAbilitySort :: SortSing AbilitySort
  STypeParametersSort :: SortSing TypeParametersSort
  STypeParameterSort :: SortSing TypeParameterSort
  STypeParameterIdentifierSort :: SortSing TypeParameterIdentifierSort
  SEnumVariantsSort :: SortSing EnumVariantsSort
  SVariantSort :: SortSing VariantSort
  SVariantIdentifierSort :: SortSing VariantIdentifierSort
  SDatatypeFieldsSort :: SortSing DatatypeFieldsSort
  SNamedFieldsSort :: SortSing NamedFieldsSort
  SFieldAnnotationSort :: SortSing FieldAnnotationSort
  SFieldIdentifierSort :: SortSing FieldIdentifierSort
  STypeSort :: SortSing TypeSort
  SApplyTypeSort :: SortSing ApplyTypeSort
  SModuleAccessSort :: SortSing ModuleAccessSort
  SModuleIdentifierSort :: SortSing ModuleIdentifierSort
  SReservedIdentifierSort :: SortSing ReservedIdentifierSort
  SExistsSort :: SortSing ExistsSort
  SForallSort :: SortSing ForallSort
  SModuleIdentitySort :: SortSing ModuleIdentitySort
  SNumLiteralSort :: SortSing NumLiteralSort
  STypeArgumentsSort :: SortSing TypeArgumentsSort
  SFunctionTypeSort :: SortSing FunctionTypeSort
  SFunctionTypeParametersSort :: SortSing FunctionTypeParametersSort
  SPrimitiveTypeSort :: SortSing PrimitiveTypeSort
  SRefTypeSort :: SortSing RefTypeSort
  SReferenceSort :: SortSing ReferenceSort
  SImmRefSort :: SortSing ImmRefSort
  SMutRefSort :: SortSing MutRefSort
  STupleTypeSort :: SortSing TupleTypeSort
  SPositionalFieldsSort :: SortSing PositionalFieldsSort
  SPostfixAbilityDeclsSort :: SortSing PostfixAbilityDeclsSort
  SFunctionItemSort :: SortSing FunctionItemSort
  SFunctionDefinitionSort :: SortSing FunctionDefinitionSort
  SFunctionSignatureSort :: SortSing FunctionSignatureSort
  SFunctionIdentifierSort :: SortSing FunctionIdentifierSort
  SFunctionParametersSort :: SortSing FunctionParametersSort
  SFunctionParameterSort :: SortSing FunctionParameterSort
  SVariableIdentifierSort :: SortSing VariableIdentifierSort
  SMutFunctionParameterSort :: SortSing MutFunctionParameterSort
  SModifierSort :: SortSing ModifierSort
  SRetTypeSort :: SortSing RetTypeSort
  SBlockSort :: SortSing BlockSort
  SExpressionSort :: SortSing ExpressionSort
  SUnaryExpressionSort :: SortSing UnaryExpressionSort
  SExpressionTermSort :: SortSing ExpressionTermSort
  SLiteralValueSort :: SortSing LiteralValueSort
  SAddressLiteralSort :: SortSing AddressLiteralSort
  SBoolLiteralSort :: SortSing BoolLiteralSort
  SByteStringLiteralSort :: SortSing ByteStringLiteralSort
  SHexStringLiteralSort :: SortSing HexStringLiteralSort
  SAnnotationExpressionSort :: SortSing AnnotationExpressionSort
  SBreakExpressionSort :: SortSing BreakExpressionSort
  SLabelSort :: SortSing LabelSort
  SCallExpressionSort :: SortSing CallExpressionSort
  SArgListSort :: SortSing ArgListSort
  SNameExpressionSort :: SortSing NameExpressionSort
  SContinueExpressionSort :: SortSing ContinueExpressionSort
  SDotExpressionSort :: SortSing DotExpressionSort
  SExpressionListSort :: SortSing ExpressionListSort
  SIfExpressionSort :: SortSing IfExpressionSort
  SIndexExpressionSort :: SortSing IndexExpressionSort
  SMacroCallExpressionSort :: SortSing MacroCallExpressionSort
  SMacroModuleAccessSort :: SortSing MacroModuleAccessSort
  SMatchExpressionSort :: SortSing MatchExpressionSort
  SMatchBodySort :: SortSing MatchBodySort
  SMatchArmSort :: SortSing MatchArmSort
  SBindListSort :: SortSing BindListSort
  SBindSort :: SortSing BindSort
  SAtBindSort :: SortSing AtBindSort
  SBindUnpackSort :: SortSing BindUnpackSort
  SBindFieldsSort :: SortSing BindFieldsSort
  SBindNamedFieldsSort :: SortSing BindNamedFieldsSort
  SBindFieldSort :: SortSing BindFieldSort
  SSpreadOperatorSort :: SortSing SpreadOperatorSort
  SMutBindFieldSort :: SortSing MutBindFieldSort
  SBindPositionalFieldsSort :: SortSing BindPositionalFieldsSort
  SMutBindVarSort :: SortSing MutBindVarSort
  SCommaBindListSort :: SortSing CommaBindListSort
  SOrBindListSort :: SortSing OrBindListSort
  SMatchConditionSort :: SortSing MatchConditionSort
  SPackExpressionSort :: SortSing PackExpressionSort
  SFieldInitializeListSort :: SortSing FieldInitializeListSort
  SExpFieldSort :: SortSing ExpFieldSort
  SSpecBlockSort :: SortSing SpecBlockSort
  SSpecBlockTargetSort :: SortSing SpecBlockTargetSort
  SStructIdentifierSort :: SortSing StructIdentifierSort
  SSpecFunctionSort :: SortSing SpecFunctionSort
  SNativeSpecFunctionSort :: SortSing NativeSpecFunctionSort
  SSpecFunctionSignatureSort :: SortSing SpecFunctionSignatureSort
  SUninterpretedSpecFunctionSort :: SortSing UninterpretedSpecFunctionSort
  SUsualSpecFunctionSort :: SortSing UsualSpecFunctionSort
  SSpecBodySort :: SortSing SpecBodySort
  SSpecBlockMemeberSort :: SortSing SpecBlockMemeberSort
  SSpecApplySort :: SortSing SpecApplySort
  SSpecApplyPatternSort :: SortSing SpecApplyPatternSort
  SSpecApplyNamePatternSort :: SortSing SpecApplyNamePatternSort
  SSpecConditionSort :: SortSing SpecConditionSort
  SSpecAbortIfSort :: SortSing SpecAbortIfSort
  SConditionPropertiesSort :: SortSing ConditionPropertiesSort
  SSpecPropertySort :: SortSing SpecPropertySort
  SSpecAbortWithOrModifiesSort :: SortSing SpecAbortWithOrModifiesSort
  SSpecConditionSort :: SortSing SpecConditionSort
  SSpecConditionKindSort :: SortSing SpecConditionKindSort
  SSpecIncludeSort :: SortSing SpecIncludeSort
  SSpecInvariantSort :: SortSing SpecInvariantSort
  SSpecLetSort :: SortSing SpecLetSort
  SSpecPragmaSort :: SortSing SpecPragmaSort
  SSpecVariableSort :: SortSing SpecVariableSort
  SUseDeclarationSort :: SortSing UseDeclarationSort
  SUseFunSort :: SortSing UseFunSort
  SUseModuleSort :: SortSing UseModuleSort
  SUseModuleMemberSort :: SortSing UseModuleMemberSort
  SUseMemberSort :: SortSing UseMemberSort
  SUseModuleMembersSort :: SortSing UseModuleMembersSort
  SUnitExpressionSort :: SortSing UnitExpressionSort
  SVectorExpressionSort :: SortSing VectorExpressionSort
  SBorrowExpressionSort :: SortSing BorrowExpressionSort
  SDereferenceExpressionSort :: SortSing DereferenceExpressionSort
  SMoveOrCopyExpressionSort :: SortSing MoveOrCopyExpressionSort
  SUnaryExpressionSort :: SortSing UnaryExpressionSort
  SUnaryOpSort :: SortSing UnaryOpSort
  SAbortExpressionSort :: SortSing AbortExpressionSort
  SAssignExpressionSort :: SortSing AssignExpressionSort
  SBinaryExpressionSort :: SortSing BinaryExpressionSort
  SCastExpressionSort :: SortSing CastExpressionSort
  SIdentifiedExpressionSort :: SortSing IdentifiedExpressionSort
  SBlockIdentifierSort :: SortSing BlockIdentifierSort
  SLambdaExpressionSort :: SortSing LambdaExpressionSort
  SLambdaBindingsSort :: SortSing LambdaBindingsSort
  SLambdaBindingSort :: SortSing LambdaBindingSort
  SLoopExpressionSort :: SortSing LoopExpressionSort
  SQuantifierExpressionSort :: SortSing QuantifierExpressionSort
  SQuantifierBindingsSort :: SortSing QuantifierBindingsSort
  SQuantifierBindingSort :: SortSing QuantifierBindingSort
  SReturnExpressionSort :: SortSing ReturnExpressionSort
  SWhileExpressionSort :: SortSing WhileExpressionSort
  SBlockItemSort :: SortSing BlockItemSort
  SLetStatementSort :: SortSing LetStatementSort
  SMacroFunctionDefinitionSort :: SortSing MacroFunctionDefinitionSort
  SMacroSignatureSort :: SortSing MacroSignatureSort
  SNativeFunctionDefinitionSort :: SortSing NativeFunctionDefinitionSort
  SStructItemSort :: SortSing StructItemSort
  SNativeStructDefinitionSort :: SortSing NativeStructDefinitionSort
  SStructSignatureSort :: SortSing StructSignatureSort
  SStructDefinitionSort :: SortSing StructDefinitionSort
  SConstantSort :: SortSing ConstantSort
  SFriendDeclarationSort :: SortSing FriendDeclarationSort
  SFriendAccessSort :: SortSing FriendAccessSort

deriving instance Eq (SortSing sort)

deriving instance Show (SortSing sort)

decSortSing :: SortSing sort1 -> SortSing sort2 -> Maybe (sort1 :~: sort2)
decSortSing SSourceFileSort SSourceFileSort = Just Refl
decSortSing SModuleDefinitionSort SModuleDefinitionSort = Just Refl
decSortSing SModuleBodySort SModuleBodySort = Just Refl
decSortSing SEnumItemSort SEnumItemSort = Just Refl
decSortSing SEnumDefinitionSort SEnumDefinitionSort = Just Refl
decSortSing SEnumSignatureSort SEnumSignatureSort = Just Refl
decSortSing SEnumIdentifierSort SEnumIdentifierSort = Just Refl
decSortSing SIdentifierSort SIdentifierSort = Just Refl
decSortSing SAbilityDeclsSort SAbilityDeclsSort = Just Refl
decSortSing SAbilitySort SAbilitySort = Just Refl
decSortSing STypeParametersSort STypeParametersSort = Just Refl
decSortSing STypeParameterSort STypeParameterSort = Just Refl
decSortSing STypeParameterIdentifierSort STypeParameterIdentifierSort = Just Refl
decSortSing SEnumVariantsSort SEnumVariantsSort = Just Refl
decSortSing SVariantSort SVariantSort = Just Refl
decSortSing SVariantIdentifierSort SVariantIdentifierSort = Just Refl
decSortSing SDatatypeFieldsSort SDatatypeFieldsSort = Just Refl
decSortSing SNamedFieldsSort SNamedFieldsSort = Just Refl
decSortSing SFieldAnnotationSort SFieldAnnotationSort = Just Refl
decSortSing SFieldIdentifierSort SFieldIdentifierSort = Just Refl
decSortSing STypeSort STypeSort = Just Refl
decSortSing SApplyTypeSort SApplyTypeSort = Just Refl
decSortSing SModuleAccessSort SModuleAccessSort = Just Refl
decSortSing SModuleIdentifierSort SModuleIdentifierSort = Just Refl
decSortSing SReservedIdentifierSort SReservedIdentifierSort = Just Refl
decSortSing SExistsSort SExistsSort = Just Refl
decSortSing SForallSort SForallSort = Just Refl
decSortSing SModuleIdentitySort SModuleIdentitySort = Just Refl
decSortSing SNumLiteralSort SNumLiteralSort = Just Refl
decSortSing STypeArgumentsSort STypeArgumentsSort = Just Refl
decSortSing SFunctionTypeSort SFunctionTypeSort = Just Refl
decSortSing SFunctionTypeParametersSort SFunctionTypeParametersSort = Just Refl
decSortSing SPrimitiveTypeSort SPrimitiveTypeSort = Just Refl
decSortSing SRefTypeSort SRefTypeSort = Just Refl
decSortSing SReferenceSort SReferenceSort = Just Refl
decSortSing SImmRefSort SImmRefSort = Just Refl
decSortSing SMutRefSort SMutRefSort = Just Refl
decSortSing STupleTypeSort STupleTypeSort = Just Refl
decSortSing SPositionalFieldsSort SPositionalFieldsSort = Just Refl
decSortSing SPostfixAbilityDeclsSort SPostfixAbilityDeclsSort = Just Refl
decSortSing SFunctionItemSort SFunctionItemSort = Just Refl
decSortSing SFunctionDefinitionSort SFunctionDefinitionSort = Just Refl
decSortSing SFunctionSignatureSort SFunctionSignatureSort = Just Refl
decSortSing SFunctionIdentifierSort SFunctionIdentifierSort = Just Refl
decSortSing SFunctionParametersSort SFunctionParametersSort = Just Refl
decSortSing SFunctionParameterSort SFunctionParameterSort = Just Refl
decSortSing SVariableIdentifierSort SVariableIdentifierSort = Just Refl
decSortSing SMutFunctionParameterSort SMutFunctionParameterSort = Just Refl
decSortSing SModifierSort SModifierSort = Just Refl
decSortSing SRetTypeSort SRetTypeSort = Just Refl
decSortSing SBlockSort SBlockSort = Just Refl
decSortSing SExpressionSort SExpressionSort = Just Refl
decSortSing SUnaryExpressionSort SUnaryExpressionSort = Just Refl
decSortSing SExpressionTermSort SExpressionTermSort = Just Refl
decSortSing SLiteralValueSort SLiteralValueSort = Just Refl
decSortSing SAddressLiteralSort SAddressLiteralSort = Just Refl
decSortSing SBoolLiteralSort SBoolLiteralSort = Just Refl
decSortSing SByteStringLiteralSort SByteStringLiteralSort = Just Refl
decSortSing SHexStringLiteralSort SHexStringLiteralSort = Just Refl
decSortSing SAnnotationExpressionSort SAnnotationExpressionSort = Just Refl
decSortSing SBreakExpressionSort SBreakExpressionSort = Just Refl
decSortSing SLabelSort SLabelSort = Just Refl
decSortSing SCallExpressionSort SCallExpressionSort = Just Refl
decSortSing SArgListSort SArgListSort = Just Refl
decSortSing SNameExpressionSort SNameExpressionSort = Just Refl
decSortSing SContinueExpressionSort SContinueExpressionSort = Just Refl
decSortSing SDotExpressionSort SDotExpressionSort = Just Refl
decSortSing SExpressionListSort SExpressionListSort = Just Refl
decSortSing SIfExpressionSort SIfExpressionSort = Just Refl
decSortSing SIndexExpressionSort SIndexExpressionSort = Just Refl
decSortSing SMacroCallExpressionSort SMacroCallExpressionSort = Just Refl
decSortSing SMacroModuleAccessSort SMacroModuleAccessSort = Just Refl
decSortSing SMatchExpressionSort SMatchExpressionSort = Just Refl
decSortSing SMatchBodySort SMatchBodySort = Just Refl
decSortSing SMatchArmSort SMatchArmSort = Just Refl
decSortSing SBindListSort SBindListSort = Just Refl
decSortSing SBindSort SBindSort = Just Refl
decSortSing SAtBindSort SAtBindSort = Just Refl
decSortSing SBindUnpackSort SBindUnpackSort = Just Refl
decSortSing SBindFieldsSort SBindFieldsSort = Just Refl
decSortSing SBindNamedFieldsSort SBindNamedFieldsSort = Just Refl
decSortSing SBindFieldSort SBindFieldSort = Just Refl
decSortSing SSpreadOperatorSort SSpreadOperatorSort = Just Refl
decSortSing SMutBindFieldSort SMutBindFieldSort = Just Refl
decSortSing SBindPositionalFieldsSort SBindPositionalFieldsSort = Just Refl
decSortSing SMutBindVarSort SMutBindVarSort = Just Refl
decSortSing SCommaBindListSort SCommaBindListSort = Just Refl
decSortSing SOrBindListSort SOrBindListSort = Just Refl
decSortSing SMatchConditionSort SMatchConditionSort = Just Refl
decSortSing SPackExpressionSort SPackExpressionSort = Just Refl
decSortSing SFieldInitializeListSort SFieldInitializeListSort = Just Refl
decSortSing SExpFieldSort SExpFieldSort = Just Refl
decSortSing SSpecBlockSort SSpecBlockSort = Just Refl
decSortSing SSpecBlockTargetSort SSpecBlockTargetSort = Just Refl
decSortSing SStructIdentifierSort SStructIdentifierSort = Just Refl
decSortSing SSpecFunctionSort SSpecFunctionSort = Just Refl
decSortSing SNativeSpecFunctionSort SNativeSpecFunctionSort = Just Refl
decSortSing SSpecFunctionSignatureSort SSpecFunctionSignatureSort = Just Refl
decSortSing SUninterpretedSpecFunctionSort SUninterpretedSpecFunctionSort = Just Refl
decSortSing SUsualSpecFunctionSort SUsualSpecFunctionSort = Just Refl
decSortSing SSpecBodySort SSpecBodySort = Just Refl
decSortSing SSpecBlockMemeberSort SSpecBlockMemeberSort = Just Refl
decSortSing SSpecApplySort SSpecApplySort = Just Refl
decSortSing SSpecApplyPatternSort SSpecApplyPatternSort = Just Refl
decSortSing SSpecApplyNamePatternSort SSpecApplyNamePatternSort = Just Refl
decSortSing SSpecConditionSort SSpecConditionSort = Just Refl
decSortSing SSpecAbortIfSort SSpecAbortIfSort = Just Refl
decSortSing SConditionPropertiesSort SConditionPropertiesSort = Just Refl
decSortSing SSpecPropertySort SSpecPropertySort = Just Refl
decSortSing SSpecAbortWithOrModifiesSort SSpecAbortWithOrModifiesSort = Just Refl
decSortSing SSpecConditionSort SSpecConditionSort = Just Refl
decSortSing SSpecConditionKindSort SSpecConditionKindSort = Just Refl
decSortSing SSpecIncludeSort SSpecIncludeSort = Just Refl
decSortSing SSpecInvariantSort SSpecInvariantSort = Just Refl
decSortSing SSpecLetSort SSpecLetSort = Just Refl
decSortSing SSpecPragmaSort SSpecPragmaSort = Just Refl
decSortSing SSpecVariableSort SSpecVariableSort = Just Refl
decSortSing SUseDeclarationSort SUseDeclarationSort = Just Refl
decSortSing SUseFunSort SUseFunSort = Just Refl
decSortSing SUseModuleSort SUseModuleSort = Just Refl
decSortSing SUseModuleMemberSort SUseModuleMemberSort = Just Refl
decSortSing SUseMemberSort SUseMemberSort = Just Refl
decSortSing SUseModuleMembersSort SUseModuleMembersSort = Just Refl
decSortSing SUnitExpressionSort SUnitExpressionSort = Just Refl
decSortSing SVectorExpressionSort SVectorExpressionSort = Just Refl
decSortSing SBorrowExpressionSort SBorrowExpressionSort = Just Refl
decSortSing SDereferenceExpressionSort SDereferenceExpressionSort = Just Refl
decSortSing SMoveOrCopyExpressionSort SMoveOrCopyExpressionSort = Just Refl
decSortSing SUnaryExpressionSort SUnaryExpressionSort = Just Refl
decSortSing SUnaryOpSort SUnaryOpSort = Just Refl
decSortSing SAbortExpressionSort SAbortExpressionSort = Just Refl
decSortSing SAssignExpressionSort SAssignExpressionSort = Just Refl
decSortSing SBinaryExpressionSort SBinaryExpressionSort = Just Refl
decSortSing SCastExpressionSort SCastExpressionSort = Just Refl
decSortSing SIdentifiedExpressionSort SIdentifiedExpressionSort = Just Refl
decSortSing SBlockIdentifierSort SBlockIdentifierSort = Just Refl
decSortSing SLambdaExpressionSort SLambdaExpressionSort = Just Refl
decSortSing SLambdaBindingsSort SLambdaBindingsSort = Just Refl
decSortSing SLambdaBindingSort SLambdaBindingSort = Just Refl
decSortSing SLoopExpressionSort SLoopExpressionSort = Just Refl
decSortSing SQuantifierExpressionSort SQuantifierExpressionSort = Just Refl
decSortSing SQuantifierBindingsSort SQuantifierBindingsSort = Just Refl
decSortSing SQuantifierBindingSort SQuantifierBindingSort = Just Refl
decSortSing SReturnExpressionSort SReturnExpressionSort = Just Refl
decSortSing SWhileExpressionSort SWhileExpressionSort = Just Refl
decSortSing SBlockItemSort SBlockItemSort = Just Refl
decSortSing SLetStatementSort SLetStatementSort = Just Refl
decSortSing SMacroFunctionDefinitionSort SMacroFunctionDefinitionSort = Just Refl
decSortSing SMacroSignatureSort SMacroSignatureSort = Just Refl
decSortSing SNativeFunctionDefinitionSort SNativeFunctionDefinitionSort = Just Refl
decSortSing SStructItemSort SStructItemSort = Just Refl
decSortSing SNativeStructDefinitionSort SNativeStructDefinitionSort = Just Refl
decSortSing SStructSignatureSort SStructSignatureSort = Just Refl
decSortSing SStructDefinitionSort SStructDefinitionSort = Just Refl
decSortSing SConstantSort SConstantSort = Just Refl
decSortSing SFriendDeclarationSort SFriendDeclarationSort = Just Refl
decSortSing SFriendAccessSort SFriendAccessSort = Just Refl
decSortSing _ _ = Nothing

class KnownSort sort where
  sortSing :: SortSing sort

instance KnownSort SourceFileSort where
  sortSing :: SortSing SourceFileSort
  sortSing = SSourceFileSort

instance KnownSort ModuleDefinitionSort where
  sortSing :: SortSing ModuleDefinitionSort
  sortSing = SModuleDefinitionSort

instance KnownSort ModuleBodySort where
  sortSing :: SortSing ModuleBodySort
  sortSing = SModuleBodySort

instance KnownSort EnumItemSort where
  sortSing :: SortSing EnumItemSort
  sortSing = SEnumItemSort

instance KnownSort EnumDefinitionSort where
  sortSing :: SortSing EnumDefinitionSort
  sortSing = SEnumDefinitionSort

instance KnownSort EnumSignatureSort where
  sortSing :: SortSing EnumSignatureSort
  sortSing = SEnumSignatureSort

instance KnownSort EnumIdentifierSort where
  sortSing :: SortSing EnumIdentifierSort
  sortSing = SEnumIdentifierSort

instance KnownSort IdentifierSort where
  sortSing :: SortSing IdentifierSort
  sortSing = SIdentifierSort

instance KnownSort AbilityDeclsSort where
  sortSing :: SortSing AbilityDeclsSort
  sortSing = SAbilityDeclsSort

instance KnownSort AbilitySort where
  sortSing :: SortSing AbilitySort
  sortSing = SAbilitySort

instance KnownSort TypeParametersSort where
  sortSing :: SortSing TypeParametersSort
  sortSing = STypeParametersSort

instance KnownSort TypeParameterSort where
  sortSing :: SortSing TypeParameterSort
  sortSing = STypeParameterSort

instance KnownSort TypeParameterIdentifierSort where
  sortSing :: SortSing TypeParameterIdentifierSort
  sortSing = STypeParameterIdentifierSort

instance KnownSort EnumVariantsSort where
  sortSing :: SortSing EnumVariantsSort
  sortSing = SEnumVariantsSort

instance KnownSort VariantSort where
  sortSing :: SortSing VariantSort
  sortSing = SVariantSort

instance KnownSort VariantIdentifierSort where
  sortSing :: SortSing VariantIdentifierSort
  sortSing = SVariantIdentifierSort

instance KnownSort DatatypeFieldsSort where
  sortSing :: SortSing DatatypeFieldsSort
  sortSing = SDatatypeFieldsSort

instance KnownSort NamedFieldsSort where
  sortSing :: SortSing NamedFieldsSort
  sortSing = SNamedFieldsSort

instance KnownSort FieldAnnotationSort where
  sortSing :: SortSing FieldAnnotationSort
  sortSing = SFieldAnnotationSort

instance KnownSort FieldIdentifierSort where
  sortSing :: SortSing FieldIdentifierSort
  sortSing = SFieldIdentifierSort

instance KnownSort TypeSort where
  sortSing :: SortSing TypeSort
  sortSing = STypeSort

instance KnownSort ApplyTypeSort where
  sortSing :: SortSing ApplyTypeSort
  sortSing = SApplyTypeSort

instance KnownSort ModuleAccessSort where
  sortSing :: SortSing ModuleAccessSort
  sortSing = SModuleAccessSort

instance KnownSort ModuleIdentifierSort where
  sortSing :: SortSing ModuleIdentifierSort
  sortSing = SModuleIdentifierSort

instance KnownSort ReservedIdentifierSort where
  sortSing :: SortSing ReservedIdentifierSort
  sortSing = SReservedIdentifierSort

instance KnownSort ExistsSort where
  sortSing :: SortSing ExistsSort
  sortSing = SExistsSort

instance KnownSort ForallSort where
  sortSing :: SortSing ForallSort
  sortSing = SForallSort

instance KnownSort ModuleIdentitySort where
  sortSing :: SortSing ModuleIdentitySort
  sortSing = SModuleIdentitySort

instance KnownSort NumLiteralSort where
  sortSing :: SortSing NumLiteralSort
  sortSing = SNumLiteralSort

instance KnownSort TypeArgumentsSort where
  sortSing :: SortSing TypeArgumentsSort
  sortSing = STypeArgumentsSort

instance KnownSort FunctionTypeSort where
  sortSing :: SortSing FunctionTypeSort
  sortSing = SFunctionTypeSort

instance KnownSort FunctionTypeParametersSort where
  sortSing :: SortSing FunctionTypeParametersSort
  sortSing = SFunctionTypeParametersSort

instance KnownSort PrimitiveTypeSort where
  sortSing :: SortSing PrimitiveTypeSort
  sortSing = SPrimitiveTypeSort

instance KnownSort RefTypeSort where
  sortSing :: SortSing RefTypeSort
  sortSing = SRefTypeSort

instance KnownSort ReferenceSort where
  sortSing :: SortSing ReferenceSort
  sortSing = SReferenceSort

instance KnownSort ImmRefSort where
  sortSing :: SortSing ImmRefSort
  sortSing = SImmRefSort

instance KnownSort MutRefSort where
  sortSing :: SortSing MutRefSort
  sortSing = SMutRefSort

instance KnownSort TupleTypeSort where
  sortSing :: SortSing TupleTypeSort
  sortSing = STupleTypeSort

instance KnownSort PositionalFieldsSort where
  sortSing :: SortSing PositionalFieldsSort
  sortSing = SPositionalFieldsSort

instance KnownSort PostfixAbilityDeclsSort where
  sortSing :: SortSing PostfixAbilityDeclsSort
  sortSing = SPostfixAbilityDeclsSort

instance KnownSort FunctionItemSort where
  sortSing :: SortSing FunctionItemSort
  sortSing = SFunctionItemSort

instance KnownSort FunctionDefinitionSort where
  sortSing :: SortSing FunctionDefinitionSort
  sortSing = SFunctionDefinitionSort

instance KnownSort FunctionSignatureSort where
  sortSing :: SortSing FunctionSignatureSort
  sortSing = SFunctionSignatureSort

instance KnownSort FunctionIdentifierSort where
  sortSing :: SortSing FunctionIdentifierSort
  sortSing = SFunctionIdentifierSort

instance KnownSort FunctionParametersSort where
  sortSing :: SortSing FunctionParametersSort
  sortSing = SFunctionParametersSort

instance KnownSort FunctionParameterSort where
  sortSing :: SortSing FunctionParameterSort
  sortSing = SFunctionParameterSort

instance KnownSort VariableIdentifierSort where
  sortSing :: SortSing VariableIdentifierSort
  sortSing = SVariableIdentifierSort

instance KnownSort MutFunctionParameterSort where
  sortSing :: SortSing MutFunctionParameterSort
  sortSing = SMutFunctionParameterSort

instance KnownSort ModifierSort where
  sortSing :: SortSing ModifierSort
  sortSing = SModifierSort

instance KnownSort RetTypeSort where
  sortSing :: SortSing RetTypeSort
  sortSing = SRetTypeSort

instance KnownSort BlockSort where
  sortSing :: SortSing BlockSort
  sortSing = SBlockSort

instance KnownSort ExpressionSort where
  sortSing :: SortSing ExpressionSort
  sortSing = SExpressionSort

instance KnownSort UnaryExpressionSort where
  sortSing :: SortSing UnaryExpressionSort
  sortSing = SUnaryExpressionSort

instance KnownSort ExpressionTermSort where
  sortSing :: SortSing ExpressionTermSort
  sortSing = SExpressionTermSort

instance KnownSort LiteralValueSort where
  sortSing :: SortSing LiteralValueSort
  sortSing = SLiteralValueSort

instance KnownSort AddressLiteralSort where
  sortSing :: SortSing AddressLiteralSort
  sortSing = SAddressLiteralSort

instance KnownSort BoolLiteralSort where
  sortSing :: SortSing BoolLiteralSort
  sortSing = SBoolLiteralSort

instance KnownSort ByteStringLiteralSort where
  sortSing :: SortSing ByteStringLiteralSort
  sortSing = SByteStringLiteralSort

instance KnownSort HexStringLiteralSort where
  sortSing :: SortSing HexStringLiteralSort
  sortSing = SHexStringLiteralSort

instance KnownSort AnnotationExpressionSort where
  sortSing :: SortSing AnnotationExpressionSort
  sortSing = SAnnotationExpressionSort

instance KnownSort BreakExpressionSort where
  sortSing :: SortSing BreakExpressionSort
  sortSing = SBreakExpressionSort

instance KnownSort LabelSort where
  sortSing :: SortSing LabelSort
  sortSing = SLabelSort

instance KnownSort CallExpressionSort where
  sortSing :: SortSing CallExpressionSort
  sortSing = SCallExpressionSort

instance KnownSort ArgListSort where
  sortSing :: SortSing ArgListSort
  sortSing = SArgListSort

instance KnownSort NameExpressionSort where
  sortSing :: SortSing NameExpressionSort
  sortSing = SNameExpressionSort

instance KnownSort ContinueExpressionSort where
  sortSing :: SortSing ContinueExpressionSort
  sortSing = SContinueExpressionSort

instance KnownSort DotExpressionSort where
  sortSing :: SortSing DotExpressionSort
  sortSing = SDotExpressionSort

instance KnownSort ExpressionListSort where
  sortSing :: SortSing ExpressionListSort
  sortSing = SExpressionListSort

instance KnownSort IfExpressionSort where
  sortSing :: SortSing IfExpressionSort
  sortSing = SIfExpressionSort

instance KnownSort IndexExpressionSort where
  sortSing :: SortSing IndexExpressionSort
  sortSing = SIndexExpressionSort

instance KnownSort MacroCallExpressionSort where
  sortSing :: SortSing MacroCallExpressionSort
  sortSing = SMacroCallExpressionSort

instance KnownSort MacroModuleAccessSort where
  sortSing :: SortSing MacroModuleAccessSort
  sortSing = SMacroModuleAccessSort

instance KnownSort MatchExpressionSort where
  sortSing :: SortSing MatchExpressionSort
  sortSing = SMatchExpressionSort

instance KnownSort MatchBodySort where
  sortSing :: SortSing MatchBodySort
  sortSing = SMatchBodySort

instance KnownSort MatchArmSort where
  sortSing :: SortSing MatchArmSort
  sortSing = SMatchArmSort

instance KnownSort BindListSort where
  sortSing :: SortSing BindListSort
  sortSing = SBindListSort

instance KnownSort BindSort where
  sortSing :: SortSing BindSort
  sortSing = SBindSort

instance KnownSort AtBindSort where
  sortSing :: SortSing AtBindSort
  sortSing = SAtBindSort

instance KnownSort BindUnpackSort where
  sortSing :: SortSing BindUnpackSort
  sortSing = SBindUnpackSort

instance KnownSort BindFieldsSort where
  sortSing :: SortSing BindFieldsSort
  sortSing = SBindFieldsSort

instance KnownSort BindNamedFieldsSort where
  sortSing :: SortSing BindNamedFieldsSort
  sortSing = SBindNamedFieldsSort

instance KnownSort BindFieldSort where
  sortSing :: SortSing BindFieldSort
  sortSing = SBindFieldSort

instance KnownSort SpreadOperatorSort where
  sortSing :: SortSing SpreadOperatorSort
  sortSing = SSpreadOperatorSort

instance KnownSort MutBindFieldSort where
  sortSing :: SortSing MutBindFieldSort
  sortSing = SMutBindFieldSort

instance KnownSort BindPositionalFieldsSort where
  sortSing :: SortSing BindPositionalFieldsSort
  sortSing = SBindPositionalFieldsSort

instance KnownSort MutBindVarSort where
  sortSing :: SortSing MutBindVarSort
  sortSing = SMutBindVarSort

instance KnownSort CommaBindListSort where
  sortSing :: SortSing CommaBindListSort
  sortSing = SCommaBindListSort

instance KnownSort OrBindListSort where
  sortSing :: SortSing OrBindListSort
  sortSing = SOrBindListSort

instance KnownSort MatchConditionSort where
  sortSing :: SortSing MatchConditionSort
  sortSing = SMatchConditionSort

instance KnownSort PackExpressionSort where
  sortSing :: SortSing PackExpressionSort
  sortSing = SPackExpressionSort

instance KnownSort FieldInitializeListSort where
  sortSing :: SortSing FieldInitializeListSort
  sortSing = SFieldInitializeListSort

instance KnownSort ExpFieldSort where
  sortSing :: SortSing ExpFieldSort
  sortSing = SExpFieldSort

instance KnownSort SpecBlockSort where
  sortSing :: SortSing SpecBlockSort
  sortSing = SSpecBlockSort

instance KnownSort SpecBlockTargetSort where
  sortSing :: SortSing SpecBlockTargetSort
  sortSing = SSpecBlockTargetSort

instance KnownSort StructIdentifierSort where
  sortSing :: SortSing StructIdentifierSort
  sortSing = SStructIdentifierSort

instance KnownSort SpecFunctionSort where
  sortSing :: SortSing SpecFunctionSort
  sortSing = SSpecFunctionSort

instance KnownSort NativeSpecFunctionSort where
  sortSing :: SortSing NativeSpecFunctionSort
  sortSing = SNativeSpecFunctionSort

instance KnownSort SpecFunctionSignatureSort where
  sortSing :: SortSing SpecFunctionSignatureSort
  sortSing = SSpecFunctionSignatureSort

instance KnownSort UninterpretedSpecFunctionSort where
  sortSing :: SortSing UninterpretedSpecFunctionSort
  sortSing = SUninterpretedSpecFunctionSort

instance KnownSort UsualSpecFunctionSort where
  sortSing :: SortSing UsualSpecFunctionSort
  sortSing = SUsualSpecFunctionSort

instance KnownSort SpecBodySort where
  sortSing :: SortSing SpecBodySort
  sortSing = SSpecBodySort

instance KnownSort SpecBlockMemeberSort where
  sortSing :: SortSing SpecBlockMemeberSort
  sortSing = SSpecBlockMemeberSort

instance KnownSort SpecApplySort where
  sortSing :: SortSing SpecApplySort
  sortSing = SSpecApplySort

instance KnownSort SpecApplyPatternSort where
  sortSing :: SortSing SpecApplyPatternSort
  sortSing = SSpecApplyPatternSort

instance KnownSort SpecApplyNamePatternSort where
  sortSing :: SortSing SpecApplyNamePatternSort
  sortSing = SSpecApplyNamePatternSort

instance KnownSort SpecConditionSort where
  sortSing :: SortSing SpecConditionSort
  sortSing = SSpecConditionSort

instance KnownSort SpecAbortIfSort where
  sortSing :: SortSing SpecAbortIfSort
  sortSing = SSpecAbortIfSort

instance KnownSort ConditionPropertiesSort where
  sortSing :: SortSing ConditionPropertiesSort
  sortSing = SConditionPropertiesSort

instance KnownSort SpecPropertySort where
  sortSing :: SortSing SpecPropertySort
  sortSing = SSpecPropertySort

instance KnownSort SpecAbortWithOrModifiesSort where
  sortSing :: SortSing SpecAbortWithOrModifiesSort
  sortSing = SSpecAbortWithOrModifiesSort

instance KnownSort SpecConditionSort where
  sortSing :: SortSing SpecConditionSort
  sortSing = SSpecConditionSort

instance KnownSort SpecConditionKindSort where
  sortSing :: SortSing SpecConditionKindSort
  sortSing = SSpecConditionKindSort

instance KnownSort SpecIncludeSort where
  sortSing :: SortSing SpecIncludeSort
  sortSing = SSpecIncludeSort

instance KnownSort SpecInvariantSort where
  sortSing :: SortSing SpecInvariantSort
  sortSing = SSpecInvariantSort

instance KnownSort SpecLetSort where
  sortSing :: SortSing SpecLetSort
  sortSing = SSpecLetSort

instance KnownSort SpecPragmaSort where
  sortSing :: SortSing SpecPragmaSort
  sortSing = SSpecPragmaSort

instance KnownSort SpecVariableSort where
  sortSing :: SortSing SpecVariableSort
  sortSing = SSpecVariableSort

instance KnownSort UseDeclarationSort where
  sortSing :: SortSing UseDeclarationSort
  sortSing = SUseDeclarationSort

instance KnownSort UseFunSort where
  sortSing :: SortSing UseFunSort
  sortSing = SUseFunSort

instance KnownSort UseModuleSort where
  sortSing :: SortSing UseModuleSort
  sortSing = SUseModuleSort

instance KnownSort UseModuleMemberSort where
  sortSing :: SortSing UseModuleMemberSort
  sortSing = SUseModuleMemberSort

instance KnownSort UseMemberSort where
  sortSing :: SortSing UseMemberSort
  sortSing = SUseMemberSort

instance KnownSort UseModuleMembersSort where
  sortSing :: SortSing UseModuleMembersSort
  sortSing = SUseModuleMembersSort

instance KnownSort UnitExpressionSort where
  sortSing :: SortSing UnitExpressionSort
  sortSing = SUnitExpressionSort

instance KnownSort VectorExpressionSort where
  sortSing :: SortSing VectorExpressionSort
  sortSing = SVectorExpressionSort

instance KnownSort BorrowExpressionSort where
  sortSing :: SortSing BorrowExpressionSort
  sortSing = SBorrowExpressionSort

instance KnownSort DereferenceExpressionSort where
  sortSing :: SortSing DereferenceExpressionSort
  sortSing = SDereferenceExpressionSort

instance KnownSort MoveOrCopyExpressionSort where
  sortSing :: SortSing MoveOrCopyExpressionSort
  sortSing = SMoveOrCopyExpressionSort

instance KnownSort UnaryExpressionSort where
  sortSing :: SortSing UnaryExpressionSort
  sortSing = SUnaryExpressionSort

instance KnownSort UnaryOpSort where
  sortSing :: SortSing UnaryOpSort
  sortSing = SUnaryOpSort

instance KnownSort AbortExpressionSort where
  sortSing :: SortSing AbortExpressionSort
  sortSing = SAbortExpressionSort

instance KnownSort AssignExpressionSort where
  sortSing :: SortSing AssignExpressionSort
  sortSing = SAssignExpressionSort

instance KnownSort BinaryExpressionSort where
  sortSing :: SortSing BinaryExpressionSort
  sortSing = SBinaryExpressionSort

instance KnownSort CastExpressionSort where
  sortSing :: SortSing CastExpressionSort
  sortSing = SCastExpressionSort

instance KnownSort IdentifiedExpressionSort where
  sortSing :: SortSing IdentifiedExpressionSort
  sortSing = SIdentifiedExpressionSort

instance KnownSort BlockIdentifierSort where
  sortSing :: SortSing BlockIdentifierSort
  sortSing = SBlockIdentifierSort

instance KnownSort LambdaExpressionSort where
  sortSing :: SortSing LambdaExpressionSort
  sortSing = SLambdaExpressionSort

instance KnownSort LambdaBindingsSort where
  sortSing :: SortSing LambdaBindingsSort
  sortSing = SLambdaBindingsSort

instance KnownSort LambdaBindingSort where
  sortSing :: SortSing LambdaBindingSort
  sortSing = SLambdaBindingSort

instance KnownSort LoopExpressionSort where
  sortSing :: SortSing LoopExpressionSort
  sortSing = SLoopExpressionSort

instance KnownSort QuantifierExpressionSort where
  sortSing :: SortSing QuantifierExpressionSort
  sortSing = SQuantifierExpressionSort

instance KnownSort QuantifierBindingsSort where
  sortSing :: SortSing QuantifierBindingsSort
  sortSing = SQuantifierBindingsSort

instance KnownSort QuantifierBindingSort where
  sortSing :: SortSing QuantifierBindingSort
  sortSing = SQuantifierBindingSort

instance KnownSort ReturnExpressionSort where
  sortSing :: SortSing ReturnExpressionSort
  sortSing = SReturnExpressionSort

instance KnownSort WhileExpressionSort where
  sortSing :: SortSing WhileExpressionSort
  sortSing = SWhileExpressionSort

instance KnownSort BlockItemSort where
  sortSing :: SortSing BlockItemSort
  sortSing = SBlockItemSort

instance KnownSort LetStatementSort where
  sortSing :: SortSing LetStatementSort
  sortSing = SLetStatementSort

instance KnownSort MacroFunctionDefinitionSort where
  sortSing :: SortSing MacroFunctionDefinitionSort
  sortSing = SMacroFunctionDefinitionSort

instance KnownSort MacroSignatureSort where
  sortSing :: SortSing MacroSignatureSort
  sortSing = SMacroSignatureSort

instance KnownSort NativeFunctionDefinitionSort where
  sortSing :: SortSing NativeFunctionDefinitionSort
  sortSing = SNativeFunctionDefinitionSort

instance KnownSort StructItemSort where
  sortSing :: SortSing StructItemSort
  sortSing = SStructItemSort

instance KnownSort NativeStructDefinitionSort where
  sortSing :: SortSing NativeStructDefinitionSort
  sortSing = SNativeStructDefinitionSort

instance KnownSort StructSignatureSort where
  sortSing :: SortSing StructSignatureSort
  sortSing = SStructSignatureSort

instance KnownSort StructDefinitionSort where
  sortSing :: SortSing StructDefinitionSort
  sortSing = SStructDefinitionSort

instance KnownSort ConstantSort where
  sortSing :: SortSing ConstantSort
  sortSing = SConstantSort

instance KnownSort FriendDeclarationSort where
  sortSing :: SortSing FriendDeclarationSort
  sortSing = SFriendDeclarationSort

instance KnownSort FriendAccessSort where
  sortSing :: SortSing FriendAccessSort
  sortSing = SFriendAccessSort

--------------------------------------------------------------------------------
-- SymbolType
--------------------------------------------------------------------------------

type data SymbolType where
  Regular :: SymbolType
  Auxiliary :: SymbolType
  Virtual :: SymbolType

data SymbolTypeSing (symbolType :: SymbolType) where
  SRegular :: SymbolTypeSing Regular
  SAuxiliary :: SymbolTypeSing Auxiliary
  SVirtual :: SymbolTypeSing Virtual

deriving instance Eq (SymbolTypeSing symbolType)

deriving instance Show (SymbolTypeSing symbolType)

decSymbolTypeSing :: SymbolTypeSing symbolType1 -> SymbolTypeSing symbolType2 -> Maybe (symbolType1 :~: symbolType2)
decSymbolTypeSing SRegular SRegular = Just Refl
decSymbolTypeSing SAuxiliary SAuxiliary = Just Refl
decSymbolTypeSing SVirtual SVirtual = Just Refl
decSymbolTypeSing _ _ = Nothing

data IsReal (symbolType :: SymbolType) where
  RegularIsReal :: IsReal Regular
  AuxiliaryIsReal :: IsReal Auxiliary

deriving instance Eq (IsReal symbolType)

deriving instance Show (IsReal symbolType)

symbolTypeIsReal :: SymbolTypeSing symbolType -> Either (IsReal symbolType) (symbolType :~: Virtual)
symbolTypeIsReal = \case
  SRegular -> Left RegularIsReal
  SAuxiliary -> Left AuxiliaryIsReal
  SVirtual -> Right Refl

--------------------------------------------------------------------------------
-- Symbol
--------------------------------------------------------------------------------

type data Symbol (symbolType :: SymbolType) where
  SourceFileSymbol :: (symbolType ~ Regular) => Symbol symbolType
  ModuleDefinitionSymbol :: (symbolType ~ Regular) => Symbol symbolType
  ModuleBodySymbol :: (symbolType ~ Regular) => Symbol symbolType
  EnumItemSymbol :: (symbolType ~ Regular) => Symbol symbolType
  EnumDefinitionSymbol :: (symbolType ~ Regular) => Symbol symbolType
  EnumSignatureSymbol :: (symbolType ~ Regular) => Symbol symbolType
  EnumIdentifierSymbol :: (symbolType ~ Regular) => Symbol symbolType
  IdentifierSymbol :: (symbolType ~ Regular) => Symbol symbolType
  AbilityDeclsSymbol :: (symbolType ~ Regular) => Symbol symbolType
  AbilitySymbol :: (symbolType ~ Regular) => Symbol symbolType
  TypeParametersSymbol :: (symbolType ~ Regular) => Symbol symbolType
  TypeParameterSymbol :: (symbolType ~ Regular) => Symbol symbolType
  TypeParameterIdentifierSymbol :: (symbolType ~ Regular) => Symbol symbolType
  EnumVariantsSymbol :: (symbolType ~ Regular) => Symbol symbolType
  VariantSymbol :: (symbolType ~ Regular) => Symbol symbolType
  VariantIdentifierSymbol :: (symbolType ~ Regular) => Symbol symbolType
  DatatypeFieldsSymbol :: (symbolType ~ Regular) => Symbol symbolType
  NamedFieldsSymbol :: (symbolType ~ Regular) => Symbol symbolType
  FieldAnnotationSymbol :: (symbolType ~ Regular) => Symbol symbolType
  FieldIdentifierSymbol :: (symbolType ~ Regular) => Symbol symbolType
  TypeSymbol :: (symbolType ~ Regular) => Symbol symbolType
  ApplyTypeSymbol :: (symbolType ~ Regular) => Symbol symbolType
  ModuleAccessSymbol :: (symbolType ~ Regular) => Symbol symbolType
  ModuleIdentifierSymbol :: (symbolType ~ Regular) => Symbol symbolType
  ReservedIdentifierSymbol :: (symbolType ~ Regular) => Symbol symbolType
  ExistsSymbol :: (symbolType ~ Regular) => Symbol symbolType
  ForallSymbol :: (symbolType ~ Regular) => Symbol symbolType
  ModuleIdentitySymbol :: (symbolType ~ Regular) => Symbol symbolType
  NumLiteralSymbol :: (symbolType ~ Regular) => Symbol symbolType
  TypeArgumentsSymbol :: (symbolType ~ Regular) => Symbol symbolType
  FunctionTypeSymbol :: (symbolType ~ Regular) => Symbol symbolType
  FunctionTypeParametersSymbol :: (symbolType ~ Regular) => Symbol symbolType
  PrimitiveTypeSymbol :: (symbolType ~ Regular) => Symbol symbolType
  RefTypeSymbol :: (symbolType ~ Regular) => Symbol symbolType
  ReferenceSymbol :: (symbolType ~ Regular) => Symbol symbolType
  ImmRefSymbol :: (symbolType ~ Regular) => Symbol symbolType
  MutRefSymbol :: (symbolType ~ Regular) => Symbol symbolType
  TupleTypeSymbol :: (symbolType ~ Regular) => Symbol symbolType
  PositionalFieldsSymbol :: (symbolType ~ Regular) => Symbol symbolType
  PostfixAbilityDeclsSymbol :: (symbolType ~ Regular) => Symbol symbolType
  FunctionItemSymbol :: (symbolType ~ Regular) => Symbol symbolType
  FunctionDefinitionSymbol :: (symbolType ~ Regular) => Symbol symbolType
  FunctionSignatureSymbol :: (symbolType ~ Regular) => Symbol symbolType
  FunctionIdentifierSymbol :: (symbolType ~ Regular) => Symbol symbolType
  FunctionParametersSymbol :: (symbolType ~ Regular) => Symbol symbolType
  FunctionParameterSymbol :: (symbolType ~ Regular) => Symbol symbolType
  VariableIdentifierSymbol :: (symbolType ~ Regular) => Symbol symbolType
  MutFunctionParameterSymbol :: (symbolType ~ Regular) => Symbol symbolType
  ModifierSymbol :: (symbolType ~ Regular) => Symbol symbolType
  RetTypeSymbol :: (symbolType ~ Regular) => Symbol symbolType
  BlockSymbol :: (symbolType ~ Regular) => Symbol symbolType
  ExpressionSymbol :: (symbolType ~ Regular) => Symbol symbolType
  UnaryExpressionSymbol :: (symbolType ~ Regular) => Symbol symbolType
  ExpressionTermSymbol :: (symbolType ~ Regular) => Symbol symbolType
  LiteralValueSymbol :: (symbolType ~ Regular) => Symbol symbolType
  AddressLiteralSymbol :: (symbolType ~ Regular) => Symbol symbolType
  BoolLiteralSymbol :: (symbolType ~ Regular) => Symbol symbolType
  ByteStringLiteralSymbol :: (symbolType ~ Regular) => Symbol symbolType
  HexStringLiteralSymbol :: (symbolType ~ Regular) => Symbol symbolType
  AnnotationExpressionSymbol :: (symbolType ~ Regular) => Symbol symbolType
  BreakExpressionSymbol :: (symbolType ~ Regular) => Symbol symbolType
  LabelSymbol :: (symbolType ~ Regular) => Symbol symbolType
  CallExpressionSymbol :: (symbolType ~ Regular) => Symbol symbolType
  ArgListSymbol :: (symbolType ~ Regular) => Symbol symbolType
  NameExpressionSymbol :: (symbolType ~ Regular) => Symbol symbolType
  ContinueExpressionSymbol :: (symbolType ~ Regular) => Symbol symbolType
  DotExpressionSymbol :: (symbolType ~ Regular) => Symbol symbolType
  ExpressionListSymbol :: (symbolType ~ Regular) => Symbol symbolType
  IfExpressionSymbol :: (symbolType ~ Regular) => Symbol symbolType
  IndexExpressionSymbol :: (symbolType ~ Regular) => Symbol symbolType
  MacroCallExpressionSymbol :: (symbolType ~ Regular) => Symbol symbolType
  MacroModuleAccessSymbol :: (symbolType ~ Regular) => Symbol symbolType
  MatchExpressionSymbol :: (symbolType ~ Regular) => Symbol symbolType
  MatchBodySymbol :: (symbolType ~ Regular) => Symbol symbolType
  MatchArmSymbol :: (symbolType ~ Regular) => Symbol symbolType
  BindListSymbol :: (symbolType ~ Regular) => Symbol symbolType
  BindSymbol :: (symbolType ~ Regular) => Symbol symbolType
  AtBindSymbol :: (symbolType ~ Regular) => Symbol symbolType
  BindUnpackSymbol :: (symbolType ~ Regular) => Symbol symbolType
  BindFieldsSymbol :: (symbolType ~ Regular) => Symbol symbolType
  BindNamedFieldsSymbol :: (symbolType ~ Regular) => Symbol symbolType
  BindFieldSymbol :: (symbolType ~ Regular) => Symbol symbolType
  SpreadOperatorSymbol :: (symbolType ~ Regular) => Symbol symbolType
  MutBindFieldSymbol :: (symbolType ~ Regular) => Symbol symbolType
  BindPositionalFieldsSymbol :: (symbolType ~ Regular) => Symbol symbolType
  MutBindVarSymbol :: (symbolType ~ Regular) => Symbol symbolType
  CommaBindListSymbol :: (symbolType ~ Regular) => Symbol symbolType
  OrBindListSymbol :: (symbolType ~ Regular) => Symbol symbolType
  MatchConditionSymbol :: (symbolType ~ Regular) => Symbol symbolType
  PackExpressionSymbol :: (symbolType ~ Regular) => Symbol symbolType
  FieldInitializeListSymbol :: (symbolType ~ Regular) => Symbol symbolType
  ExpFieldSymbol :: (symbolType ~ Regular) => Symbol symbolType
  SpecBlockSymbol :: (symbolType ~ Regular) => Symbol symbolType
  IdentifierSymbol :: (symbolType ~ Regular) => Symbol symbolType
  SpecBlockTargetSchemaSymbol :: (symbolType ~ Regular) => Symbol symbolType
  StructIdentifierSymbol :: (symbolType ~ Regular) => Symbol symbolType
  SpecFunctionSymbol :: (symbolType ~ Regular) => Symbol symbolType
  NativeSpecFunctionSymbol :: (symbolType ~ Regular) => Symbol symbolType
  SpecFunctionSignatureSymbol :: (symbolType ~ Regular) => Symbol symbolType
  UninterpretedSpecFunctionSymbol :: (symbolType ~ Regular) => Symbol symbolType
  UsualSpecFunctionSymbol :: (symbolType ~ Regular) => Symbol symbolType
  SpecBodySymbol :: (symbolType ~ Regular) => Symbol symbolType
  SpecBlockMemeberSymbol :: (symbolType ~ Regular) => Symbol symbolType
  SpecApplySymbol :: (symbolType ~ Regular) => Symbol symbolType
  SpecApplyPatternSymbol :: (symbolType ~ Regular) => Symbol symbolType
  SpecApplyNamePatternSymbol :: (symbolType ~ Regular) => Symbol symbolType
  SpecConditionSymbol :: (symbolType ~ Regular) => Symbol symbolType
  SpecAbortIfSymbol :: (symbolType ~ Regular) => Symbol symbolType
  ConditionPropertiesSymbol :: (symbolType ~ Regular) => Symbol symbolType
  SpecPropertySymbol :: (symbolType ~ Regular) => Symbol symbolType
  SpecAbortWithOrModifiesSymbol :: (symbolType ~ Regular) => Symbol symbolType
  SpecConditionSymbol :: (symbolType ~ Regular) => Symbol symbolType
  SpecConditionKindSymbol :: (symbolType ~ Regular) => Symbol symbolType
  SpecIncludeSymbol :: (symbolType ~ Regular) => Symbol symbolType
  SpecInvariantSymbol :: (symbolType ~ Regular) => Symbol symbolType
  SpecLetSymbol :: (symbolType ~ Regular) => Symbol symbolType
  SpecPragmaSymbol :: (symbolType ~ Regular) => Symbol symbolType
  SpecVariableSymbol :: (symbolType ~ Regular) => Symbol symbolType
  UseDeclarationSymbol :: (symbolType ~ Regular) => Symbol symbolType
  UseFunSymbol :: (symbolType ~ Regular) => Symbol symbolType
  UseModuleSymbol :: (symbolType ~ Regular) => Symbol symbolType
  UseModuleMemberSymbol :: (symbolType ~ Regular) => Symbol symbolType
  UseMemberSymbol :: (symbolType ~ Regular) => Symbol symbolType
  UseModuleMembersSymbol :: (symbolType ~ Regular) => Symbol symbolType
  UnitExpressionSymbol :: (symbolType ~ Regular) => Symbol symbolType
  VectorExpressionSymbol :: (symbolType ~ Regular) => Symbol symbolType
  BorrowExpressionSymbol :: (symbolType ~ Regular) => Symbol symbolType
  DereferenceExpressionSymbol :: (symbolType ~ Regular) => Symbol symbolType
  MoveOrCopyExpressionSymbol :: (symbolType ~ Regular) => Symbol symbolType
  UnaryExpressionSymbol :: (symbolType ~ Regular) => Symbol symbolType
  UnaryOpSymbol :: (symbolType ~ Regular) => Symbol symbolType
  AbortExpressionSymbol :: (symbolType ~ Regular) => Symbol symbolType
  AssignExpressionSymbol :: (symbolType ~ Regular) => Symbol symbolType
  BinaryExpressionSymbol :: (symbolType ~ Regular) => Symbol symbolType
  CastExpressionSymbol :: (symbolType ~ Regular) => Symbol symbolType
  IdentifiedExpressionSymbol :: (symbolType ~ Regular) => Symbol symbolType
  BlockIdentifierSymbol :: (symbolType ~ Regular) => Symbol symbolType
  LambdaExpressionSymbol :: (symbolType ~ Regular) => Symbol symbolType
  LambdaBindingsSymbol :: (symbolType ~ Regular) => Symbol symbolType
  LambdaBindingSymbol :: (symbolType ~ Regular) => Symbol symbolType
  LoopExpressionSymbol :: (symbolType ~ Regular) => Symbol symbolType
  QuantifierExpressionSymbol :: (symbolType ~ Regular) => Symbol symbolType
  QuantifierBindingsSymbol :: (symbolType ~ Regular) => Symbol symbolType
  QuantifierBindingSymbol :: (symbolType ~ Regular) => Symbol symbolType
  ReturnExpressionSymbol :: (symbolType ~ Regular) => Symbol symbolType
  WhileExpressionSymbol :: (symbolType ~ Regular) => Symbol symbolType
  BlockItemSymbol :: (symbolType ~ Regular) => Symbol symbolType
  LetStatementSymbol :: (symbolType ~ Regular) => Symbol symbolType
  MacroFunctionDefinitionSymbol :: (symbolType ~ Regular) => Symbol symbolType
  MacroSignatureSymbol :: (symbolType ~ Regular) => Symbol symbolType
  NativeFunctionDefinitionSymbol :: (symbolType ~ Regular) => Symbol symbolType
  StructItemSymbol :: (symbolType ~ Regular) => Symbol symbolType
  NativeStructDefinitionSymbol :: (symbolType ~ Regular) => Symbol symbolType
  StructSignatureSymbol :: (symbolType ~ Regular) => Symbol symbolType
  StructDefinitionSymbol :: (symbolType ~ Regular) => Symbol symbolType
  ConstantSymbol :: (symbolType ~ Regular) => Symbol symbolType
  FriendDeclarationSymbol :: (symbolType ~ Regular) => Symbol symbolType
  FriendAccessSymbol :: (symbolType ~ Regular) => Symbol symbolType
  ErrorSymbol :: (symbolType ~ Auxiliary) => Symbol symbolType
  MissingSymbol :: (symbolType ~ Auxiliary) => Symbol symbolType
  SortMismatchSymbol :: (symbolType ~ Virtual) => Symbol symbolType

data SymbolSing (symbolType :: SymbolType) (symbol :: Symbol symbolType) where
  SSourceFileSymbol :: SymbolSing Regular SourceFileSymbol
  SModuleDefinitionSymbol :: SymbolSing Regular ModuleDefinitionSymbol
  SModuleBodySymbol :: SymbolSing Regular ModuleBodySymbol
  SEnumItemSymbol :: SymbolSing Regular EnumItemSymbol
  SEnumDefinitionSymbol :: SymbolSing Regular EnumDefinitionSymbol
  SEnumSignatureSymbol :: SymbolSing Regular EnumSignatureSymbol
  SEnumIdentifierSymbol :: SymbolSing Regular EnumIdentifierSymbol
  SIdentifierSymbol :: SymbolSing Regular IdentifierSymbol
  SAbilityDeclsSymbol :: SymbolSing Regular AbilityDeclsSymbol
  SAbilitySymbol :: SymbolSing Regular AbilitySymbol
  STypeParametersSymbol :: SymbolSing Regular TypeParametersSymbol
  STypeParameterSymbol :: SymbolSing Regular TypeParameterSymbol
  STypeParameterIdentifierSymbol :: SymbolSing Regular TypeParameterIdentifierSymbol
  SEnumVariantsSymbol :: SymbolSing Regular EnumVariantsSymbol
  SVariantSymbol :: SymbolSing Regular VariantSymbol
  SVariantIdentifierSymbol :: SymbolSing Regular VariantIdentifierSymbol
  SDatatypeFieldsSymbol :: SymbolSing Regular DatatypeFieldsSymbol
  SNamedFieldsSymbol :: SymbolSing Regular NamedFieldsSymbol
  SFieldAnnotationSymbol :: SymbolSing Regular FieldAnnotationSymbol
  SFieldIdentifierSymbol :: SymbolSing Regular FieldIdentifierSymbol
  STypeSymbol :: SymbolSing Regular TypeSymbol
  SApplyTypeSymbol :: SymbolSing Regular ApplyTypeSymbol
  SModuleAccessSymbol :: SymbolSing Regular ModuleAccessSymbol
  SModuleIdentifierSymbol :: SymbolSing Regular ModuleIdentifierSymbol
  SReservedIdentifierSymbol :: SymbolSing Regular ReservedIdentifierSymbol
  SExistsSymbol :: SymbolSing Regular ExistsSymbol
  SForallSymbol :: SymbolSing Regular ForallSymbol
  SModuleIdentitySymbol :: SymbolSing Regular ModuleIdentitySymbol
  SNumLiteralSymbol :: SymbolSing Regular NumLiteralSymbol
  STypeArgumentsSymbol :: SymbolSing Regular TypeArgumentsSymbol
  SFunctionTypeSymbol :: SymbolSing Regular FunctionTypeSymbol
  SFunctionTypeParametersSymbol :: SymbolSing Regular FunctionTypeParametersSymbol
  SPrimitiveTypeSymbol :: SymbolSing Regular PrimitiveTypeSymbol
  SRefTypeSymbol :: SymbolSing Regular RefTypeSymbol
  SReferenceSymbol :: SymbolSing Regular ReferenceSymbol
  SImmRefSymbol :: SymbolSing Regular ImmRefSymbol
  SMutRefSymbol :: SymbolSing Regular MutRefSymbol
  STupleTypeSymbol :: SymbolSing Regular TupleTypeSymbol
  SPositionalFieldsSymbol :: SymbolSing Regular PositionalFieldsSymbol
  SPostfixAbilityDeclsSymbol :: SymbolSing Regular PostfixAbilityDeclsSymbol
  SFunctionItemSymbol :: SymbolSing Regular FunctionItemSymbol
  SFunctionDefinitionSymbol :: SymbolSing Regular FunctionDefinitionSymbol
  SFunctionSignatureSymbol :: SymbolSing Regular FunctionSignatureSymbol
  SFunctionIdentifierSymbol :: SymbolSing Regular FunctionIdentifierSymbol
  SFunctionParametersSymbol :: SymbolSing Regular FunctionParametersSymbol
  SFunctionParameterSymbol :: SymbolSing Regular FunctionParameterSymbol
  SVariableIdentifierSymbol :: SymbolSing Regular VariableIdentifierSymbol
  SMutFunctionParameterSymbol :: SymbolSing Regular MutFunctionParameterSymbol
  SModifierSymbol :: SymbolSing Regular ModifierSymbol
  SRetTypeSymbol :: SymbolSing Regular RetTypeSymbol
  SBlockSymbol :: SymbolSing Regular BlockSymbol
  SExpressionSymbol :: SymbolSing Regular ExpressionSymbol
  SUnaryExpressionSymbol :: SymbolSing Regular UnaryExpressionSymbol
  SExpressionTermSymbol :: SymbolSing Regular ExpressionTermSymbol
  SLiteralValueSymbol :: SymbolSing Regular LiteralValueSymbol
  SAddressLiteralSymbol :: SymbolSing Regular AddressLiteralSymbol
  SBoolLiteralSymbol :: SymbolSing Regular BoolLiteralSymbol
  SByteStringLiteralSymbol :: SymbolSing Regular ByteStringLiteralSymbol
  SHexStringLiteralSymbol :: SymbolSing Regular HexStringLiteralSymbol
  SAnnotationExpressionSymbol :: SymbolSing Regular AnnotationExpressionSymbol
  SBreakExpressionSymbol :: SymbolSing Regular BreakExpressionSymbol
  SLabelSymbol :: SymbolSing Regular LabelSymbol
  SCallExpressionSymbol :: SymbolSing Regular CallExpressionSymbol
  SArgListSymbol :: SymbolSing Regular ArgListSymbol
  SNameExpressionSymbol :: SymbolSing Regular NameExpressionSymbol
  SContinueExpressionSymbol :: SymbolSing Regular ContinueExpressionSymbol
  SDotExpressionSymbol :: SymbolSing Regular DotExpressionSymbol
  SExpressionListSymbol :: SymbolSing Regular ExpressionListSymbol
  SIfExpressionSymbol :: SymbolSing Regular IfExpressionSymbol
  SIndexExpressionSymbol :: SymbolSing Regular IndexExpressionSymbol
  SMacroCallExpressionSymbol :: SymbolSing Regular MacroCallExpressionSymbol
  SMacroModuleAccessSymbol :: SymbolSing Regular MacroModuleAccessSymbol
  SMatchExpressionSymbol :: SymbolSing Regular MatchExpressionSymbol
  SMatchBodySymbol :: SymbolSing Regular MatchBodySymbol
  SMatchArmSymbol :: SymbolSing Regular MatchArmSymbol
  SBindListSymbol :: SymbolSing Regular BindListSymbol
  SBindSymbol :: SymbolSing Regular BindSymbol
  SAtBindSymbol :: SymbolSing Regular AtBindSymbol
  SBindUnpackSymbol :: SymbolSing Regular BindUnpackSymbol
  SBindFieldsSymbol :: SymbolSing Regular BindFieldsSymbol
  SBindNamedFieldsSymbol :: SymbolSing Regular BindNamedFieldsSymbol
  SBindFieldSymbol :: SymbolSing Regular BindFieldSymbol
  SSpreadOperatorSymbol :: SymbolSing Regular SpreadOperatorSymbol
  SMutBindFieldSymbol :: SymbolSing Regular MutBindFieldSymbol
  SBindPositionalFieldsSymbol :: SymbolSing Regular BindPositionalFieldsSymbol
  SMutBindVarSymbol :: SymbolSing Regular MutBindVarSymbol
  SCommaBindListSymbol :: SymbolSing Regular CommaBindListSymbol
  SOrBindListSymbol :: SymbolSing Regular OrBindListSymbol
  SMatchConditionSymbol :: SymbolSing Regular MatchConditionSymbol
  SPackExpressionSymbol :: SymbolSing Regular PackExpressionSymbol
  SFieldInitializeListSymbol :: SymbolSing Regular FieldInitializeListSymbol
  SExpFieldSymbol :: SymbolSing Regular ExpFieldSymbol
  SSpecBlockSymbol :: SymbolSing Regular SpecBlockSymbol
  SIdentifierSymbol :: SymbolSing Regular IdentifierSymbol
  SSpecBlockTargetSchemaSymbol :: SymbolSing Regular SpecBlockTargetSchemaSymbol
  SStructIdentifierSymbol :: SymbolSing Regular StructIdentifierSymbol
  SSpecFunctionSymbol :: SymbolSing Regular SpecFunctionSymbol
  SNativeSpecFunctionSymbol :: SymbolSing Regular NativeSpecFunctionSymbol
  SSpecFunctionSignatureSymbol :: SymbolSing Regular SpecFunctionSignatureSymbol
  SUninterpretedSpecFunctionSymbol :: SymbolSing Regular UninterpretedSpecFunctionSymbol
  SUsualSpecFunctionSymbol :: SymbolSing Regular UsualSpecFunctionSymbol
  SSpecBodySymbol :: SymbolSing Regular SpecBodySymbol
  SSpecBlockMemeberSymbol :: SymbolSing Regular SpecBlockMemeberSymbol
  SSpecApplySymbol :: SymbolSing Regular SpecApplySymbol
  SSpecApplyPatternSymbol :: SymbolSing Regular SpecApplyPatternSymbol
  SSpecApplyNamePatternSymbol :: SymbolSing Regular SpecApplyNamePatternSymbol
  SSpecConditionSymbol :: SymbolSing Regular SpecConditionSymbol
  SSpecAbortIfSymbol :: SymbolSing Regular SpecAbortIfSymbol
  SConditionPropertiesSymbol :: SymbolSing Regular ConditionPropertiesSymbol
  SSpecPropertySymbol :: SymbolSing Regular SpecPropertySymbol
  SSpecAbortWithOrModifiesSymbol :: SymbolSing Regular SpecAbortWithOrModifiesSymbol
  SSpecConditionSymbol :: SymbolSing Regular SpecConditionSymbol
  SSpecConditionKindSymbol :: SymbolSing Regular SpecConditionKindSymbol
  SSpecIncludeSymbol :: SymbolSing Regular SpecIncludeSymbol
  SSpecInvariantSymbol :: SymbolSing Regular SpecInvariantSymbol
  SSpecLetSymbol :: SymbolSing Regular SpecLetSymbol
  SSpecPragmaSymbol :: SymbolSing Regular SpecPragmaSymbol
  SSpecVariableSymbol :: SymbolSing Regular SpecVariableSymbol
  SUseDeclarationSymbol :: SymbolSing Regular UseDeclarationSymbol
  SUseFunSymbol :: SymbolSing Regular UseFunSymbol
  SUseModuleSymbol :: SymbolSing Regular UseModuleSymbol
  SUseModuleMemberSymbol :: SymbolSing Regular UseModuleMemberSymbol
  SUseMemberSymbol :: SymbolSing Regular UseMemberSymbol
  SUseModuleMembersSymbol :: SymbolSing Regular UseModuleMembersSymbol
  SUnitExpressionSymbol :: SymbolSing Regular UnitExpressionSymbol
  SVectorExpressionSymbol :: SymbolSing Regular VectorExpressionSymbol
  SBorrowExpressionSymbol :: SymbolSing Regular BorrowExpressionSymbol
  SDereferenceExpressionSymbol :: SymbolSing Regular DereferenceExpressionSymbol
  SMoveOrCopyExpressionSymbol :: SymbolSing Regular MoveOrCopyExpressionSymbol
  SUnaryExpressionSymbol :: SymbolSing Regular UnaryExpressionSymbol
  SUnaryOpSymbol :: SymbolSing Regular UnaryOpSymbol
  SAbortExpressionSymbol :: SymbolSing Regular AbortExpressionSymbol
  SAssignExpressionSymbol :: SymbolSing Regular AssignExpressionSymbol
  SBinaryExpressionSymbol :: SymbolSing Regular BinaryExpressionSymbol
  SCastExpressionSymbol :: SymbolSing Regular CastExpressionSymbol
  SIdentifiedExpressionSymbol :: SymbolSing Regular IdentifiedExpressionSymbol
  SBlockIdentifierSymbol :: SymbolSing Regular BlockIdentifierSymbol
  SLambdaExpressionSymbol :: SymbolSing Regular LambdaExpressionSymbol
  SLambdaBindingsSymbol :: SymbolSing Regular LambdaBindingsSymbol
  SLambdaBindingSymbol :: SymbolSing Regular LambdaBindingSymbol
  SLoopExpressionSymbol :: SymbolSing Regular LoopExpressionSymbol
  SQuantifierExpressionSymbol :: SymbolSing Regular QuantifierExpressionSymbol
  SQuantifierBindingsSymbol :: SymbolSing Regular QuantifierBindingsSymbol
  SQuantifierBindingSymbol :: SymbolSing Regular QuantifierBindingSymbol
  SReturnExpressionSymbol :: SymbolSing Regular ReturnExpressionSymbol
  SWhileExpressionSymbol :: SymbolSing Regular WhileExpressionSymbol
  SBlockItemSymbol :: SymbolSing Regular BlockItemSymbol
  SLetStatementSymbol :: SymbolSing Regular LetStatementSymbol
  SMacroFunctionDefinitionSymbol :: SymbolSing Regular MacroFunctionDefinitionSymbol
  SMacroSignatureSymbol :: SymbolSing Regular MacroSignatureSymbol
  SNativeFunctionDefinitionSymbol :: SymbolSing Regular NativeFunctionDefinitionSymbol
  SStructItemSymbol :: SymbolSing Regular StructItemSymbol
  SNativeStructDefinitionSymbol :: SymbolSing Regular NativeStructDefinitionSymbol
  SStructSignatureSymbol :: SymbolSing Regular StructSignatureSymbol
  SStructDefinitionSymbol :: SymbolSing Regular StructDefinitionSymbol
  SConstantSymbol :: SymbolSing Regular ConstantSymbol
  SFriendDeclarationSymbol :: SymbolSing Regular FriendDeclarationSymbol
  SFriendAccessSymbol :: SymbolSing Regular FriendAccessSymbol
  SErrorSymbol :: SymbolSing Auxiliary ErrorSymbol
  SMissingSymbol :: SymbolSing Auxiliary MissingSymbol
  SSortMismatchSymbol :: SymbolSing Virtual SortMismatchSymbol

deriving instance Eq (SymbolSing sort symbol)

deriving instance Show (SymbolSing sort symbol)

decSymbolSing :: SymbolSing symbolType1 symbol1 -> SymbolSing symbolType2 symbol2 -> Maybe (symbolType1 :~: symbolType2, symbol1 :~~: symbol2)
decSymbolSing SSourceFileSymbol SSourceFileSymbol = Just (Refl, HRefl)
decSymbolSing SModuleDefinitionSymbol SModuleDefinitionSymbol = Just (Refl, HRefl)
decSymbolSing SModuleBodySymbol SModuleBodySymbol = Just (Refl, HRefl)
decSymbolSing SEnumItemSymbol SEnumItemSymbol = Just (Refl, HRefl)
decSymbolSing SEnumDefinitionSymbol SEnumDefinitionSymbol = Just (Refl, HRefl)
decSymbolSing SEnumSignatureSymbol SEnumSignatureSymbol = Just (Refl, HRefl)
decSymbolSing SEnumIdentifierSymbol SEnumIdentifierSymbol = Just (Refl, HRefl)
decSymbolSing SIdentifierSymbol SIdentifierSymbol = Just (Refl, HRefl)
decSymbolSing SAbilityDeclsSymbol SAbilityDeclsSymbol = Just (Refl, HRefl)
decSymbolSing SAbilitySymbol SAbilitySymbol = Just (Refl, HRefl)
decSymbolSing STypeParametersSymbol STypeParametersSymbol = Just (Refl, HRefl)
decSymbolSing STypeParameterSymbol STypeParameterSymbol = Just (Refl, HRefl)
decSymbolSing STypeParameterIdentifierSymbol STypeParameterIdentifierSymbol = Just (Refl, HRefl)
decSymbolSing SEnumVariantsSymbol SEnumVariantsSymbol = Just (Refl, HRefl)
decSymbolSing SVariantSymbol SVariantSymbol = Just (Refl, HRefl)
decSymbolSing SVariantIdentifierSymbol SVariantIdentifierSymbol = Just (Refl, HRefl)
decSymbolSing SDatatypeFieldsSymbol SDatatypeFieldsSymbol = Just (Refl, HRefl)
decSymbolSing SNamedFieldsSymbol SNamedFieldsSymbol = Just (Refl, HRefl)
decSymbolSing SFieldAnnotationSymbol SFieldAnnotationSymbol = Just (Refl, HRefl)
decSymbolSing SFieldIdentifierSymbol SFieldIdentifierSymbol = Just (Refl, HRefl)
decSymbolSing STypeSymbol STypeSymbol = Just (Refl, HRefl)
decSymbolSing SApplyTypeSymbol SApplyTypeSymbol = Just (Refl, HRefl)
decSymbolSing SModuleAccessSymbol SModuleAccessSymbol = Just (Refl, HRefl)
decSymbolSing SModuleIdentifierSymbol SModuleIdentifierSymbol = Just (Refl, HRefl)
decSymbolSing SReservedIdentifierSymbol SReservedIdentifierSymbol = Just (Refl, HRefl)
decSymbolSing SExistsSymbol SExistsSymbol = Just (Refl, HRefl)
decSymbolSing SForallSymbol SForallSymbol = Just (Refl, HRefl)
decSymbolSing SModuleIdentitySymbol SModuleIdentitySymbol = Just (Refl, HRefl)
decSymbolSing SNumLiteralSymbol SNumLiteralSymbol = Just (Refl, HRefl)
decSymbolSing STypeArgumentsSymbol STypeArgumentsSymbol = Just (Refl, HRefl)
decSymbolSing SFunctionTypeSymbol SFunctionTypeSymbol = Just (Refl, HRefl)
decSymbolSing SFunctionTypeParametersSymbol SFunctionTypeParametersSymbol = Just (Refl, HRefl)
decSymbolSing SPrimitiveTypeSymbol SPrimitiveTypeSymbol = Just (Refl, HRefl)
decSymbolSing SRefTypeSymbol SRefTypeSymbol = Just (Refl, HRefl)
decSymbolSing SReferenceSymbol SReferenceSymbol = Just (Refl, HRefl)
decSymbolSing SImmRefSymbol SImmRefSymbol = Just (Refl, HRefl)
decSymbolSing SMutRefSymbol SMutRefSymbol = Just (Refl, HRefl)
decSymbolSing STupleTypeSymbol STupleTypeSymbol = Just (Refl, HRefl)
decSymbolSing SPositionalFieldsSymbol SPositionalFieldsSymbol = Just (Refl, HRefl)
decSymbolSing SPostfixAbilityDeclsSymbol SPostfixAbilityDeclsSymbol = Just (Refl, HRefl)
decSymbolSing SFunctionItemSymbol SFunctionItemSymbol = Just (Refl, HRefl)
decSymbolSing SFunctionDefinitionSymbol SFunctionDefinitionSymbol = Just (Refl, HRefl)
decSymbolSing SFunctionSignatureSymbol SFunctionSignatureSymbol = Just (Refl, HRefl)
decSymbolSing SFunctionIdentifierSymbol SFunctionIdentifierSymbol = Just (Refl, HRefl)
decSymbolSing SFunctionParametersSymbol SFunctionParametersSymbol = Just (Refl, HRefl)
decSymbolSing SFunctionParameterSymbol SFunctionParameterSymbol = Just (Refl, HRefl)
decSymbolSing SVariableIdentifierSymbol SVariableIdentifierSymbol = Just (Refl, HRefl)
decSymbolSing SMutFunctionParameterSymbol SMutFunctionParameterSymbol = Just (Refl, HRefl)
decSymbolSing SModifierSymbol SModifierSymbol = Just (Refl, HRefl)
decSymbolSing SRetTypeSymbol SRetTypeSymbol = Just (Refl, HRefl)
decSymbolSing SBlockSymbol SBlockSymbol = Just (Refl, HRefl)
decSymbolSing SExpressionSymbol SExpressionSymbol = Just (Refl, HRefl)
decSymbolSing SUnaryExpressionSymbol SUnaryExpressionSymbol = Just (Refl, HRefl)
decSymbolSing SExpressionTermSymbol SExpressionTermSymbol = Just (Refl, HRefl)
decSymbolSing SLiteralValueSymbol SLiteralValueSymbol = Just (Refl, HRefl)
decSymbolSing SAddressLiteralSymbol SAddressLiteralSymbol = Just (Refl, HRefl)
decSymbolSing SBoolLiteralSymbol SBoolLiteralSymbol = Just (Refl, HRefl)
decSymbolSing SByteStringLiteralSymbol SByteStringLiteralSymbol = Just (Refl, HRefl)
decSymbolSing SHexStringLiteralSymbol SHexStringLiteralSymbol = Just (Refl, HRefl)
decSymbolSing SAnnotationExpressionSymbol SAnnotationExpressionSymbol = Just (Refl, HRefl)
decSymbolSing SBreakExpressionSymbol SBreakExpressionSymbol = Just (Refl, HRefl)
decSymbolSing SLabelSymbol SLabelSymbol = Just (Refl, HRefl)
decSymbolSing SCallExpressionSymbol SCallExpressionSymbol = Just (Refl, HRefl)
decSymbolSing SArgListSymbol SArgListSymbol = Just (Refl, HRefl)
decSymbolSing SNameExpressionSymbol SNameExpressionSymbol = Just (Refl, HRefl)
decSymbolSing SContinueExpressionSymbol SContinueExpressionSymbol = Just (Refl, HRefl)
decSymbolSing SDotExpressionSymbol SDotExpressionSymbol = Just (Refl, HRefl)
decSymbolSing SExpressionListSymbol SExpressionListSymbol = Just (Refl, HRefl)
decSymbolSing SIfExpressionSymbol SIfExpressionSymbol = Just (Refl, HRefl)
decSymbolSing SIndexExpressionSymbol SIndexExpressionSymbol = Just (Refl, HRefl)
decSymbolSing SMacroCallExpressionSymbol SMacroCallExpressionSymbol = Just (Refl, HRefl)
decSymbolSing SMacroModuleAccessSymbol SMacroModuleAccessSymbol = Just (Refl, HRefl)
decSymbolSing SMatchExpressionSymbol SMatchExpressionSymbol = Just (Refl, HRefl)
decSymbolSing SMatchBodySymbol SMatchBodySymbol = Just (Refl, HRefl)
decSymbolSing SMatchArmSymbol SMatchArmSymbol = Just (Refl, HRefl)
decSymbolSing SBindListSymbol SBindListSymbol = Just (Refl, HRefl)
decSymbolSing SBindSymbol SBindSymbol = Just (Refl, HRefl)
decSymbolSing SAtBindSymbol SAtBindSymbol = Just (Refl, HRefl)
decSymbolSing SBindUnpackSymbol SBindUnpackSymbol = Just (Refl, HRefl)
decSymbolSing SBindFieldsSymbol SBindFieldsSymbol = Just (Refl, HRefl)
decSymbolSing SBindNamedFieldsSymbol SBindNamedFieldsSymbol = Just (Refl, HRefl)
decSymbolSing SBindFieldSymbol SBindFieldSymbol = Just (Refl, HRefl)
decSymbolSing SSpreadOperatorSymbol SSpreadOperatorSymbol = Just (Refl, HRefl)
decSymbolSing SMutBindFieldSymbol SMutBindFieldSymbol = Just (Refl, HRefl)
decSymbolSing SBindPositionalFieldsSymbol SBindPositionalFieldsSymbol = Just (Refl, HRefl)
decSymbolSing SMutBindVarSymbol SMutBindVarSymbol = Just (Refl, HRefl)
decSymbolSing SCommaBindListSymbol SCommaBindListSymbol = Just (Refl, HRefl)
decSymbolSing SOrBindListSymbol SOrBindListSymbol = Just (Refl, HRefl)
decSymbolSing SMatchConditionSymbol SMatchConditionSymbol = Just (Refl, HRefl)
decSymbolSing SPackExpressionSymbol SPackExpressionSymbol = Just (Refl, HRefl)
decSymbolSing SFieldInitializeListSymbol SFieldInitializeListSymbol = Just (Refl, HRefl)
decSymbolSing SExpFieldSymbol SExpFieldSymbol = Just (Refl, HRefl)
decSymbolSing SSpecBlockSymbol SSpecBlockSymbol = Just (Refl, HRefl)
decSymbolSing SIdentifierSymbol SIdentifierSymbol = Just (Refl, HRefl)
decSymbolSing SSpecBlockTargetSchemaSymbol SSpecBlockTargetSchemaSymbol = Just (Refl, HRefl)
decSymbolSing SStructIdentifierSymbol SStructIdentifierSymbol = Just (Refl, HRefl)
decSymbolSing SSpecFunctionSymbol SSpecFunctionSymbol = Just (Refl, HRefl)
decSymbolSing SNativeSpecFunctionSymbol SNativeSpecFunctionSymbol = Just (Refl, HRefl)
decSymbolSing SSpecFunctionSignatureSymbol SSpecFunctionSignatureSymbol = Just (Refl, HRefl)
decSymbolSing SUninterpretedSpecFunctionSymbol SUninterpretedSpecFunctionSymbol = Just (Refl, HRefl)
decSymbolSing SUsualSpecFunctionSymbol SUsualSpecFunctionSymbol = Just (Refl, HRefl)
decSymbolSing SSpecBodySymbol SSpecBodySymbol = Just (Refl, HRefl)
decSymbolSing SSpecBlockMemeberSymbol SSpecBlockMemeberSymbol = Just (Refl, HRefl)
decSymbolSing SSpecApplySymbol SSpecApplySymbol = Just (Refl, HRefl)
decSymbolSing SSpecApplyPatternSymbol SSpecApplyPatternSymbol = Just (Refl, HRefl)
decSymbolSing SSpecApplyNamePatternSymbol SSpecApplyNamePatternSymbol = Just (Refl, HRefl)
decSymbolSing SSpecConditionSymbol SSpecConditionSymbol = Just (Refl, HRefl)
decSymbolSing SSpecAbortIfSymbol SSpecAbortIfSymbol = Just (Refl, HRefl)
decSymbolSing SConditionPropertiesSymbol SConditionPropertiesSymbol = Just (Refl, HRefl)
decSymbolSing SSpecPropertySymbol SSpecPropertySymbol = Just (Refl, HRefl)
decSymbolSing SSpecAbortWithOrModifiesSymbol SSpecAbortWithOrModifiesSymbol = Just (Refl, HRefl)
decSymbolSing SSpecConditionSymbol SSpecConditionSymbol = Just (Refl, HRefl)
decSymbolSing SSpecConditionKindSymbol SSpecConditionKindSymbol = Just (Refl, HRefl)
decSymbolSing SSpecIncludeSymbol SSpecIncludeSymbol = Just (Refl, HRefl)
decSymbolSing SSpecInvariantSymbol SSpecInvariantSymbol = Just (Refl, HRefl)
decSymbolSing SSpecLetSymbol SSpecLetSymbol = Just (Refl, HRefl)
decSymbolSing SSpecPragmaSymbol SSpecPragmaSymbol = Just (Refl, HRefl)
decSymbolSing SSpecVariableSymbol SSpecVariableSymbol = Just (Refl, HRefl)
decSymbolSing SUseDeclarationSymbol SUseDeclarationSymbol = Just (Refl, HRefl)
decSymbolSing SUseFunSymbol SUseFunSymbol = Just (Refl, HRefl)
decSymbolSing SUseModuleSymbol SUseModuleSymbol = Just (Refl, HRefl)
decSymbolSing SUseModuleMemberSymbol SUseModuleMemberSymbol = Just (Refl, HRefl)
decSymbolSing SUseMemberSymbol SUseMemberSymbol = Just (Refl, HRefl)
decSymbolSing SUseModuleMembersSymbol SUseModuleMembersSymbol = Just (Refl, HRefl)
decSymbolSing SUnitExpressionSymbol SUnitExpressionSymbol = Just (Refl, HRefl)
decSymbolSing SVectorExpressionSymbol SVectorExpressionSymbol = Just (Refl, HRefl)
decSymbolSing SBorrowExpressionSymbol SBorrowExpressionSymbol = Just (Refl, HRefl)
decSymbolSing SDereferenceExpressionSymbol SDereferenceExpressionSymbol = Just (Refl, HRefl)
decSymbolSing SMoveOrCopyExpressionSymbol SMoveOrCopyExpressionSymbol = Just (Refl, HRefl)
decSymbolSing SUnaryExpressionSymbol SUnaryExpressionSymbol = Just (Refl, HRefl)
decSymbolSing SUnaryOpSymbol SUnaryOpSymbol = Just (Refl, HRefl)
decSymbolSing SAbortExpressionSymbol SAbortExpressionSymbol = Just (Refl, HRefl)
decSymbolSing SAssignExpressionSymbol SAssignExpressionSymbol = Just (Refl, HRefl)
decSymbolSing SBinaryExpressionSymbol SBinaryExpressionSymbol = Just (Refl, HRefl)
decSymbolSing SCastExpressionSymbol SCastExpressionSymbol = Just (Refl, HRefl)
decSymbolSing SIdentifiedExpressionSymbol SIdentifiedExpressionSymbol = Just (Refl, HRefl)
decSymbolSing SBlockIdentifierSymbol SBlockIdentifierSymbol = Just (Refl, HRefl)
decSymbolSing SLambdaExpressionSymbol SLambdaExpressionSymbol = Just (Refl, HRefl)
decSymbolSing SLambdaBindingsSymbol SLambdaBindingsSymbol = Just (Refl, HRefl)
decSymbolSing SLambdaBindingSymbol SLambdaBindingSymbol = Just (Refl, HRefl)
decSymbolSing SLoopExpressionSymbol SLoopExpressionSymbol = Just (Refl, HRefl)
decSymbolSing SQuantifierExpressionSymbol SQuantifierExpressionSymbol = Just (Refl, HRefl)
decSymbolSing SQuantifierBindingsSymbol SQuantifierBindingsSymbol = Just (Refl, HRefl)
decSymbolSing SQuantifierBindingSymbol SQuantifierBindingSymbol = Just (Refl, HRefl)
decSymbolSing SReturnExpressionSymbol SReturnExpressionSymbol = Just (Refl, HRefl)
decSymbolSing SWhileExpressionSymbol SWhileExpressionSymbol = Just (Refl, HRefl)
decSymbolSing SBlockItemSymbol SBlockItemSymbol = Just (Refl, HRefl)
decSymbolSing SLetStatementSymbol SLetStatementSymbol = Just (Refl, HRefl)
decSymbolSing SMacroFunctionDefinitionSymbol SMacroFunctionDefinitionSymbol = Just (Refl, HRefl)
decSymbolSing SMacroSignatureSymbol SMacroSignatureSymbol = Just (Refl, HRefl)
decSymbolSing SNativeFunctionDefinitionSymbol SNativeFunctionDefinitionSymbol = Just (Refl, HRefl)
decSymbolSing SStructItemSymbol SStructItemSymbol = Just (Refl, HRefl)
decSymbolSing SNativeStructDefinitionSymbol SNativeStructDefinitionSymbol = Just (Refl, HRefl)
decSymbolSing SStructSignatureSymbol SStructSignatureSymbol = Just (Refl, HRefl)
decSymbolSing SStructDefinitionSymbol SStructDefinitionSymbol = Just (Refl, HRefl)
decSymbolSing SConstantSymbol SConstantSymbol = Just (Refl, HRefl)
decSymbolSing SFriendDeclarationSymbol SFriendDeclarationSymbol = Just (Refl, HRefl)
decSymbolSing SFriendAccessSymbol SFriendAccessSymbol = Just (Refl, HRefl)
decSymbolSing SErrorSymbol SErrorSymbol = Just (Refl, HRefl)
decSymbolSing SMissingSymbol SMissingSymbol = Just (Refl, HRefl)
decSymbolSing SSortMismatchSymbol SSortMismatchSymbol = Just (Refl, HRefl)
decSymbolSing _ _ = Nothing

data SomeSymbolSing
  = forall (symbolType :: SymbolType) (symbol :: Symbol symbolType).
    SomeSymbolSing !(IsReal symbolType) !(SymbolSing symbolType symbol)

instance Eq SomeSymbolSing where
  (==) :: SomeSymbolSing -> SomeSymbolSing -> Bool
  SomeSymbolSing _isReal1 symbolSing1 == SomeSymbolSing _isReal2 symbolSing2 =
    isJust (decSymbolSing symbolSing1 symbolSing2)

deriving instance Show SomeSymbolSing

pattern SomeRegularSymbolSing :: () => (symbolType ~ Regular) => SymbolSing symbolType symbol -> SomeSymbolSing
pattern SomeRegularSymbolSing symbolSing = SomeSymbolSing RegularIsReal symbolSing

pattern SomeAuxiliarySymbolSing :: () => (symbolType ~ Auxiliary) => SymbolSing symbolType symbol -> SomeSymbolSing
pattern SomeAuxiliarySymbolSing symbolSing = SomeSymbolSing AuxiliaryIsReal symbolSing

--------------------------------------------------------------------------------
-- Getting the symbol types for symbols
--------------------------------------------------------------------------------

symbolToSymbolType :: SymbolSing symbolType symbol -> SymbolTypeSing symbolType
symbolToSymbolType = \case
  SSourceFileSymbol -> SRegular
  SModuleDefinitionSymbol -> SRegular
  SModuleBodySymbol -> SRegular
  SEnumItemSymbol -> SRegular
  SEnumDefinitionSymbol -> SRegular
  SEnumSignatureSymbol -> SRegular
  SEnumIdentifierSymbol -> SRegular
  SIdentifierSymbol -> SRegular
  SAbilityDeclsSymbol -> SRegular
  SAbilitySymbol -> SRegular
  STypeParametersSymbol -> SRegular
  STypeParameterSymbol -> SRegular
  STypeParameterIdentifierSymbol -> SRegular
  SEnumVariantsSymbol -> SRegular
  SVariantSymbol -> SRegular
  SVariantIdentifierSymbol -> SRegular
  SDatatypeFieldsSymbol -> SRegular
  SNamedFieldsSymbol -> SRegular
  SFieldAnnotationSymbol -> SRegular
  SFieldIdentifierSymbol -> SRegular
  STypeSymbol -> SRegular
  SApplyTypeSymbol -> SRegular
  SModuleAccessSymbol -> SRegular
  SModuleIdentifierSymbol -> SRegular
  SReservedIdentifierSymbol -> SRegular
  SExistsSymbol -> SRegular
  SForallSymbol -> SRegular
  SModuleIdentitySymbol -> SRegular
  SNumLiteralSymbol -> SRegular
  STypeArgumentsSymbol -> SRegular
  SFunctionTypeSymbol -> SRegular
  SFunctionTypeParametersSymbol -> SRegular
  SPrimitiveTypeSymbol -> SRegular
  SRefTypeSymbol -> SRegular
  SReferenceSymbol -> SRegular
  SImmRefSymbol -> SRegular
  SMutRefSymbol -> SRegular
  STupleTypeSymbol -> SRegular
  SPositionalFieldsSymbol -> SRegular
  SPostfixAbilityDeclsSymbol -> SRegular
  SFunctionItemSymbol -> SRegular
  SFunctionDefinitionSymbol -> SRegular
  SFunctionSignatureSymbol -> SRegular
  SFunctionIdentifierSymbol -> SRegular
  SFunctionParametersSymbol -> SRegular
  SFunctionParameterSymbol -> SRegular
  SVariableIdentifierSymbol -> SRegular
  SMutFunctionParameterSymbol -> SRegular
  SModifierSymbol -> SRegular
  SRetTypeSymbol -> SRegular
  SBlockSymbol -> SRegular
  SExpressionSymbol -> SRegular
  SUnaryExpressionSymbol -> SRegular
  SExpressionTermSymbol -> SRegular
  SLiteralValueSymbol -> SRegular
  SAddressLiteralSymbol -> SRegular
  SBoolLiteralSymbol -> SRegular
  SByteStringLiteralSymbol -> SRegular
  SHexStringLiteralSymbol -> SRegular
  SAnnotationExpressionSymbol -> SRegular
  SBreakExpressionSymbol -> SRegular
  SLabelSymbol -> SRegular
  SCallExpressionSymbol -> SRegular
  SArgListSymbol -> SRegular
  SNameExpressionSymbol -> SRegular
  SContinueExpressionSymbol -> SRegular
  SDotExpressionSymbol -> SRegular
  SExpressionListSymbol -> SRegular
  SIfExpressionSymbol -> SRegular
  SIndexExpressionSymbol -> SRegular
  SMacroCallExpressionSymbol -> SRegular
  SMacroModuleAccessSymbol -> SRegular
  SMatchExpressionSymbol -> SRegular
  SMatchBodySymbol -> SRegular
  SMatchArmSymbol -> SRegular
  SBindListSymbol -> SRegular
  SBindSymbol -> SRegular
  SAtBindSymbol -> SRegular
  SBindUnpackSymbol -> SRegular
  SBindFieldsSymbol -> SRegular
  SBindNamedFieldsSymbol -> SRegular
  SBindFieldSymbol -> SRegular
  SSpreadOperatorSymbol -> SRegular
  SMutBindFieldSymbol -> SRegular
  SBindPositionalFieldsSymbol -> SRegular
  SMutBindVarSymbol -> SRegular
  SCommaBindListSymbol -> SRegular
  SOrBindListSymbol -> SRegular
  SMatchConditionSymbol -> SRegular
  SPackExpressionSymbol -> SRegular
  SFieldInitializeListSymbol -> SRegular
  SExpFieldSymbol -> SRegular
  SSpecBlockSymbol -> SRegular
  SIdentifierSymbol -> SRegular
  SSpecBlockTargetSchemaSymbol -> SRegular
  SStructIdentifierSymbol -> SRegular
  SSpecFunctionSymbol -> SRegular
  SNativeSpecFunctionSymbol -> SRegular
  SSpecFunctionSignatureSymbol -> SRegular
  SUninterpretedSpecFunctionSymbol -> SRegular
  SUsualSpecFunctionSymbol -> SRegular
  SSpecBodySymbol -> SRegular
  SSpecBlockMemeberSymbol -> SRegular
  SSpecApplySymbol -> SRegular
  SSpecApplyPatternSymbol -> SRegular
  SSpecApplyNamePatternSymbol -> SRegular
  SSpecConditionSymbol -> SRegular
  SSpecAbortIfSymbol -> SRegular
  SConditionPropertiesSymbol -> SRegular
  SSpecPropertySymbol -> SRegular
  SSpecAbortWithOrModifiesSymbol -> SRegular
  SSpecConditionSymbol -> SRegular
  SSpecConditionKindSymbol -> SRegular
  SSpecIncludeSymbol -> SRegular
  SSpecInvariantSymbol -> SRegular
  SSpecLetSymbol -> SRegular
  SSpecPragmaSymbol -> SRegular
  SSpecVariableSymbol -> SRegular
  SUseDeclarationSymbol -> SRegular
  SUseFunSymbol -> SRegular
  SUseModuleSymbol -> SRegular
  SUseModuleMemberSymbol -> SRegular
  SUseMemberSymbol -> SRegular
  SUseModuleMembersSymbol -> SRegular
  SUnitExpressionSymbol -> SRegular
  SVectorExpressionSymbol -> SRegular
  SBorrowExpressionSymbol -> SRegular
  SDereferenceExpressionSymbol -> SRegular
  SMoveOrCopyExpressionSymbol -> SRegular
  SUnaryExpressionSymbol -> SRegular
  SUnaryOpSymbol -> SRegular
  SAbortExpressionSymbol -> SRegular
  SAssignExpressionSymbol -> SRegular
  SBinaryExpressionSymbol -> SRegular
  SCastExpressionSymbol -> SRegular
  SIdentifiedExpressionSymbol -> SRegular
  SBlockIdentifierSymbol -> SRegular
  SLambdaExpressionSymbol -> SRegular
  SLambdaBindingsSymbol -> SRegular
  SLambdaBindingSymbol -> SRegular
  SLoopExpressionSymbol -> SRegular
  SQuantifierExpressionSymbol -> SRegular
  SQuantifierBindingsSymbol -> SRegular
  SQuantifierBindingSymbol -> SRegular
  SReturnExpressionSymbol -> SRegular
  SWhileExpressionSymbol -> SRegular
  SBlockItemSymbol -> SRegular
  SLetStatementSymbol -> SRegular
  SMacroFunctionDefinitionSymbol -> SRegular
  SMacroSignatureSymbol -> SRegular
  SNativeFunctionDefinitionSymbol -> SRegular
  SStructItemSymbol -> SRegular
  SNativeStructDefinitionSymbol -> SRegular
  SStructSignatureSymbol -> SRegular
  SStructDefinitionSymbol -> SRegular
  SConstantSymbol -> SRegular
  SFriendDeclarationSymbol -> SRegular
  SFriendAccessSymbol -> SRegular
  SErrorSymbol -> SAuxiliary
  SMissingSymbol -> SAuxiliary
  SSortMismatchSymbol -> SVirtual

--------------------------------------------------------------------------------
-- Inferring sorts for regular symbols
--------------------------------------------------------------------------------

type family SymbolToSort (symbol :: Symbol Regular) :: Sort where
  SymbolToSort SourceFileSymbol = SourceFileSort
  SymbolToSort ModuleDefinitionSymbol = ModuleDefinitionSort
  SymbolToSort ModuleBodySymbol = ModuleBodySort
  SymbolToSort EnumItemSymbol = EnumItemSort
  SymbolToSort EnumDefinitionSymbol = EnumDefinitionSort
  SymbolToSort EnumSignatureSymbol = EnumSignatureSort
  SymbolToSort EnumIdentifierSymbol = EnumIdentifierSort
  SymbolToSort IdentifierSymbol = IdentifierSort
  SymbolToSort AbilityDeclsSymbol = AbilityDeclsSort
  SymbolToSort AbilitySymbol = AbilitySort
  SymbolToSort TypeParametersSymbol = TypeParametersSort
  SymbolToSort TypeParameterSymbol = TypeParameterSort
  SymbolToSort TypeParameterIdentifierSymbol = TypeParameterIdentifierSort
  SymbolToSort EnumVariantsSymbol = EnumVariantsSort
  SymbolToSort VariantSymbol = VariantSort
  SymbolToSort VariantIdentifierSymbol = VariantIdentifierSort
  SymbolToSort DatatypeFieldsSymbol = DatatypeFieldsSort
  SymbolToSort NamedFieldsSymbol = NamedFieldsSort
  SymbolToSort FieldAnnotationSymbol = FieldAnnotationSort
  SymbolToSort FieldIdentifierSymbol = FieldIdentifierSort
  SymbolToSort TypeSymbol = TypeSort
  SymbolToSort ApplyTypeSymbol = ApplyTypeSort
  SymbolToSort ModuleAccessSymbol = ModuleAccessSort
  SymbolToSort ModuleIdentifierSymbol = ModuleIdentifierSort
  SymbolToSort ReservedIdentifierSymbol = ReservedIdentifierSort
  SymbolToSort ExistsSymbol = ExistsSort
  SymbolToSort ForallSymbol = ForallSort
  SymbolToSort ModuleIdentitySymbol = ModuleIdentitySort
  SymbolToSort NumLiteralSymbol = NumLiteralSort
  SymbolToSort TypeArgumentsSymbol = TypeArgumentsSort
  SymbolToSort FunctionTypeSymbol = FunctionTypeSort
  SymbolToSort FunctionTypeParametersSymbol = FunctionTypeParametersSort
  SymbolToSort PrimitiveTypeSymbol = PrimitiveTypeSort
  SymbolToSort RefTypeSymbol = RefTypeSort
  SymbolToSort ReferenceSymbol = ReferenceSort
  SymbolToSort ImmRefSymbol = ImmRefSort
  SymbolToSort MutRefSymbol = MutRefSort
  SymbolToSort TupleTypeSymbol = TupleTypeSort
  SymbolToSort PositionalFieldsSymbol = PositionalFieldsSort
  SymbolToSort PostfixAbilityDeclsSymbol = PostfixAbilityDeclsSort
  SymbolToSort FunctionItemSymbol = FunctionItemSort
  SymbolToSort FunctionDefinitionSymbol = FunctionDefinitionSort
  SymbolToSort FunctionSignatureSymbol = FunctionSignatureSort
  SymbolToSort FunctionIdentifierSymbol = FunctionIdentifierSort
  SymbolToSort FunctionParametersSymbol = FunctionParametersSort
  SymbolToSort FunctionParameterSymbol = FunctionParameterSort
  SymbolToSort VariableIdentifierSymbol = VariableIdentifierSort
  SymbolToSort MutFunctionParameterSymbol = MutFunctionParameterSort
  SymbolToSort ModifierSymbol = ModifierSort
  SymbolToSort RetTypeSymbol = RetTypeSort
  SymbolToSort BlockSymbol = BlockSort
  SymbolToSort ExpressionSymbol = ExpressionSort
  SymbolToSort UnaryExpressionSymbol = UnaryExpressionSort
  SymbolToSort ExpressionTermSymbol = ExpressionTermSort
  SymbolToSort LiteralValueSymbol = LiteralValueSort
  SymbolToSort AddressLiteralSymbol = AddressLiteralSort
  SymbolToSort BoolLiteralSymbol = BoolLiteralSort
  SymbolToSort ByteStringLiteralSymbol = ByteStringLiteralSort
  SymbolToSort HexStringLiteralSymbol = HexStringLiteralSort
  SymbolToSort AnnotationExpressionSymbol = AnnotationExpressionSort
  SymbolToSort BreakExpressionSymbol = BreakExpressionSort
  SymbolToSort LabelSymbol = LabelSort
  SymbolToSort CallExpressionSymbol = CallExpressionSort
  SymbolToSort ArgListSymbol = ArgListSort
  SymbolToSort NameExpressionSymbol = NameExpressionSort
  SymbolToSort ContinueExpressionSymbol = ContinueExpressionSort
  SymbolToSort DotExpressionSymbol = DotExpressionSort
  SymbolToSort ExpressionListSymbol = ExpressionListSort
  SymbolToSort IfExpressionSymbol = IfExpressionSort
  SymbolToSort IndexExpressionSymbol = IndexExpressionSort
  SymbolToSort MacroCallExpressionSymbol = MacroCallExpressionSort
  SymbolToSort MacroModuleAccessSymbol = MacroModuleAccessSort
  SymbolToSort MatchExpressionSymbol = MatchExpressionSort
  SymbolToSort MatchBodySymbol = MatchBodySort
  SymbolToSort MatchArmSymbol = MatchArmSort
  SymbolToSort BindListSymbol = BindListSort
  SymbolToSort BindSymbol = BindSort
  SymbolToSort AtBindSymbol = AtBindSort
  SymbolToSort BindUnpackSymbol = BindUnpackSort
  SymbolToSort BindFieldsSymbol = BindFieldsSort
  SymbolToSort BindNamedFieldsSymbol = BindNamedFieldsSort
  SymbolToSort BindFieldSymbol = BindFieldSort
  SymbolToSort SpreadOperatorSymbol = SpreadOperatorSort
  SymbolToSort MutBindFieldSymbol = MutBindFieldSort
  SymbolToSort BindPositionalFieldsSymbol = BindPositionalFieldsSort
  SymbolToSort MutBindVarSymbol = MutBindVarSort
  SymbolToSort CommaBindListSymbol = CommaBindListSort
  SymbolToSort OrBindListSymbol = OrBindListSort
  SymbolToSort MatchConditionSymbol = MatchConditionSort
  SymbolToSort PackExpressionSymbol = PackExpressionSort
  SymbolToSort FieldInitializeListSymbol = FieldInitializeListSort
  SymbolToSort ExpFieldSymbol = ExpFieldSort
  SymbolToSort SpecBlockSymbol = SpecBlockSort
  SymbolToSort IdentifierSymbol = SpecBlockTargetSort
  SymbolToSort SpecBlockTargetSchemaSymbol = SpecBlockTargetSort
  SymbolToSort StructIdentifierSymbol = StructIdentifierSort
  SymbolToSort SpecFunctionSymbol = SpecFunctionSort
  SymbolToSort NativeSpecFunctionSymbol = NativeSpecFunctionSort
  SymbolToSort SpecFunctionSignatureSymbol = SpecFunctionSignatureSort
  SymbolToSort UninterpretedSpecFunctionSymbol = UninterpretedSpecFunctionSort
  SymbolToSort UsualSpecFunctionSymbol = UsualSpecFunctionSort
  SymbolToSort SpecBodySymbol = SpecBodySort
  SymbolToSort SpecBlockMemeberSymbol = SpecBlockMemeberSort
  SymbolToSort SpecApplySymbol = SpecApplySort
  SymbolToSort SpecApplyPatternSymbol = SpecApplyPatternSort
  SymbolToSort SpecApplyNamePatternSymbol = SpecApplyNamePatternSort
  SymbolToSort SpecConditionSymbol = SpecConditionSort
  SymbolToSort SpecAbortIfSymbol = SpecAbortIfSort
  SymbolToSort ConditionPropertiesSymbol = ConditionPropertiesSort
  SymbolToSort SpecPropertySymbol = SpecPropertySort
  SymbolToSort SpecAbortWithOrModifiesSymbol = SpecAbortWithOrModifiesSort
  SymbolToSort SpecConditionSymbol = SpecConditionSort
  SymbolToSort SpecConditionKindSymbol = SpecConditionKindSort
  SymbolToSort SpecIncludeSymbol = SpecIncludeSort
  SymbolToSort SpecInvariantSymbol = SpecInvariantSort
  SymbolToSort SpecLetSymbol = SpecLetSort
  SymbolToSort SpecPragmaSymbol = SpecPragmaSort
  SymbolToSort SpecVariableSymbol = SpecVariableSort
  SymbolToSort UseDeclarationSymbol = UseDeclarationSort
  SymbolToSort UseFunSymbol = UseFunSort
  SymbolToSort UseModuleSymbol = UseModuleSort
  SymbolToSort UseModuleMemberSymbol = UseModuleMemberSort
  SymbolToSort UseMemberSymbol = UseMemberSort
  SymbolToSort UseModuleMembersSymbol = UseModuleMembersSort
  SymbolToSort UnitExpressionSymbol = UnitExpressionSort
  SymbolToSort VectorExpressionSymbol = VectorExpressionSort
  SymbolToSort BorrowExpressionSymbol = BorrowExpressionSort
  SymbolToSort DereferenceExpressionSymbol = DereferenceExpressionSort
  SymbolToSort MoveOrCopyExpressionSymbol = MoveOrCopyExpressionSort
  SymbolToSort UnaryExpressionSymbol = UnaryExpressionSort
  SymbolToSort UnaryOpSymbol = UnaryOpSort
  SymbolToSort AbortExpressionSymbol = AbortExpressionSort
  SymbolToSort AssignExpressionSymbol = AssignExpressionSort
  SymbolToSort BinaryExpressionSymbol = BinaryExpressionSort
  SymbolToSort CastExpressionSymbol = CastExpressionSort
  SymbolToSort IdentifiedExpressionSymbol = IdentifiedExpressionSort
  SymbolToSort BlockIdentifierSymbol = BlockIdentifierSort
  SymbolToSort LambdaExpressionSymbol = LambdaExpressionSort
  SymbolToSort LambdaBindingsSymbol = LambdaBindingsSort
  SymbolToSort LambdaBindingSymbol = LambdaBindingSort
  SymbolToSort LoopExpressionSymbol = LoopExpressionSort
  SymbolToSort QuantifierExpressionSymbol = QuantifierExpressionSort
  SymbolToSort QuantifierBindingsSymbol = QuantifierBindingsSort
  SymbolToSort QuantifierBindingSymbol = QuantifierBindingSort
  SymbolToSort ReturnExpressionSymbol = ReturnExpressionSort
  SymbolToSort WhileExpressionSymbol = WhileExpressionSort
  SymbolToSort BlockItemSymbol = BlockItemSort
  SymbolToSort LetStatementSymbol = LetStatementSort
  SymbolToSort MacroFunctionDefinitionSymbol = MacroFunctionDefinitionSort
  SymbolToSort MacroSignatureSymbol = MacroSignatureSort
  SymbolToSort NativeFunctionDefinitionSymbol = NativeFunctionDefinitionSort
  SymbolToSort StructItemSymbol = StructItemSort
  SymbolToSort NativeStructDefinitionSymbol = NativeStructDefinitionSort
  SymbolToSort StructSignatureSymbol = StructSignatureSort
  SymbolToSort StructDefinitionSymbol = StructDefinitionSort
  SymbolToSort ConstantSymbol = ConstantSort
  SymbolToSort FriendDeclarationSymbol = FriendDeclarationSort
  SymbolToSort FriendAccessSymbol = FriendAccessSort

symbolToSort :: SymbolSing Regular symbol -> SortSing (SymbolToSort symbol)
symbolToSort = \case
  SSourceFileSymbol -> SSourceFileSort
  SModuleDefinitionSymbol -> SModuleDefinitionSort
  SModuleBodySymbol -> SModuleBodySort
  SEnumItemSymbol -> SEnumItemSort
  SEnumDefinitionSymbol -> SEnumDefinitionSort
  SEnumSignatureSymbol -> SEnumSignatureSort
  SEnumIdentifierSymbol -> SEnumIdentifierSort
  SIdentifierSymbol -> SIdentifierSort
  SAbilityDeclsSymbol -> SAbilityDeclsSort
  SAbilitySymbol -> SAbilitySort
  STypeParametersSymbol -> STypeParametersSort
  STypeParameterSymbol -> STypeParameterSort
  STypeParameterIdentifierSymbol -> STypeParameterIdentifierSort
  SEnumVariantsSymbol -> SEnumVariantsSort
  SVariantSymbol -> SVariantSort
  SVariantIdentifierSymbol -> SVariantIdentifierSort
  SDatatypeFieldsSymbol -> SDatatypeFieldsSort
  SNamedFieldsSymbol -> SNamedFieldsSort
  SFieldAnnotationSymbol -> SFieldAnnotationSort
  SFieldIdentifierSymbol -> SFieldIdentifierSort
  STypeSymbol -> STypeSort
  SApplyTypeSymbol -> SApplyTypeSort
  SModuleAccessSymbol -> SModuleAccessSort
  SModuleIdentifierSymbol -> SModuleIdentifierSort
  SReservedIdentifierSymbol -> SReservedIdentifierSort
  SExistsSymbol -> SExistsSort
  SForallSymbol -> SForallSort
  SModuleIdentitySymbol -> SModuleIdentitySort
  SNumLiteralSymbol -> SNumLiteralSort
  STypeArgumentsSymbol -> STypeArgumentsSort
  SFunctionTypeSymbol -> SFunctionTypeSort
  SFunctionTypeParametersSymbol -> SFunctionTypeParametersSort
  SPrimitiveTypeSymbol -> SPrimitiveTypeSort
  SRefTypeSymbol -> SRefTypeSort
  SReferenceSymbol -> SReferenceSort
  SImmRefSymbol -> SImmRefSort
  SMutRefSymbol -> SMutRefSort
  STupleTypeSymbol -> STupleTypeSort
  SPositionalFieldsSymbol -> SPositionalFieldsSort
  SPostfixAbilityDeclsSymbol -> SPostfixAbilityDeclsSort
  SFunctionItemSymbol -> SFunctionItemSort
  SFunctionDefinitionSymbol -> SFunctionDefinitionSort
  SFunctionSignatureSymbol -> SFunctionSignatureSort
  SFunctionIdentifierSymbol -> SFunctionIdentifierSort
  SFunctionParametersSymbol -> SFunctionParametersSort
  SFunctionParameterSymbol -> SFunctionParameterSort
  SVariableIdentifierSymbol -> SVariableIdentifierSort
  SMutFunctionParameterSymbol -> SMutFunctionParameterSort
  SModifierSymbol -> SModifierSort
  SRetTypeSymbol -> SRetTypeSort
  SBlockSymbol -> SBlockSort
  SExpressionSymbol -> SExpressionSort
  SUnaryExpressionSymbol -> SUnaryExpressionSort
  SExpressionTermSymbol -> SExpressionTermSort
  SLiteralValueSymbol -> SLiteralValueSort
  SAddressLiteralSymbol -> SAddressLiteralSort
  SBoolLiteralSymbol -> SBoolLiteralSort
  SByteStringLiteralSymbol -> SByteStringLiteralSort
  SHexStringLiteralSymbol -> SHexStringLiteralSort
  SAnnotationExpressionSymbol -> SAnnotationExpressionSort
  SBreakExpressionSymbol -> SBreakExpressionSort
  SLabelSymbol -> SLabelSort
  SCallExpressionSymbol -> SCallExpressionSort
  SArgListSymbol -> SArgListSort
  SNameExpressionSymbol -> SNameExpressionSort
  SContinueExpressionSymbol -> SContinueExpressionSort
  SDotExpressionSymbol -> SDotExpressionSort
  SExpressionListSymbol -> SExpressionListSort
  SIfExpressionSymbol -> SIfExpressionSort
  SIndexExpressionSymbol -> SIndexExpressionSort
  SMacroCallExpressionSymbol -> SMacroCallExpressionSort
  SMacroModuleAccessSymbol -> SMacroModuleAccessSort
  SMatchExpressionSymbol -> SMatchExpressionSort
  SMatchBodySymbol -> SMatchBodySort
  SMatchArmSymbol -> SMatchArmSort
  SBindListSymbol -> SBindListSort
  SBindSymbol -> SBindSort
  SAtBindSymbol -> SAtBindSort
  SBindUnpackSymbol -> SBindUnpackSort
  SBindFieldsSymbol -> SBindFieldsSort
  SBindNamedFieldsSymbol -> SBindNamedFieldsSort
  SBindFieldSymbol -> SBindFieldSort
  SSpreadOperatorSymbol -> SSpreadOperatorSort
  SMutBindFieldSymbol -> SMutBindFieldSort
  SBindPositionalFieldsSymbol -> SBindPositionalFieldsSort
  SMutBindVarSymbol -> SMutBindVarSort
  SCommaBindListSymbol -> SCommaBindListSort
  SOrBindListSymbol -> SOrBindListSort
  SMatchConditionSymbol -> SMatchConditionSort
  SPackExpressionSymbol -> SPackExpressionSort
  SFieldInitializeListSymbol -> SFieldInitializeListSort
  SExpFieldSymbol -> SExpFieldSort
  SSpecBlockSymbol -> SSpecBlockSort
  SIdentifierSymbol -> SSpecBlockTargetSort
  SSpecBlockTargetSchemaSymbol -> SSpecBlockTargetSort
  SStructIdentifierSymbol -> SStructIdentifierSort
  SSpecFunctionSymbol -> SSpecFunctionSort
  SNativeSpecFunctionSymbol -> SNativeSpecFunctionSort
  SSpecFunctionSignatureSymbol -> SSpecFunctionSignatureSort
  SUninterpretedSpecFunctionSymbol -> SUninterpretedSpecFunctionSort
  SUsualSpecFunctionSymbol -> SUsualSpecFunctionSort
  SSpecBodySymbol -> SSpecBodySort
  SSpecBlockMemeberSymbol -> SSpecBlockMemeberSort
  SSpecApplySymbol -> SSpecApplySort
  SSpecApplyPatternSymbol -> SSpecApplyPatternSort
  SSpecApplyNamePatternSymbol -> SSpecApplyNamePatternSort
  SSpecConditionSymbol -> SSpecConditionSort
  SSpecAbortIfSymbol -> SSpecAbortIfSort
  SConditionPropertiesSymbol -> SConditionPropertiesSort
  SSpecPropertySymbol -> SSpecPropertySort
  SSpecAbortWithOrModifiesSymbol -> SSpecAbortWithOrModifiesSort
  SSpecConditionSymbol -> SSpecConditionSort
  SSpecConditionKindSymbol -> SSpecConditionKindSort
  SSpecIncludeSymbol -> SSpecIncludeSort
  SSpecInvariantSymbol -> SSpecInvariantSort
  SSpecLetSymbol -> SSpecLetSort
  SSpecPragmaSymbol -> SSpecPragmaSort
  SSpecVariableSymbol -> SSpecVariableSort
  SUseDeclarationSymbol -> SUseDeclarationSort
  SUseFunSymbol -> SUseFunSort
  SUseModuleSymbol -> SUseModuleSort
  SUseModuleMemberSymbol -> SUseModuleMemberSort
  SUseMemberSymbol -> SUseMemberSort
  SUseModuleMembersSymbol -> SUseModuleMembersSort
  SUnitExpressionSymbol -> SUnitExpressionSort
  SVectorExpressionSymbol -> SVectorExpressionSort
  SBorrowExpressionSymbol -> SBorrowExpressionSort
  SDereferenceExpressionSymbol -> SDereferenceExpressionSort
  SMoveOrCopyExpressionSymbol -> SMoveOrCopyExpressionSort
  SUnaryExpressionSymbol -> SUnaryExpressionSort
  SUnaryOpSymbol -> SUnaryOpSort
  SAbortExpressionSymbol -> SAbortExpressionSort
  SAssignExpressionSymbol -> SAssignExpressionSort
  SBinaryExpressionSymbol -> SBinaryExpressionSort
  SCastExpressionSymbol -> SCastExpressionSort
  SIdentifiedExpressionSymbol -> SIdentifiedExpressionSort
  SBlockIdentifierSymbol -> SBlockIdentifierSort
  SLambdaExpressionSymbol -> SLambdaExpressionSort
  SLambdaBindingsSymbol -> SLambdaBindingsSort
  SLambdaBindingSymbol -> SLambdaBindingSort
  SLoopExpressionSymbol -> SLoopExpressionSort
  SQuantifierExpressionSymbol -> SQuantifierExpressionSort
  SQuantifierBindingsSymbol -> SQuantifierBindingsSort
  SQuantifierBindingSymbol -> SQuantifierBindingSort
  SReturnExpressionSymbol -> SReturnExpressionSort
  SWhileExpressionSymbol -> SWhileExpressionSort
  SBlockItemSymbol -> SBlockItemSort
  SLetStatementSymbol -> SLetStatementSort
  SMacroFunctionDefinitionSymbol -> SMacroFunctionDefinitionSort
  SMacroSignatureSymbol -> SMacroSignatureSort
  SNativeFunctionDefinitionSymbol -> SNativeFunctionDefinitionSort
  SStructItemSymbol -> SStructItemSort
  SNativeStructDefinitionSymbol -> SNativeStructDefinitionSort
  SStructSignatureSymbol -> SStructSignatureSort
  SStructDefinitionSymbol -> SStructDefinitionSort
  SConstantSymbol -> SConstantSort
  SFriendDeclarationSymbol -> SFriendDeclarationSort
  SFriendAccessSymbol -> SFriendAccessSort

--------------------------------------------------------------------------------
-- Well-sortedness for symbols
--------------------------------------------------------------------------------

type (:<) :: forall (symbolType :: SymbolType). Symbol symbolType -> Sort -> Type
data (:<) symbol sort where
  RegularWellSorted ::
    forall (symbol :: Symbol Regular) (sort :: Sort).
    {-# UNPACK #-} !(SymbolToSort symbol :~: sort) ->
    symbol :< sort
  AuxiliaryWellSorted ::
    forall (symbol :: Symbol Auxiliary) (sort :: Sort).
    symbol :< sort
  VirtualWellSorted ::
    forall (symbol :: Symbol Virtual) (sort :: Sort).
    symbol :< sort

deriving instance Eq (symbol :< sort)

deriving instance Show (symbol :< sort)

--------------------------------------------------------------------------------
-- Nodes
--------------------------------------------------------------------------------

data Node (sort :: Sort)
  = forall (symbolType :: SymbolType) (symbol :: Symbol symbolType).
    Node !(symbol :< sort) !(NodeContent symbolType symbol)

instance Eq (Node sort) where
  (==) :: Node sort -> Node sort -> Bool
  Node isWellSorted1 content1 == Node isWellSorted2 content2 =
    case nodeContentToSymbol content1 `decSymbolSing` nodeContentToSymbol content2 of
      Nothing -> False
      Just (Refl, HRefl) -> isWellSorted1 == isWellSorted2 && content1 == content2

nodeToNodeId :: Node sort -> NodeId
nodeToNodeId = someNodeToNodeId . nodeToSomeNode

nodeToRange :: Node sort -> Range
nodeToRange = someNodeToRange . nodeToSomeNode

nodeToChildren :: Node sort -> [SomeNode]
nodeToChildren = getChildren

data SomeNode
  = forall (symbolType :: SymbolType) (symbol :: Symbol symbolType).
    SomeNode !(IsReal symbolType) !(NodeContent symbolType symbol)

instance Eq SomeNode where
  (==) :: SomeNode -> SomeNode -> Bool
  SomeNode _isReal1 content1 == SomeNode _isReal2 content2 =
    case nodeContentToSymbol content1 `decSymbolSing` nodeContentToSymbol content2 of
      Nothing -> False
      Just (Refl, HRefl) -> content1 == content2

deriving instance Show SomeNode

someNodeToNodeId :: SomeNode -> NodeId
someNodeToNodeId (SomeNode isReal content) = nodeContentToNodeId isReal content

someNodeToRange :: SomeNode -> Range
someNodeToRange (SomeNode isReal content) = nodeContentToRange isReal content

someNodeToChildren :: SomeNode -> [SomeNode]
someNodeToChildren = getChildren

nodeToSomeNode :: Node sort -> SomeNode
nodeToSomeNode (Node _isWellSorted content) =
  case symbolTypeIsReal (symbolToSymbolType (nodeContentToSymbol content)) of
    Left isReal -> SomeNode isReal content
    Right Refl -> let SortMismatchContent someNode = content in someNode

data NodeContent (symbolType :: SymbolType) (symbol :: Symbol symbolType) where
  SourceFileContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[[Node ModuleDefinitionSort]]) ->
    NodeContent Regular SourceFileSymbol
  ModuleDefinitionContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node ModuleIdentitySort, Node ModuleBodySort]) ->
    NodeContent Regular ModuleDefinitionSymbol
  ModuleBodyContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[[Either (Node FriendDeclarationSort) (Either (Node ConstantSort) (Either (Node FunctionItemSort) (Either (Node StructItemSort) (Either (Node EnumItemSort) (Either (Node SpecBlockSort) (Node UseDeclarationSort))))))]]) ->
    NodeContent Regular ModuleBodySymbol
  EnumItemContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node EnumDefinitionSort]) ->
    NodeContent Regular EnumItemSymbol
  EnumDefinitionContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node EnumSignatureSort, Node EnumVariantsSort, Maybe (Node PostfixAbilityDeclsSort)]) ->
    NodeContent Regular EnumDefinitionSymbol
  EnumSignatureContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node EnumIdentifierSort, Maybe (Node TypeParametersSort), Maybe (Node AbilityDeclsSort)]) ->
    NodeContent Regular EnumSignatureSymbol
  EnumIdentifierContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node IdentifierSort]) ->
    NodeContent Regular EnumIdentifierSymbol
  IdentifierContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    NodeContent Regular IdentifierSymbol
  AbilityDeclsContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[(Maybe (Node AbilitySort), [Node AbilitySort])]) ->
    NodeContent Regular AbilityDeclsSymbol
  AbilityContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    NodeContent Regular AbilitySymbol
  TypeParametersContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[([Node TypeParameterSort], Node TypeParameterSort)]) ->
    NodeContent Regular TypeParametersSymbol
  TypeParameterContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node TypeParameterIdentifierSort, Maybe ([Node AbilitySort], Node AbilitySort)]) ->
    NodeContent Regular TypeParameterSymbol
  TypeParameterIdentifierContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node IdentifierSort]) ->
    NodeContent Regular TypeParameterIdentifierSymbol
  EnumVariantsContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[(Maybe (Node VariantSort), [Node VariantSort])]) ->
    NodeContent Regular EnumVariantsSymbol
  VariantContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node VariantIdentifierSort, Maybe (Node DatatypeFieldsSort)]) ->
    NodeContent Regular VariantSymbol
  VariantIdentifierContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node IdentifierSort]) ->
    NodeContent Regular VariantIdentifierSymbol
  DatatypeFieldsContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Either (Node NamedFieldsSort) (Node PositionalFieldsSort)]) ->
    NodeContent Regular DatatypeFieldsSymbol
  NamedFieldsContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[(Maybe (Node FieldAnnotationSort), [Node FieldAnnotationSort])]) ->
    NodeContent Regular NamedFieldsSymbol
  FieldAnnotationContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node FieldIdentifierSort, Node TypeSort]) ->
    NodeContent Regular FieldAnnotationSymbol
  FieldIdentifierContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node IdentifierSort]) ->
    NodeContent Regular FieldIdentifierSymbol
  TypeContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Either (Node RefTypeSort) (Either (Node TupleTypeSort) (Either (Node FunctionTypeSort) (Either (Node PrimitiveTypeSort) (Node ApplyTypeSort))))]) ->
    NodeContent Regular TypeSymbol
  ApplyTypeContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[(Maybe (Node TypeArgumentsSort), Node ModuleAccessSort)]) ->
    NodeContent Regular ApplyTypeSymbol
  ModuleAccessContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Either (Node IdentifierSort) (Either (Node ReservedIdentifierSort) (Either (Maybe (Node TypeArgumentsSort), Node IdentifierSort) (Either (Maybe (Node TypeArgumentsSort), (Node IdentifierSort, Node ModuleIdentifierSort)) (Either (Node IdentifierSort, (Node TypeArgumentsSort, Node ModuleIdentitySort)) (Either (Maybe (Node TypeArgumentsSort), Node ModuleIdentitySort) (Either (Maybe (Node TypeArgumentsSort), (Node IdentifierSort, Node ModuleIdentitySort)) (Either (Node IdentifierSort, (Maybe (Node TypeArgumentsSort), (Node IdentifierSort, Node ModuleIdentitySort))) (Node IdentifierSort))))))))]) ->
    NodeContent Regular ModuleAccessSymbol
  ModuleIdentifierContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node IdentifierSort]) ->
    NodeContent Regular ModuleIdentifierSymbol
  ReservedIdentifierContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Either (Node ExistsSort) (Node ForallSort)]) ->
    NodeContent Regular ReservedIdentifierSymbol
  ExistsContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    NodeContent Regular ExistsSymbol
  ForallContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    NodeContent Regular ForallSymbol
  ModuleIdentityContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Either (Node ModuleIdentifierSort) (Node NumLiteralSort), Node ModuleIdentifierSort]) ->
    NodeContent Regular ModuleIdentitySymbol
  NumLiteralContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    NodeContent Regular NumLiteralSymbol
  TypeArgumentsContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[([Node TypeSort], Node TypeSort)]) ->
    NodeContent Regular TypeArgumentsSymbol
  FunctionTypeContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node FunctionTypeParametersSort, Maybe (Node TypeSort)]) ->
    NodeContent Regular FunctionTypeSymbol
  FunctionTypeParametersContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[(Maybe (Node TypeSort), [Node TypeSort])]) ->
    NodeContent Regular FunctionTypeParametersSymbol
  PrimitiveTypeContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    NodeContent Regular PrimitiveTypeSymbol
  RefTypeContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node ReferenceSort, Node TypeSort]) ->
    NodeContent Regular RefTypeSymbol
  ReferenceContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Either (Node MutRefSort) (Node ImmRefSort)]) ->
    NodeContent Regular ReferenceSymbol
  ImmRefContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    NodeContent Regular ImmRefSymbol
  MutRefContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    NodeContent Regular MutRefSymbol
  TupleTypeContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[(Maybe (Node TypeSort), [Node TypeSort])]) ->
    NodeContent Regular TupleTypeSymbol
  PositionalFieldsContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[(Maybe (Node TypeSort), [Node TypeSort])]) ->
    NodeContent Regular PositionalFieldsSymbol
  PostfixAbilityDeclsContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[(Maybe (Node AbilitySort), [Node AbilitySort])]) ->
    NodeContent Regular PostfixAbilityDeclsSymbol
  FunctionItemContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Either (Node MacroFunctionDefinitionSort) (Either (Node FunctionDefinitionSort) (Node NativeFunctionDefinitionSort))]) ->
    NodeContent Regular FunctionItemSymbol
  FunctionDefinitionContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node FunctionSignatureSort, Node BlockSort]) ->
    NodeContent Regular FunctionDefinitionSymbol
  FunctionSignatureContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Maybe (Node ModifierSort), Maybe (Node ModifierSort), Maybe (Node ModifierSort), Node FunctionIdentifierSort, Maybe (Node TypeParametersSort), Node FunctionParametersSort, Maybe (Node RetTypeSort)]) ->
    NodeContent Regular FunctionSignatureSymbol
  FunctionIdentifierContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node IdentifierSort]) ->
    NodeContent Regular FunctionIdentifierSymbol
  FunctionParametersContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[(Maybe (Either (Node FunctionParameterSort) (Node MutFunctionParameterSort)), [Either (Node FunctionParameterSort) (Node MutFunctionParameterSort)])]) ->
    NodeContent Regular FunctionParametersSymbol
  FunctionParameterContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Either (Node VariableIdentifierSort) (Node VariableIdentifierSort), Node TypeSort]) ->
    NodeContent Regular FunctionParameterSymbol
  VariableIdentifierContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node IdentifierSort]) ->
    NodeContent Regular VariableIdentifierSymbol
  MutFunctionParameterContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node FunctionParameterSort]) ->
    NodeContent Regular MutFunctionParameterSymbol
  ModifierContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    NodeContent Regular ModifierSymbol
  RetTypeContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node TypeSort]) ->
    NodeContent Regular RetTypeSymbol
  BlockContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[[Node UseDeclarationSort], [Node BlockItemSort], Maybe (Node ExpressionSort)]) ->
    NodeContent Regular BlockSymbol
  ExpressionContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Either (Node MacroCallExpressionSort) (Either (Node LambdaExpressionSort) (Either (Node IfExpressionSort) (Either (Node WhileExpressionSort) (Either (Node ReturnExpressionSort) (Either (Node AbortExpressionSort) (Either (Node AssignExpressionSort) (Either (Node UnaryExpressionSort) (Either (Node BinaryExpressionSort) (Either (Node CastExpressionSort) (Either (Node QuantifierExpressionSort) (Either (Node MatchExpressionSort) (Either (Node VectorExpressionSort) (Either (Node LoopExpressionSort) (Either (Node IdentifiedExpressionSort) (Node CallExpressionSort)))))))))))))))]) ->
    NodeContent Regular ExpressionSymbol
  UnaryExpressionContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Either (Node BorrowExpressionSort) (Either (Node DereferenceExpressionSort) (Either (Node MoveOrCopyExpressionSort) (Either (Node ExpressionTermSort) (Node UnaryExpressionSort))))]) ->
    NodeContent Regular UnaryExpressionSymbol
  ExpressionTermContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Either (Node BreakExpressionSort) (Either (Node ContinueExpressionSort) (Either (Node NameExpressionSort) (Either (Node MacroCallExpressionSort) (Either (Node PackExpressionSort) (Either (Node LiteralValueSort) (Either (Node UnitExpressionSort) (Either (Node ExpressionListSort) (Either (Node AnnotationExpressionSort) (Either (Node BlockSort) (Either (Node SpecBlockSort) (Either (Node IfExpressionSort) (Either (Node DotExpressionSort) (Either (Node IndexExpressionSort) (Either (Node VectorExpressionSort) (Either (Node MatchExpressionSort) (Node CallExpressionSort))))))))))))))))]) ->
    NodeContent Regular ExpressionTermSymbol
  LiteralValueContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Either (Node BoolLiteralSort) (Either (Node NumLiteralSort) (Either (Node HexStringLiteralSort) (Either (Node ByteStringLiteralSort) (Node AddressLiteralSort))))]) ->
    NodeContent Regular LiteralValueSymbol
  AddressLiteralContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    NodeContent Regular AddressLiteralSymbol
  BoolLiteralContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    NodeContent Regular BoolLiteralSymbol
  ByteStringLiteralContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    NodeContent Regular ByteStringLiteralSymbol
  HexStringLiteralContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    NodeContent Regular HexStringLiteralSymbol
  AnnotationExpressionContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node ExpressionSort, Node TypeSort]) ->
    NodeContent Regular AnnotationExpressionSymbol
  BreakExpressionContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Maybe (Node LabelSort), Maybe (Node ExpressionSort)]) ->
    NodeContent Regular BreakExpressionSymbol
  LabelContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node IdentifierSort]) ->
    NodeContent Regular LabelSymbol
  CallExpressionContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[(Node ArgListSort, Node NameExpressionSort)]) ->
    NodeContent Regular CallExpressionSymbol
  ArgListContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[(Maybe (Node ExpressionSort), [Node ExpressionSort])]) ->
    NodeContent Regular ArgListSymbol
  NameExpressionContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node ModuleAccessSort]) ->
    NodeContent Regular NameExpressionSymbol
  ContinueExpressionContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Maybe (Node LabelSort)]) ->
    NodeContent Regular ContinueExpressionSymbol
  DotExpressionContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[(Node ExpressionTermSort, Node ExpressionTermSort)]) ->
    NodeContent Regular DotExpressionSymbol
  ExpressionListContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[([Node ExpressionSort], Node ExpressionSort)]) ->
    NodeContent Regular ExpressionListSymbol
  IfExpressionContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[(Node ExpressionSort, (Node ExpressionSort, Maybe (Node ExpressionSort)))]) ->
    NodeContent Regular IfExpressionSymbol
  IndexExpressionContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[((Maybe (Node ExpressionSort), [Node ExpressionSort]), Node ExpressionTermSort)]) ->
    NodeContent Regular IndexExpressionSymbol
  MacroCallExpressionContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node MacroModuleAccessSort, Maybe (Node TypeArgumentsSort), Node ArgListSort]) ->
    NodeContent Regular MacroCallExpressionSymbol
  MacroModuleAccessContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node ModuleAccessSort]) ->
    NodeContent Regular MacroModuleAccessSymbol
  MatchExpressionContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node ExpressionSort, Node MatchBodySort]) ->
    NodeContent Regular MatchExpressionSymbol
  MatchBodyContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[(Maybe (Node MatchArmSort), [Node MatchArmSort])]) ->
    NodeContent Regular MatchBodySymbol
  MatchArmContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node BindListSort, Maybe (Node MatchConditionSort), Node ExpressionSort]) ->
    NodeContent Regular MatchArmSymbol
  BindListContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Either (Node CommaBindListSort) (Either (Node OrBindListSort) (Node BindSort))]) ->
    NodeContent Regular BindListSymbol
  BindContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Either (Node BindUnpackSort) (Either (Node AtBindSort) (Either (Node LiteralValueSort) (Either (Node VariableIdentifierSort) (Node MutBindVarSort))))]) ->
    NodeContent Regular BindSymbol
  AtBindContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node VariableIdentifierSort, Node BindListSort]) ->
    NodeContent Regular AtBindSymbol
  BindUnpackContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node NameExpressionSort, Maybe (Node BindFieldsSort)]) ->
    NodeContent Regular BindUnpackSymbol
  BindFieldsContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Either (Node BindNamedFieldsSort) (Node BindPositionalFieldsSort)]) ->
    NodeContent Regular BindFieldsSymbol
  BindNamedFieldsContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[(Maybe (Either (Node MutBindFieldSort) (Node BindFieldSort)), [Either (Node MutBindFieldSort) (Node BindFieldSort)])]) ->
    NodeContent Regular BindNamedFieldsSymbol
  BindFieldContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Either (Node SpreadOperatorSort) (Maybe (Node BindListSort), Node BindListSort)]) ->
    NodeContent Regular BindFieldSymbol
  SpreadOperatorContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    NodeContent Regular SpreadOperatorSymbol
  MutBindFieldContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node BindFieldSort]) ->
    NodeContent Regular MutBindFieldSymbol
  BindPositionalFieldsContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[(Maybe (Either (Node MutBindFieldSort) (Node BindFieldSort)), [Either (Node MutBindFieldSort) (Node BindFieldSort)])]) ->
    NodeContent Regular BindPositionalFieldsSymbol
  MutBindVarContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node VariableIdentifierSort]) ->
    NodeContent Regular MutBindVarSymbol
  CommaBindListContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[(Maybe (Node BindSort), [Node BindSort])]) ->
    NodeContent Regular CommaBindListSymbol
  OrBindListContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[([Node BindSort], Node BindSort)]) ->
    NodeContent Regular OrBindListSymbol
  MatchConditionContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node ExpressionSort]) ->
    NodeContent Regular MatchConditionSymbol
  PackExpressionContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node NameExpressionSort, Node FieldInitializeListSort]) ->
    NodeContent Regular PackExpressionSymbol
  FieldInitializeListContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[(Maybe (Node ExpFieldSort), [Node ExpFieldSort])]) ->
    NodeContent Regular FieldInitializeListSymbol
  ExpFieldContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node FieldIdentifierSort, Maybe (Node ExpressionSort)]) ->
    NodeContent Regular ExpFieldSymbol
  SpecBlockContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Either (Node SpecFunctionSort) (Node SpecBodySort, Maybe (Node SpecBlockTargetSort))]) ->
    NodeContent Regular SpecBlockSymbol
  IdentifierContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    NodeContent Regular IdentifierSymbol
  SpecBlockTargetSchemaContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node StructIdentifierSort, Maybe (Node TypeParametersSort)]) ->
    NodeContent Regular SpecBlockTargetSchemaSymbol
  StructIdentifierContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node IdentifierSort]) ->
    NodeContent Regular StructIdentifierSymbol
  SpecFunctionContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Either (Node UsualSpecFunctionSort) (Either (Node UninterpretedSpecFunctionSort) (Node NativeSpecFunctionSort))]) ->
    NodeContent Regular SpecFunctionSymbol
  NativeSpecFunctionContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node SpecFunctionSignatureSort]) ->
    NodeContent Regular NativeSpecFunctionSymbol
  SpecFunctionSignatureContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node FunctionIdentifierSort, Maybe (Node TypeParametersSort), Node FunctionParametersSort, Node RetTypeSort]) ->
    NodeContent Regular SpecFunctionSignatureSymbol
  UninterpretedSpecFunctionContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node SpecFunctionSignatureSort]) ->
    NodeContent Regular UninterpretedSpecFunctionSymbol
  UsualSpecFunctionContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node SpecFunctionSignatureSort, Node BlockSort]) ->
    NodeContent Regular UsualSpecFunctionSymbol
  SpecBodyContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[[Node UseDeclarationSort], [Node SpecBlockMemeberSort]]) ->
    NodeContent Regular SpecBodySymbol
  SpecBlockMemeberContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Either (Node SpecFunctionSort) (Either (Node SpecConditionSort) (Either (Node SpecIncludeSort) (Either (Node SpecApplySort) (Either (Node SpecPragmaSort) (Either (Node SpecVariableSort) (Either (Node SpecLetSort) (Node SpecInvariantSort)))))))]) ->
    NodeContent Regular SpecBlockMemeberSymbol
  SpecApplyContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node ExpressionSort, ([Node SpecApplyPatternSort], Node SpecApplyPatternSort), Maybe ([Node SpecApplyPatternSort], Node SpecApplyPatternSort)]) ->
    NodeContent Regular SpecApplySymbol
  SpecApplyPatternContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node SpecApplyNamePatternSort, Maybe (Node TypeParametersSort)]) ->
    NodeContent Regular SpecApplyPatternSymbol
  SpecApplyNamePatternContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    NodeContent Regular SpecApplyNamePatternSymbol
  SpecConditionContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Either (Node SpecAbortIfSort) (Either (Node SpecAbortWithOrModifiesSort) (Node SpecConditionSort))]) ->
    NodeContent Regular SpecConditionSymbol
  SpecAbortIfContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Maybe (Node ConditionPropertiesSort), Node ExpressionSort, Maybe (Node ExpressionSort)]) ->
    NodeContent Regular SpecAbortIfSymbol
  ConditionPropertiesContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[(Maybe (Node SpecPropertySort), [Node SpecPropertySort])]) ->
    NodeContent Regular ConditionPropertiesSymbol
  SpecPropertyContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node IdentifierSort, Maybe (Node LiteralValueSort)]) ->
    NodeContent Regular SpecPropertySymbol
  SpecAbortWithOrModifiesContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Maybe (Node ConditionPropertiesSort), ([Node ExpressionSort], Node ExpressionSort)]) ->
    NodeContent Regular SpecAbortWithOrModifiesSymbol
  SpecConditionContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Maybe (Node SpecConditionKindSort), Maybe (Node ConditionPropertiesSort), Node ExpressionSort]) ->
    NodeContent Regular SpecConditionSymbol
  SpecConditionKindContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    NodeContent Regular SpecConditionKindSymbol
  SpecIncludeContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node ExpressionSort]) ->
    NodeContent Regular SpecIncludeSymbol
  SpecInvariantContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Maybe (Node ConditionPropertiesSort), Node ExpressionSort]) ->
    NodeContent Regular SpecInvariantSymbol
  SpecLetContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node IdentifierSort, Node ExpressionSort]) ->
    NodeContent Regular SpecLetSymbol
  SpecPragmaContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[(Maybe (Node SpecPropertySort), [Node SpecPropertySort])]) ->
    NodeContent Regular SpecPragmaSymbol
  SpecVariableContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node IdentifierSort, Maybe (Node TypeParametersSort), Node TypeSort]) ->
    NodeContent Regular SpecVariableSymbol
  UseDeclarationContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Either (Node UseModuleSort) (Either (Node UseModuleMemberSort) (Either (Node UseModuleMembersSort) (Node UseFunSort)))]) ->
    NodeContent Regular UseDeclarationSymbol
  UseFunContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node ModuleAccessSort, (Node FunctionIdentifierSort, Node ModuleAccessSort)]) ->
    NodeContent Regular UseFunSymbol
  UseModuleContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node ModuleIdentitySort, Maybe (Node ModuleIdentifierSort)]) ->
    NodeContent Regular UseModuleSymbol
  UseModuleMemberContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node ModuleIdentitySort, Node UseMemberSort]) ->
    NodeContent Regular UseModuleMemberSymbol
  UseMemberContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Either (Node IdentifierSort, (Maybe (Node IdentifierSort), Node IdentifierSort)) (Either (Maybe (Node IdentifierSort), Node IdentifierSort) (([Node UseMemberSort], Node UseMemberSort), Node IdentifierSort))]) ->
    NodeContent Regular UseMemberSymbol
  UseModuleMembersContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Either (([Node UseMemberSort], Node UseMemberSort), Node ModuleIdentitySort) (([Node UseMemberSort], Node UseMemberSort), Either (Node ModuleIdentifierSort) (Node NumLiteralSort))]) ->
    NodeContent Regular UseModuleMembersSymbol
  UnitExpressionContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    NodeContent Regular UnitExpressionSymbol
  VectorExpressionContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Maybe ([Node TypeSort], Node TypeSort), (Maybe (Node ExpressionSort), [Node ExpressionSort])]) ->
    NodeContent Regular VectorExpressionSymbol
  BorrowExpressionContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[(Node ExpressionSort, Node ReferenceSort)]) ->
    NodeContent Regular BorrowExpressionSymbol
  DereferenceExpressionContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node ExpressionSort]) ->
    NodeContent Regular DereferenceExpressionSymbol
  MoveOrCopyExpressionContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node ExpressionSort]) ->
    NodeContent Regular MoveOrCopyExpressionSymbol
  UnaryExpressionContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node UnaryOpSort, Node ExpressionSort]) ->
    NodeContent Regular UnaryExpressionSymbol
  UnaryOpContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    NodeContent Regular UnaryOpSymbol
  AbortExpressionContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Maybe (Node ExpressionSort)]) ->
    NodeContent Regular AbortExpressionSymbol
  AssignExpressionContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[(Node ExpressionSort, Node UnaryExpressionSort)]) ->
    NodeContent Regular AssignExpressionSymbol
  BinaryExpressionContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Either (Node ExpressionSort, Node ExpressionSort) (Either (Node ExpressionSort, Node ExpressionSort) (Either (Node ExpressionSort, Node ExpressionSort) (Either (Node ExpressionSort, Node ExpressionSort) (Either (Node ExpressionSort, Node ExpressionSort) (Either (Node ExpressionSort, Node ExpressionSort) (Either (Node ExpressionSort, Node ExpressionSort) (Either (Node ExpressionSort, Node ExpressionSort) (Either (Node ExpressionSort, Node ExpressionSort) (Either (Node ExpressionSort, Node ExpressionSort) (Either (Node ExpressionSort, Node ExpressionSort) (Either (Node ExpressionSort, Node ExpressionSort) (Either (Node ExpressionSort, Node ExpressionSort) (Either (Node ExpressionSort, Node ExpressionSort) (Either (Node ExpressionSort, Node ExpressionSort) (Either (Node ExpressionSort, Node ExpressionSort) (Either (Node ExpressionSort, Node ExpressionSort) (Either (Node ExpressionSort, Node ExpressionSort) (Either (Node ExpressionSort, Node ExpressionSort) (Node ExpressionSort, Node ExpressionSort)))))))))))))))))))]) ->
    NodeContent Regular BinaryExpressionSymbol
  CastExpressionContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[(Node TypeSort, Node ExpressionSort)]) ->
    NodeContent Regular CastExpressionSymbol
  IdentifiedExpressionContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node BlockIdentifierSort, Node ExpressionSort]) ->
    NodeContent Regular IdentifiedExpressionSymbol
  BlockIdentifierContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node LabelSort]) ->
    NodeContent Regular BlockIdentifierSymbol
  LambdaExpressionContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node LambdaBindingsSort, Maybe (Node TypeSort), Node ExpressionSort]) ->
    NodeContent Regular LambdaExpressionSymbol
  LambdaBindingsContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[(Maybe (Node LambdaBindingSort), [Node LambdaBindingSort])]) ->
    NodeContent Regular LambdaBindingsSymbol
  LambdaBindingContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Either (Node BindSort) (Either (Maybe (Node TypeSort), Node BindSort) (Node CommaBindListSort))]) ->
    NodeContent Regular LambdaBindingSymbol
  LoopExpressionContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node ExpressionSort]) ->
    NodeContent Regular LoopExpressionSymbol
  QuantifierExpressionContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[(Node QuantifierBindingsSort, (Maybe (Node ExpressionSort), (Node ExpressionSort, Either (Node ExistsSort) (Node ForallSort))))]) ->
    NodeContent Regular QuantifierExpressionSymbol
  QuantifierBindingsContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node QuantifierBindingSort, [Node QuantifierBindingSort]]) ->
    NodeContent Regular QuantifierBindingsSymbol
  QuantifierBindingContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Either (Node ExpressionSort, Node IdentifierSort) (Node TypeSort, Node IdentifierSort)]) ->
    NodeContent Regular QuantifierBindingSymbol
  ReturnExpressionContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Either (Maybe (Node LabelSort)) (Maybe (Node LabelSort), Node ExpressionSort)]) ->
    NodeContent Regular ReturnExpressionSymbol
  WhileExpressionContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node ExpressionSort, Node ExpressionSort]) ->
    NodeContent Regular WhileExpressionSymbol
  BlockItemContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Either (Node LetStatementSort) (Node ExpressionSort)]) ->
    NodeContent Regular BlockItemSymbol
  LetStatementContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node BindListSort, Maybe (Node TypeSort), Maybe (Node ExpressionSort)]) ->
    NodeContent Regular LetStatementSymbol
  MacroFunctionDefinitionContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Maybe (Node ModifierSort), Node MacroSignatureSort, Node BlockSort]) ->
    NodeContent Regular MacroFunctionDefinitionSymbol
  MacroSignatureContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Maybe (Node ModifierSort), Node FunctionIdentifierSort, Maybe (Node TypeParametersSort), Node FunctionParametersSort, Maybe (Node RetTypeSort)]) ->
    NodeContent Regular MacroSignatureSymbol
  NativeFunctionDefinitionContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node FunctionSignatureSort]) ->
    NodeContent Regular NativeFunctionDefinitionSymbol
  StructItemContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Either (Node StructDefinitionSort) (Node NativeStructDefinitionSort)]) ->
    NodeContent Regular StructItemSymbol
  NativeStructDefinitionContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node StructSignatureSort]) ->
    NodeContent Regular NativeStructDefinitionSymbol
  StructSignatureContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node StructIdentifierSort, Maybe (Node TypeParametersSort), Maybe (Node AbilityDeclsSort)]) ->
    NodeContent Regular StructSignatureSymbol
  StructDefinitionContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node StructSignatureSort, Node DatatypeFieldsSort, Maybe (Node PostfixAbilityDeclsSort)]) ->
    NodeContent Regular StructDefinitionSymbol
  ConstantContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node IdentifierSort, Node TypeSort, Node ExpressionSort]) ->
    NodeContent Regular ConstantSymbol
  FriendDeclarationContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Node FriendAccessSort]) ->
    NodeContent Regular FriendDeclarationSymbol
  FriendAccessContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[Either (Node ModuleIdentitySort) (Node IdentifierSort)]) ->
    NodeContent Regular FriendAccessSymbol
  ErrorContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    !(Children '[[SomeNode]]) ->
    NodeContent Auxiliary ErrorSymbol
  MissingContent ::
    {-# UNPACK #-} !NodeId ->
    {-# UNPACK #-} !Range ->
    NodeContent Auxiliary MissingSymbol
  SortMismatchContent ::
    !SomeNode ->
    NodeContent Virtual SortMismatchSymbol

deriving instance Eq (NodeContent symbolType symbol)

deriving instance Show (NodeContent symbolType symbol)

nodeContentToSymbol ::
  forall (symbolType :: SymbolType) (symbol :: Symbol symbolType).
  NodeContent symbolType symbol ->
  SymbolSing symbolType symbol
nodeContentToSymbol = \case
  SourceFileContent{} -> SSourceFileSymbol
  ModuleDefinitionContent{} -> SModuleDefinitionSymbol
  ModuleBodyContent{} -> SModuleBodySymbol
  EnumItemContent{} -> SEnumItemSymbol
  EnumDefinitionContent{} -> SEnumDefinitionSymbol
  EnumSignatureContent{} -> SEnumSignatureSymbol
  EnumIdentifierContent{} -> SEnumIdentifierSymbol
  IdentifierContent{} -> SIdentifierSymbol
  AbilityDeclsContent{} -> SAbilityDeclsSymbol
  AbilityContent{} -> SAbilitySymbol
  TypeParametersContent{} -> STypeParametersSymbol
  TypeParameterContent{} -> STypeParameterSymbol
  TypeParameterIdentifierContent{} -> STypeParameterIdentifierSymbol
  EnumVariantsContent{} -> SEnumVariantsSymbol
  VariantContent{} -> SVariantSymbol
  VariantIdentifierContent{} -> SVariantIdentifierSymbol
  DatatypeFieldsContent{} -> SDatatypeFieldsSymbol
  NamedFieldsContent{} -> SNamedFieldsSymbol
  FieldAnnotationContent{} -> SFieldAnnotationSymbol
  FieldIdentifierContent{} -> SFieldIdentifierSymbol
  TypeContent{} -> STypeSymbol
  ApplyTypeContent{} -> SApplyTypeSymbol
  ModuleAccessContent{} -> SModuleAccessSymbol
  ModuleIdentifierContent{} -> SModuleIdentifierSymbol
  ReservedIdentifierContent{} -> SReservedIdentifierSymbol
  ExistsContent{} -> SExistsSymbol
  ForallContent{} -> SForallSymbol
  ModuleIdentityContent{} -> SModuleIdentitySymbol
  NumLiteralContent{} -> SNumLiteralSymbol
  TypeArgumentsContent{} -> STypeArgumentsSymbol
  FunctionTypeContent{} -> SFunctionTypeSymbol
  FunctionTypeParametersContent{} -> SFunctionTypeParametersSymbol
  PrimitiveTypeContent{} -> SPrimitiveTypeSymbol
  RefTypeContent{} -> SRefTypeSymbol
  ReferenceContent{} -> SReferenceSymbol
  ImmRefContent{} -> SImmRefSymbol
  MutRefContent{} -> SMutRefSymbol
  TupleTypeContent{} -> STupleTypeSymbol
  PositionalFieldsContent{} -> SPositionalFieldsSymbol
  PostfixAbilityDeclsContent{} -> SPostfixAbilityDeclsSymbol
  FunctionItemContent{} -> SFunctionItemSymbol
  FunctionDefinitionContent{} -> SFunctionDefinitionSymbol
  FunctionSignatureContent{} -> SFunctionSignatureSymbol
  FunctionIdentifierContent{} -> SFunctionIdentifierSymbol
  FunctionParametersContent{} -> SFunctionParametersSymbol
  FunctionParameterContent{} -> SFunctionParameterSymbol
  VariableIdentifierContent{} -> SVariableIdentifierSymbol
  MutFunctionParameterContent{} -> SMutFunctionParameterSymbol
  ModifierContent{} -> SModifierSymbol
  RetTypeContent{} -> SRetTypeSymbol
  BlockContent{} -> SBlockSymbol
  ExpressionContent{} -> SExpressionSymbol
  UnaryExpressionContent{} -> SUnaryExpressionSymbol
  ExpressionTermContent{} -> SExpressionTermSymbol
  LiteralValueContent{} -> SLiteralValueSymbol
  AddressLiteralContent{} -> SAddressLiteralSymbol
  BoolLiteralContent{} -> SBoolLiteralSymbol
  ByteStringLiteralContent{} -> SByteStringLiteralSymbol
  HexStringLiteralContent{} -> SHexStringLiteralSymbol
  AnnotationExpressionContent{} -> SAnnotationExpressionSymbol
  BreakExpressionContent{} -> SBreakExpressionSymbol
  LabelContent{} -> SLabelSymbol
  CallExpressionContent{} -> SCallExpressionSymbol
  ArgListContent{} -> SArgListSymbol
  NameExpressionContent{} -> SNameExpressionSymbol
  ContinueExpressionContent{} -> SContinueExpressionSymbol
  DotExpressionContent{} -> SDotExpressionSymbol
  ExpressionListContent{} -> SExpressionListSymbol
  IfExpressionContent{} -> SIfExpressionSymbol
  IndexExpressionContent{} -> SIndexExpressionSymbol
  MacroCallExpressionContent{} -> SMacroCallExpressionSymbol
  MacroModuleAccessContent{} -> SMacroModuleAccessSymbol
  MatchExpressionContent{} -> SMatchExpressionSymbol
  MatchBodyContent{} -> SMatchBodySymbol
  MatchArmContent{} -> SMatchArmSymbol
  BindListContent{} -> SBindListSymbol
  BindContent{} -> SBindSymbol
  AtBindContent{} -> SAtBindSymbol
  BindUnpackContent{} -> SBindUnpackSymbol
  BindFieldsContent{} -> SBindFieldsSymbol
  BindNamedFieldsContent{} -> SBindNamedFieldsSymbol
  BindFieldContent{} -> SBindFieldSymbol
  SpreadOperatorContent{} -> SSpreadOperatorSymbol
  MutBindFieldContent{} -> SMutBindFieldSymbol
  BindPositionalFieldsContent{} -> SBindPositionalFieldsSymbol
  MutBindVarContent{} -> SMutBindVarSymbol
  CommaBindListContent{} -> SCommaBindListSymbol
  OrBindListContent{} -> SOrBindListSymbol
  MatchConditionContent{} -> SMatchConditionSymbol
  PackExpressionContent{} -> SPackExpressionSymbol
  FieldInitializeListContent{} -> SFieldInitializeListSymbol
  ExpFieldContent{} -> SExpFieldSymbol
  SpecBlockContent{} -> SSpecBlockSymbol
  IdentifierContent{} -> SIdentifierSymbol
  SpecBlockTargetSchemaContent{} -> SSpecBlockTargetSchemaSymbol
  StructIdentifierContent{} -> SStructIdentifierSymbol
  SpecFunctionContent{} -> SSpecFunctionSymbol
  NativeSpecFunctionContent{} -> SNativeSpecFunctionSymbol
  SpecFunctionSignatureContent{} -> SSpecFunctionSignatureSymbol
  UninterpretedSpecFunctionContent{} -> SUninterpretedSpecFunctionSymbol
  UsualSpecFunctionContent{} -> SUsualSpecFunctionSymbol
  SpecBodyContent{} -> SSpecBodySymbol
  SpecBlockMemeberContent{} -> SSpecBlockMemeberSymbol
  SpecApplyContent{} -> SSpecApplySymbol
  SpecApplyPatternContent{} -> SSpecApplyPatternSymbol
  SpecApplyNamePatternContent{} -> SSpecApplyNamePatternSymbol
  SpecConditionContent{} -> SSpecConditionSymbol
  SpecAbortIfContent{} -> SSpecAbortIfSymbol
  ConditionPropertiesContent{} -> SConditionPropertiesSymbol
  SpecPropertyContent{} -> SSpecPropertySymbol
  SpecAbortWithOrModifiesContent{} -> SSpecAbortWithOrModifiesSymbol
  SpecConditionContent{} -> SSpecConditionSymbol
  SpecConditionKindContent{} -> SSpecConditionKindSymbol
  SpecIncludeContent{} -> SSpecIncludeSymbol
  SpecInvariantContent{} -> SSpecInvariantSymbol
  SpecLetContent{} -> SSpecLetSymbol
  SpecPragmaContent{} -> SSpecPragmaSymbol
  SpecVariableContent{} -> SSpecVariableSymbol
  UseDeclarationContent{} -> SUseDeclarationSymbol
  UseFunContent{} -> SUseFunSymbol
  UseModuleContent{} -> SUseModuleSymbol
  UseModuleMemberContent{} -> SUseModuleMemberSymbol
  UseMemberContent{} -> SUseMemberSymbol
  UseModuleMembersContent{} -> SUseModuleMembersSymbol
  UnitExpressionContent{} -> SUnitExpressionSymbol
  VectorExpressionContent{} -> SVectorExpressionSymbol
  BorrowExpressionContent{} -> SBorrowExpressionSymbol
  DereferenceExpressionContent{} -> SDereferenceExpressionSymbol
  MoveOrCopyExpressionContent{} -> SMoveOrCopyExpressionSymbol
  UnaryExpressionContent{} -> SUnaryExpressionSymbol
  UnaryOpContent{} -> SUnaryOpSymbol
  AbortExpressionContent{} -> SAbortExpressionSymbol
  AssignExpressionContent{} -> SAssignExpressionSymbol
  BinaryExpressionContent{} -> SBinaryExpressionSymbol
  CastExpressionContent{} -> SCastExpressionSymbol
  IdentifiedExpressionContent{} -> SIdentifiedExpressionSymbol
  BlockIdentifierContent{} -> SBlockIdentifierSymbol
  LambdaExpressionContent{} -> SLambdaExpressionSymbol
  LambdaBindingsContent{} -> SLambdaBindingsSymbol
  LambdaBindingContent{} -> SLambdaBindingSymbol
  LoopExpressionContent{} -> SLoopExpressionSymbol
  QuantifierExpressionContent{} -> SQuantifierExpressionSymbol
  QuantifierBindingsContent{} -> SQuantifierBindingsSymbol
  QuantifierBindingContent{} -> SQuantifierBindingSymbol
  ReturnExpressionContent{} -> SReturnExpressionSymbol
  WhileExpressionContent{} -> SWhileExpressionSymbol
  BlockItemContent{} -> SBlockItemSymbol
  LetStatementContent{} -> SLetStatementSymbol
  MacroFunctionDefinitionContent{} -> SMacroFunctionDefinitionSymbol
  MacroSignatureContent{} -> SMacroSignatureSymbol
  NativeFunctionDefinitionContent{} -> SNativeFunctionDefinitionSymbol
  StructItemContent{} -> SStructItemSymbol
  NativeStructDefinitionContent{} -> SNativeStructDefinitionSymbol
  StructSignatureContent{} -> SStructSignatureSymbol
  StructDefinitionContent{} -> SStructDefinitionSymbol
  ConstantContent{} -> SConstantSymbol
  FriendDeclarationContent{} -> SFriendDeclarationSymbol
  FriendAccessContent{} -> SFriendAccessSymbol
  ErrorContent{} -> SErrorSymbol
  MissingContent{} -> SMissingSymbol
  SortMismatchContent{} -> SSortMismatchSymbol

nodeContentToNodeId ::
  forall (symbolType :: SymbolType) (symbol :: Symbol symbolType).
  IsReal symbolType ->
  NodeContent symbolType symbol ->
  NodeId
nodeContentToNodeId RegularIsReal = \case
  SourceFileContent nodeId _range _children -> nodeId
  ModuleDefinitionContent nodeId _range _children -> nodeId
  ModuleBodyContent nodeId _range _children -> nodeId
  EnumItemContent nodeId _range _children -> nodeId
  EnumDefinitionContent nodeId _range _children -> nodeId
  EnumSignatureContent nodeId _range _children -> nodeId
  EnumIdentifierContent nodeId _range _children -> nodeId
  IdentifierContent nodeId _range -> nodeId
  AbilityDeclsContent nodeId _range _children -> nodeId
  AbilityContent nodeId _range -> nodeId
  TypeParametersContent nodeId _range _children -> nodeId
  TypeParameterContent nodeId _range _children -> nodeId
  TypeParameterIdentifierContent nodeId _range _children -> nodeId
  EnumVariantsContent nodeId _range _children -> nodeId
  VariantContent nodeId _range _children -> nodeId
  VariantIdentifierContent nodeId _range _children -> nodeId
  DatatypeFieldsContent nodeId _range _children -> nodeId
  NamedFieldsContent nodeId _range _children -> nodeId
  FieldAnnotationContent nodeId _range _children -> nodeId
  FieldIdentifierContent nodeId _range _children -> nodeId
  TypeContent nodeId _range _children -> nodeId
  ApplyTypeContent nodeId _range _children -> nodeId
  ModuleAccessContent nodeId _range _children -> nodeId
  ModuleIdentifierContent nodeId _range _children -> nodeId
  ReservedIdentifierContent nodeId _range _children -> nodeId
  ExistsContent nodeId _range -> nodeId
  ForallContent nodeId _range -> nodeId
  ModuleIdentityContent nodeId _range _children -> nodeId
  NumLiteralContent nodeId _range -> nodeId
  TypeArgumentsContent nodeId _range _children -> nodeId
  FunctionTypeContent nodeId _range _children -> nodeId
  FunctionTypeParametersContent nodeId _range _children -> nodeId
  PrimitiveTypeContent nodeId _range -> nodeId
  RefTypeContent nodeId _range _children -> nodeId
  ReferenceContent nodeId _range _children -> nodeId
  ImmRefContent nodeId _range -> nodeId
  MutRefContent nodeId _range -> nodeId
  TupleTypeContent nodeId _range _children -> nodeId
  PositionalFieldsContent nodeId _range _children -> nodeId
  PostfixAbilityDeclsContent nodeId _range _children -> nodeId
  FunctionItemContent nodeId _range _children -> nodeId
  FunctionDefinitionContent nodeId _range _children -> nodeId
  FunctionSignatureContent nodeId _range _children -> nodeId
  FunctionIdentifierContent nodeId _range _children -> nodeId
  FunctionParametersContent nodeId _range _children -> nodeId
  FunctionParameterContent nodeId _range _children -> nodeId
  VariableIdentifierContent nodeId _range _children -> nodeId
  MutFunctionParameterContent nodeId _range _children -> nodeId
  ModifierContent nodeId _range -> nodeId
  RetTypeContent nodeId _range _children -> nodeId
  BlockContent nodeId _range _children -> nodeId
  ExpressionContent nodeId _range _children -> nodeId
  UnaryExpressionContent nodeId _range _children -> nodeId
  ExpressionTermContent nodeId _range _children -> nodeId
  LiteralValueContent nodeId _range _children -> nodeId
  AddressLiteralContent nodeId _range -> nodeId
  BoolLiteralContent nodeId _range -> nodeId
  ByteStringLiteralContent nodeId _range -> nodeId
  HexStringLiteralContent nodeId _range -> nodeId
  AnnotationExpressionContent nodeId _range _children -> nodeId
  BreakExpressionContent nodeId _range _children -> nodeId
  LabelContent nodeId _range _children -> nodeId
  CallExpressionContent nodeId _range _children -> nodeId
  ArgListContent nodeId _range _children -> nodeId
  NameExpressionContent nodeId _range _children -> nodeId
  ContinueExpressionContent nodeId _range _children -> nodeId
  DotExpressionContent nodeId _range _children -> nodeId
  ExpressionListContent nodeId _range _children -> nodeId
  IfExpressionContent nodeId _range _children -> nodeId
  IndexExpressionContent nodeId _range _children -> nodeId
  MacroCallExpressionContent nodeId _range _children -> nodeId
  MacroModuleAccessContent nodeId _range _children -> nodeId
  MatchExpressionContent nodeId _range _children -> nodeId
  MatchBodyContent nodeId _range _children -> nodeId
  MatchArmContent nodeId _range _children -> nodeId
  BindListContent nodeId _range _children -> nodeId
  BindContent nodeId _range _children -> nodeId
  AtBindContent nodeId _range _children -> nodeId
  BindUnpackContent nodeId _range _children -> nodeId
  BindFieldsContent nodeId _range _children -> nodeId
  BindNamedFieldsContent nodeId _range _children -> nodeId
  BindFieldContent nodeId _range _children -> nodeId
  SpreadOperatorContent nodeId _range -> nodeId
  MutBindFieldContent nodeId _range _children -> nodeId
  BindPositionalFieldsContent nodeId _range _children -> nodeId
  MutBindVarContent nodeId _range _children -> nodeId
  CommaBindListContent nodeId _range _children -> nodeId
  OrBindListContent nodeId _range _children -> nodeId
  MatchConditionContent nodeId _range _children -> nodeId
  PackExpressionContent nodeId _range _children -> nodeId
  FieldInitializeListContent nodeId _range _children -> nodeId
  ExpFieldContent nodeId _range _children -> nodeId
  SpecBlockContent nodeId _range _children -> nodeId
  IdentifierContent nodeId _range -> nodeId
  SpecBlockTargetSchemaContent nodeId _range _children -> nodeId
  StructIdentifierContent nodeId _range _children -> nodeId
  SpecFunctionContent nodeId _range _children -> nodeId
  NativeSpecFunctionContent nodeId _range _children -> nodeId
  SpecFunctionSignatureContent nodeId _range _children -> nodeId
  UninterpretedSpecFunctionContent nodeId _range _children -> nodeId
  UsualSpecFunctionContent nodeId _range _children -> nodeId
  SpecBodyContent nodeId _range _children -> nodeId
  SpecBlockMemeberContent nodeId _range _children -> nodeId
  SpecApplyContent nodeId _range _children -> nodeId
  SpecApplyPatternContent nodeId _range _children -> nodeId
  SpecApplyNamePatternContent nodeId _range -> nodeId
  SpecConditionContent nodeId _range _children -> nodeId
  SpecAbortIfContent nodeId _range _children -> nodeId
  ConditionPropertiesContent nodeId _range _children -> nodeId
  SpecPropertyContent nodeId _range _children -> nodeId
  SpecAbortWithOrModifiesContent nodeId _range _children -> nodeId
  SpecConditionContent nodeId _range _children -> nodeId
  SpecConditionKindContent nodeId _range -> nodeId
  SpecIncludeContent nodeId _range _children -> nodeId
  SpecInvariantContent nodeId _range _children -> nodeId
  SpecLetContent nodeId _range _children -> nodeId
  SpecPragmaContent nodeId _range _children -> nodeId
  SpecVariableContent nodeId _range _children -> nodeId
  UseDeclarationContent nodeId _range _children -> nodeId
  UseFunContent nodeId _range _children -> nodeId
  UseModuleContent nodeId _range _children -> nodeId
  UseModuleMemberContent nodeId _range _children -> nodeId
  UseMemberContent nodeId _range _children -> nodeId
  UseModuleMembersContent nodeId _range _children -> nodeId
  UnitExpressionContent nodeId _range -> nodeId
  VectorExpressionContent nodeId _range _children -> nodeId
  BorrowExpressionContent nodeId _range _children -> nodeId
  DereferenceExpressionContent nodeId _range _children -> nodeId
  MoveOrCopyExpressionContent nodeId _range _children -> nodeId
  UnaryExpressionContent nodeId _range _children -> nodeId
  UnaryOpContent nodeId _range -> nodeId
  AbortExpressionContent nodeId _range _children -> nodeId
  AssignExpressionContent nodeId _range _children -> nodeId
  BinaryExpressionContent nodeId _range _children -> nodeId
  CastExpressionContent nodeId _range _children -> nodeId
  IdentifiedExpressionContent nodeId _range _children -> nodeId
  BlockIdentifierContent nodeId _range _children -> nodeId
  LambdaExpressionContent nodeId _range _children -> nodeId
  LambdaBindingsContent nodeId _range _children -> nodeId
  LambdaBindingContent nodeId _range _children -> nodeId
  LoopExpressionContent nodeId _range _children -> nodeId
  QuantifierExpressionContent nodeId _range _children -> nodeId
  QuantifierBindingsContent nodeId _range _children -> nodeId
  QuantifierBindingContent nodeId _range _children -> nodeId
  ReturnExpressionContent nodeId _range _children -> nodeId
  WhileExpressionContent nodeId _range _children -> nodeId
  BlockItemContent nodeId _range _children -> nodeId
  LetStatementContent nodeId _range _children -> nodeId
  MacroFunctionDefinitionContent nodeId _range _children -> nodeId
  MacroSignatureContent nodeId _range _children -> nodeId
  NativeFunctionDefinitionContent nodeId _range _children -> nodeId
  StructItemContent nodeId _range _children -> nodeId
  NativeStructDefinitionContent nodeId _range _children -> nodeId
  StructSignatureContent nodeId _range _children -> nodeId
  StructDefinitionContent nodeId _range _children -> nodeId
  ConstantContent nodeId _range _children -> nodeId
  FriendDeclarationContent nodeId _range _children -> nodeId
  FriendAccessContent nodeId _range _children -> nodeId
nodeContentToNodeId AuxiliaryIsReal = \case
  ErrorContent nodeId _range _children -> nodeId
  MissingContent nodeId _range -> nodeId

nodeContentToRange ::
  forall (symbolType :: SymbolType) (symbol :: Symbol symbolType).
  IsReal symbolType ->
  NodeContent symbolType symbol ->
  Range
nodeContentToRange RegularIsReal = \case
  SourceFileContent _nodeId range _children -> range
  ModuleDefinitionContent _nodeId range _children -> range
  ModuleBodyContent _nodeId range _children -> range
  EnumItemContent _nodeId range _children -> range
  EnumDefinitionContent _nodeId range _children -> range
  EnumSignatureContent _nodeId range _children -> range
  EnumIdentifierContent _nodeId range _children -> range
  IdentifierContent _nodeId range -> range
  AbilityDeclsContent _nodeId range _children -> range
  AbilityContent _nodeId range -> range
  TypeParametersContent _nodeId range _children -> range
  TypeParameterContent _nodeId range _children -> range
  TypeParameterIdentifierContent _nodeId range _children -> range
  EnumVariantsContent _nodeId range _children -> range
  VariantContent _nodeId range _children -> range
  VariantIdentifierContent _nodeId range _children -> range
  DatatypeFieldsContent _nodeId range _children -> range
  NamedFieldsContent _nodeId range _children -> range
  FieldAnnotationContent _nodeId range _children -> range
  FieldIdentifierContent _nodeId range _children -> range
  TypeContent _nodeId range _children -> range
  ApplyTypeContent _nodeId range _children -> range
  ModuleAccessContent _nodeId range _children -> range
  ModuleIdentifierContent _nodeId range _children -> range
  ReservedIdentifierContent _nodeId range _children -> range
  ExistsContent _nodeId range -> range
  ForallContent _nodeId range -> range
  ModuleIdentityContent _nodeId range _children -> range
  NumLiteralContent _nodeId range -> range
  TypeArgumentsContent _nodeId range _children -> range
  FunctionTypeContent _nodeId range _children -> range
  FunctionTypeParametersContent _nodeId range _children -> range
  PrimitiveTypeContent _nodeId range -> range
  RefTypeContent _nodeId range _children -> range
  ReferenceContent _nodeId range _children -> range
  ImmRefContent _nodeId range -> range
  MutRefContent _nodeId range -> range
  TupleTypeContent _nodeId range _children -> range
  PositionalFieldsContent _nodeId range _children -> range
  PostfixAbilityDeclsContent _nodeId range _children -> range
  FunctionItemContent _nodeId range _children -> range
  FunctionDefinitionContent _nodeId range _children -> range
  FunctionSignatureContent _nodeId range _children -> range
  FunctionIdentifierContent _nodeId range _children -> range
  FunctionParametersContent _nodeId range _children -> range
  FunctionParameterContent _nodeId range _children -> range
  VariableIdentifierContent _nodeId range _children -> range
  MutFunctionParameterContent _nodeId range _children -> range
  ModifierContent _nodeId range -> range
  RetTypeContent _nodeId range _children -> range
  BlockContent _nodeId range _children -> range
  ExpressionContent _nodeId range _children -> range
  UnaryExpressionContent _nodeId range _children -> range
  ExpressionTermContent _nodeId range _children -> range
  LiteralValueContent _nodeId range _children -> range
  AddressLiteralContent _nodeId range -> range
  BoolLiteralContent _nodeId range -> range
  ByteStringLiteralContent _nodeId range -> range
  HexStringLiteralContent _nodeId range -> range
  AnnotationExpressionContent _nodeId range _children -> range
  BreakExpressionContent _nodeId range _children -> range
  LabelContent _nodeId range _children -> range
  CallExpressionContent _nodeId range _children -> range
  ArgListContent _nodeId range _children -> range
  NameExpressionContent _nodeId range _children -> range
  ContinueExpressionContent _nodeId range _children -> range
  DotExpressionContent _nodeId range _children -> range
  ExpressionListContent _nodeId range _children -> range
  IfExpressionContent _nodeId range _children -> range
  IndexExpressionContent _nodeId range _children -> range
  MacroCallExpressionContent _nodeId range _children -> range
  MacroModuleAccessContent _nodeId range _children -> range
  MatchExpressionContent _nodeId range _children -> range
  MatchBodyContent _nodeId range _children -> range
  MatchArmContent _nodeId range _children -> range
  BindListContent _nodeId range _children -> range
  BindContent _nodeId range _children -> range
  AtBindContent _nodeId range _children -> range
  BindUnpackContent _nodeId range _children -> range
  BindFieldsContent _nodeId range _children -> range
  BindNamedFieldsContent _nodeId range _children -> range
  BindFieldContent _nodeId range _children -> range
  SpreadOperatorContent _nodeId range -> range
  MutBindFieldContent _nodeId range _children -> range
  BindPositionalFieldsContent _nodeId range _children -> range
  MutBindVarContent _nodeId range _children -> range
  CommaBindListContent _nodeId range _children -> range
  OrBindListContent _nodeId range _children -> range
  MatchConditionContent _nodeId range _children -> range
  PackExpressionContent _nodeId range _children -> range
  FieldInitializeListContent _nodeId range _children -> range
  ExpFieldContent _nodeId range _children -> range
  SpecBlockContent _nodeId range _children -> range
  IdentifierContent _nodeId range -> range
  SpecBlockTargetSchemaContent _nodeId range _children -> range
  StructIdentifierContent _nodeId range _children -> range
  SpecFunctionContent _nodeId range _children -> range
  NativeSpecFunctionContent _nodeId range _children -> range
  SpecFunctionSignatureContent _nodeId range _children -> range
  UninterpretedSpecFunctionContent _nodeId range _children -> range
  UsualSpecFunctionContent _nodeId range _children -> range
  SpecBodyContent _nodeId range _children -> range
  SpecBlockMemeberContent _nodeId range _children -> range
  SpecApplyContent _nodeId range _children -> range
  SpecApplyPatternContent _nodeId range _children -> range
  SpecApplyNamePatternContent _nodeId range -> range
  SpecConditionContent _nodeId range _children -> range
  SpecAbortIfContent _nodeId range _children -> range
  ConditionPropertiesContent _nodeId range _children -> range
  SpecPropertyContent _nodeId range _children -> range
  SpecAbortWithOrModifiesContent _nodeId range _children -> range
  SpecConditionContent _nodeId range _children -> range
  SpecConditionKindContent _nodeId range -> range
  SpecIncludeContent _nodeId range _children -> range
  SpecInvariantContent _nodeId range _children -> range
  SpecLetContent _nodeId range _children -> range
  SpecPragmaContent _nodeId range _children -> range
  SpecVariableContent _nodeId range _children -> range
  UseDeclarationContent _nodeId range _children -> range
  UseFunContent _nodeId range _children -> range
  UseModuleContent _nodeId range _children -> range
  UseModuleMemberContent _nodeId range _children -> range
  UseMemberContent _nodeId range _children -> range
  UseModuleMembersContent _nodeId range _children -> range
  UnitExpressionContent _nodeId range -> range
  VectorExpressionContent _nodeId range _children -> range
  BorrowExpressionContent _nodeId range _children -> range
  DereferenceExpressionContent _nodeId range _children -> range
  MoveOrCopyExpressionContent _nodeId range _children -> range
  UnaryExpressionContent _nodeId range _children -> range
  UnaryOpContent _nodeId range -> range
  AbortExpressionContent _nodeId range _children -> range
  AssignExpressionContent _nodeId range _children -> range
  BinaryExpressionContent _nodeId range _children -> range
  CastExpressionContent _nodeId range _children -> range
  IdentifiedExpressionContent _nodeId range _children -> range
  BlockIdentifierContent _nodeId range _children -> range
  LambdaExpressionContent _nodeId range _children -> range
  LambdaBindingsContent _nodeId range _children -> range
  LambdaBindingContent _nodeId range _children -> range
  LoopExpressionContent _nodeId range _children -> range
  QuantifierExpressionContent _nodeId range _children -> range
  QuantifierBindingsContent _nodeId range _children -> range
  QuantifierBindingContent _nodeId range _children -> range
  ReturnExpressionContent _nodeId range _children -> range
  WhileExpressionContent _nodeId range _children -> range
  BlockItemContent _nodeId range _children -> range
  LetStatementContent _nodeId range _children -> range
  MacroFunctionDefinitionContent _nodeId range _children -> range
  MacroSignatureContent _nodeId range _children -> range
  NativeFunctionDefinitionContent _nodeId range _children -> range
  StructItemContent _nodeId range _children -> range
  NativeStructDefinitionContent _nodeId range _children -> range
  StructSignatureContent _nodeId range _children -> range
  StructDefinitionContent _nodeId range _children -> range
  ConstantContent _nodeId range _children -> range
  FriendDeclarationContent _nodeId range _children -> range
  FriendAccessContent _nodeId range _children -> range
nodeContentToRange AuxiliaryIsReal = \case
  ErrorContent _nodeId range _children -> range
  MissingContent _nodeId range -> range

--------------------------------------------------------------------------------
-- Node Children as Heterogeneous Lists
--------------------------------------------------------------------------------

data ChildList (as :: [Type]) :: Type where
  Nil :: ChildList '[]
  Cons :: !a -> !(ChildList as) -> ChildList (a ': as)

deriving instance Eq (ChildList '[])

deriving instance Show (ChildList '[])

deriving instance (Eq a, Eq (ChildList as)) => Eq (ChildList (a ': as))

deriving instance (Show a, Show (ChildList as)) => Show (ChildList (a ': as))

newtype Children as = Children (ChildList as)

deriving instance (Eq (ChildList as)) => Eq (Children as)

deriving instance (Show (ChildList as)) => Show (Children as)

--------------------------------------------------------------------------------
-- Check Sort
--------------------------------------------------------------------------------

checkSort ::
  SortSing sort ->
  SomeNode ->
  Maybe (Node sort)
checkSort sort (SomeNode _isReal content) = do
  let symbol = nodeContentToSymbol content
  let symbolType = symbolToSymbolType symbol
  case symbolType of
    SRegular ->
      case decSortSing sort (symbolToSort symbol) of
        Just Refl -> pure $ Node (RegularWellSorted Refl) content
        Nothing -> Nothing
    SAuxiliary -> pure $ Node AuxiliaryWellSorted content

--------------------------------------------------------------------------------
-- Difference Lists
--------------------------------------------------------------------------------

newtype DList a = DList ([a] -> [a])

instance Semigroup (DList a) where
  (<>) :: DList a -> DList a -> DList a
  DList xs <> DList ys = DList (xs . ys)

instance Monoid (DList a) where
  mempty :: DList a
  mempty = DList id

instance Functor DList where
  fmap :: (a -> b) -> DList a -> DList b
  fmap f = foldMap (singleton . f)

instance Foldable DList where
  foldMap :: (Monoid m) => (a -> m) -> DList a -> m
  foldMap f = foldMap f . toList

singleton :: a -> DList a
singleton x = DList (x :)

toList :: DList a -> [a]
toList (DList xs) = xs []

--------------------------------------------------------------------------------
-- Node Children as Lists
--------------------------------------------------------------------------------

{-# SPECIALIZE getChildren :: Node sort -> [SomeNode] #-}
{-# SPECIALIZE getChildren :: SomeNode -> [SomeNode] #-}
getChildren :: (HasNodes a) => a -> [SomeNode]
getChildren = toList . foldMap getNodesDList . getNodesDList

{-# SPECIALIZE getNodes :: Node sort -> [SomeNode] #-}
{-# SPECIALIZE getNodes :: SomeNode -> [SomeNode] #-}
getNodes :: (HasNodes a) => a -> [SomeNode]
getNodes = toList . getNodesDList

class HasNodes a where
  getNodesDList :: a -> DList SomeNode

instance HasNodes (ChildList '[]) where
  getNodesDList :: ChildList '[] -> DList SomeNode
  getNodesDList Nil = mempty

instance (HasNodes a, HasNodes (ChildList as)) => HasNodes (ChildList (a ': as)) where
  getNodesDList :: ChildList (a ': as) -> DList SomeNode
  getNodesDList (Cons x xs) = getNodesDList x <> getNodesDList xs

instance (HasNodes (ChildList as)) => HasNodes (Children as) where
  getNodesDList :: Children as -> DList SomeNode
  getNodesDList (Children xs) = getNodesDList xs

instance HasNodes () where
  getNodesDList :: () -> DList SomeNode
  getNodesDList () = mempty

instance (HasNodes a, HasNodes b) => HasNodes (a, b) where
  getNodesDList :: (a, b) -> DList SomeNode
  getNodesDList (x, y) = getNodesDList x <> getNodesDList y

instance (HasNodes a, HasNodes b) => HasNodes (Either a b) where
  getNodesDList :: Either a b -> DList SomeNode
  getNodesDList = either getNodesDList getNodesDList

instance (Foldable t, HasNodes a) => HasNodes (t a) where
  getNodesDList :: t a -> DList SomeNode
  getNodesDList = foldMap getNodesDList

instance HasNodes (Node sort) where
  getNodesDList :: Node sort -> DList SomeNode
  getNodesDList = getNodesDList . nodeToSomeNode

instance HasNodes SomeNode where
  getNodesDList :: SomeNode -> DList SomeNode
  getNodesDList = singleton

instance HasNodes (NodeContent symbolType symbol) where
  getNodesDList :: NodeContent symbolType symbol -> DList SomeNode
  getNodesDList = \case
    SourceFileContent _nodeId _range _children -> getNodesDList _children
    ModuleDefinitionContent _nodeId _range _children -> getNodesDList _children
    ModuleBodyContent _nodeId _range _children -> getNodesDList _children
    EnumItemContent _nodeId _range _children -> getNodesDList _children
    EnumDefinitionContent _nodeId _range _children -> getNodesDList _children
    EnumSignatureContent _nodeId _range _children -> getNodesDList _children
    EnumIdentifierContent _nodeId _range _children -> getNodesDList _children
    IdentifierContent _nodeId _range -> mempty
    AbilityDeclsContent _nodeId _range _children -> getNodesDList _children
    AbilityContent _nodeId _range -> mempty
    TypeParametersContent _nodeId _range _children -> getNodesDList _children
    TypeParameterContent _nodeId _range _children -> getNodesDList _children
    TypeParameterIdentifierContent _nodeId _range _children -> getNodesDList _children
    EnumVariantsContent _nodeId _range _children -> getNodesDList _children
    VariantContent _nodeId _range _children -> getNodesDList _children
    VariantIdentifierContent _nodeId _range _children -> getNodesDList _children
    DatatypeFieldsContent _nodeId _range _children -> getNodesDList _children
    NamedFieldsContent _nodeId _range _children -> getNodesDList _children
    FieldAnnotationContent _nodeId _range _children -> getNodesDList _children
    FieldIdentifierContent _nodeId _range _children -> getNodesDList _children
    TypeContent _nodeId _range _children -> getNodesDList _children
    ApplyTypeContent _nodeId _range _children -> getNodesDList _children
    ModuleAccessContent _nodeId _range _children -> getNodesDList _children
    ModuleIdentifierContent _nodeId _range _children -> getNodesDList _children
    ReservedIdentifierContent _nodeId _range _children -> getNodesDList _children
    ExistsContent _nodeId _range -> mempty
    ForallContent _nodeId _range -> mempty
    ModuleIdentityContent _nodeId _range _children -> getNodesDList _children
    NumLiteralContent _nodeId _range -> mempty
    TypeArgumentsContent _nodeId _range _children -> getNodesDList _children
    FunctionTypeContent _nodeId _range _children -> getNodesDList _children
    FunctionTypeParametersContent _nodeId _range _children -> getNodesDList _children
    PrimitiveTypeContent _nodeId _range -> mempty
    RefTypeContent _nodeId _range _children -> getNodesDList _children
    ReferenceContent _nodeId _range _children -> getNodesDList _children
    ImmRefContent _nodeId _range -> mempty
    MutRefContent _nodeId _range -> mempty
    TupleTypeContent _nodeId _range _children -> getNodesDList _children
    PositionalFieldsContent _nodeId _range _children -> getNodesDList _children
    PostfixAbilityDeclsContent _nodeId _range _children -> getNodesDList _children
    FunctionItemContent _nodeId _range _children -> getNodesDList _children
    FunctionDefinitionContent _nodeId _range _children -> getNodesDList _children
    FunctionSignatureContent _nodeId _range _children -> getNodesDList _children
    FunctionIdentifierContent _nodeId _range _children -> getNodesDList _children
    FunctionParametersContent _nodeId _range _children -> getNodesDList _children
    FunctionParameterContent _nodeId _range _children -> getNodesDList _children
    VariableIdentifierContent _nodeId _range _children -> getNodesDList _children
    MutFunctionParameterContent _nodeId _range _children -> getNodesDList _children
    ModifierContent _nodeId _range -> mempty
    RetTypeContent _nodeId _range _children -> getNodesDList _children
    BlockContent _nodeId _range _children -> getNodesDList _children
    ExpressionContent _nodeId _range _children -> getNodesDList _children
    UnaryExpressionContent _nodeId _range _children -> getNodesDList _children
    ExpressionTermContent _nodeId _range _children -> getNodesDList _children
    LiteralValueContent _nodeId _range _children -> getNodesDList _children
    AddressLiteralContent _nodeId _range -> mempty
    BoolLiteralContent _nodeId _range -> mempty
    ByteStringLiteralContent _nodeId _range -> mempty
    HexStringLiteralContent _nodeId _range -> mempty
    AnnotationExpressionContent _nodeId _range _children -> getNodesDList _children
    BreakExpressionContent _nodeId _range _children -> getNodesDList _children
    LabelContent _nodeId _range _children -> getNodesDList _children
    CallExpressionContent _nodeId _range _children -> getNodesDList _children
    ArgListContent _nodeId _range _children -> getNodesDList _children
    NameExpressionContent _nodeId _range _children -> getNodesDList _children
    ContinueExpressionContent _nodeId _range _children -> getNodesDList _children
    DotExpressionContent _nodeId _range _children -> getNodesDList _children
    ExpressionListContent _nodeId _range _children -> getNodesDList _children
    IfExpressionContent _nodeId _range _children -> getNodesDList _children
    IndexExpressionContent _nodeId _range _children -> getNodesDList _children
    MacroCallExpressionContent _nodeId _range _children -> getNodesDList _children
    MacroModuleAccessContent _nodeId _range _children -> getNodesDList _children
    MatchExpressionContent _nodeId _range _children -> getNodesDList _children
    MatchBodyContent _nodeId _range _children -> getNodesDList _children
    MatchArmContent _nodeId _range _children -> getNodesDList _children
    BindListContent _nodeId _range _children -> getNodesDList _children
    BindContent _nodeId _range _children -> getNodesDList _children
    AtBindContent _nodeId _range _children -> getNodesDList _children
    BindUnpackContent _nodeId _range _children -> getNodesDList _children
    BindFieldsContent _nodeId _range _children -> getNodesDList _children
    BindNamedFieldsContent _nodeId _range _children -> getNodesDList _children
    BindFieldContent _nodeId _range _children -> getNodesDList _children
    SpreadOperatorContent _nodeId _range -> mempty
    MutBindFieldContent _nodeId _range _children -> getNodesDList _children
    BindPositionalFieldsContent _nodeId _range _children -> getNodesDList _children
    MutBindVarContent _nodeId _range _children -> getNodesDList _children
    CommaBindListContent _nodeId _range _children -> getNodesDList _children
    OrBindListContent _nodeId _range _children -> getNodesDList _children
    MatchConditionContent _nodeId _range _children -> getNodesDList _children
    PackExpressionContent _nodeId _range _children -> getNodesDList _children
    FieldInitializeListContent _nodeId _range _children -> getNodesDList _children
    ExpFieldContent _nodeId _range _children -> getNodesDList _children
    SpecBlockContent _nodeId _range _children -> getNodesDList _children
    IdentifierContent _nodeId _range -> mempty
    SpecBlockTargetSchemaContent _nodeId _range _children -> getNodesDList _children
    StructIdentifierContent _nodeId _range _children -> getNodesDList _children
    SpecFunctionContent _nodeId _range _children -> getNodesDList _children
    NativeSpecFunctionContent _nodeId _range _children -> getNodesDList _children
    SpecFunctionSignatureContent _nodeId _range _children -> getNodesDList _children
    UninterpretedSpecFunctionContent _nodeId _range _children -> getNodesDList _children
    UsualSpecFunctionContent _nodeId _range _children -> getNodesDList _children
    SpecBodyContent _nodeId _range _children -> getNodesDList _children
    SpecBlockMemeberContent _nodeId _range _children -> getNodesDList _children
    SpecApplyContent _nodeId _range _children -> getNodesDList _children
    SpecApplyPatternContent _nodeId _range _children -> getNodesDList _children
    SpecApplyNamePatternContent _nodeId _range -> mempty
    SpecConditionContent _nodeId _range _children -> getNodesDList _children
    SpecAbortIfContent _nodeId _range _children -> getNodesDList _children
    ConditionPropertiesContent _nodeId _range _children -> getNodesDList _children
    SpecPropertyContent _nodeId _range _children -> getNodesDList _children
    SpecAbortWithOrModifiesContent _nodeId _range _children -> getNodesDList _children
    SpecConditionContent _nodeId _range _children -> getNodesDList _children
    SpecConditionKindContent _nodeId _range -> mempty
    SpecIncludeContent _nodeId _range _children -> getNodesDList _children
    SpecInvariantContent _nodeId _range _children -> getNodesDList _children
    SpecLetContent _nodeId _range _children -> getNodesDList _children
    SpecPragmaContent _nodeId _range _children -> getNodesDList _children
    SpecVariableContent _nodeId _range _children -> getNodesDList _children
    UseDeclarationContent _nodeId _range _children -> getNodesDList _children
    UseFunContent _nodeId _range _children -> getNodesDList _children
    UseModuleContent _nodeId _range _children -> getNodesDList _children
    UseModuleMemberContent _nodeId _range _children -> getNodesDList _children
    UseMemberContent _nodeId _range _children -> getNodesDList _children
    UseModuleMembersContent _nodeId _range _children -> getNodesDList _children
    UnitExpressionContent _nodeId _range -> mempty
    VectorExpressionContent _nodeId _range _children -> getNodesDList _children
    BorrowExpressionContent _nodeId _range _children -> getNodesDList _children
    DereferenceExpressionContent _nodeId _range _children -> getNodesDList _children
    MoveOrCopyExpressionContent _nodeId _range _children -> getNodesDList _children
    UnaryExpressionContent _nodeId _range _children -> getNodesDList _children
    UnaryOpContent _nodeId _range -> mempty
    AbortExpressionContent _nodeId _range _children -> getNodesDList _children
    AssignExpressionContent _nodeId _range _children -> getNodesDList _children
    BinaryExpressionContent _nodeId _range _children -> getNodesDList _children
    CastExpressionContent _nodeId _range _children -> getNodesDList _children
    IdentifiedExpressionContent _nodeId _range _children -> getNodesDList _children
    BlockIdentifierContent _nodeId _range _children -> getNodesDList _children
    LambdaExpressionContent _nodeId _range _children -> getNodesDList _children
    LambdaBindingsContent _nodeId _range _children -> getNodesDList _children
    LambdaBindingContent _nodeId _range _children -> getNodesDList _children
    LoopExpressionContent _nodeId _range _children -> getNodesDList _children
    QuantifierExpressionContent _nodeId _range _children -> getNodesDList _children
    QuantifierBindingsContent _nodeId _range _children -> getNodesDList _children
    QuantifierBindingContent _nodeId _range _children -> getNodesDList _children
    ReturnExpressionContent _nodeId _range _children -> getNodesDList _children
    WhileExpressionContent _nodeId _range _children -> getNodesDList _children
    BlockItemContent _nodeId _range _children -> getNodesDList _children
    LetStatementContent _nodeId _range _children -> getNodesDList _children
    MacroFunctionDefinitionContent _nodeId _range _children -> getNodesDList _children
    MacroSignatureContent _nodeId _range _children -> getNodesDList _children
    NativeFunctionDefinitionContent _nodeId _range _children -> getNodesDList _children
    StructItemContent _nodeId _range _children -> getNodesDList _children
    NativeStructDefinitionContent _nodeId _range _children -> getNodesDList _children
    StructSignatureContent _nodeId _range _children -> getNodesDList _children
    StructDefinitionContent _nodeId _range _children -> getNodesDList _children
    ConstantContent _nodeId _range _children -> getNodesDList _children
    FriendDeclarationContent _nodeId _range _children -> getNodesDList _children
    FriendAccessContent _nodeId _range _children -> getNodesDList _children
    ErrorContent _nodeId _range _children -> getNodesDList _children
    MissingContent _nodeId _range -> mempty
    SortMismatchContent _children -> getNodesDList _children

--------------------------------------------------------------------------------
-- Pattern Synonyms
--------------------------------------------------------------------------------

pattern SourceFile :: () => (sort ~ SourceFileSort) => NodeId -> Range -> [Node ModuleDefinitionSort] -> Node sort
pattern SourceFile nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (SourceFileContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern ModuleDefinition :: () => (sort ~ ModuleDefinitionSort) => NodeId -> Range -> Node ModuleIdentitySort -> Node ModuleBodySort -> Node sort
pattern ModuleDefinition nodeId range nodeChild0 nodeChild1 =
  Node (RegularWellSorted Refl) (ModuleDefinitionContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 Nil))))

pattern ModuleBody :: () => (sort ~ ModuleBodySort) => NodeId -> Range -> [Either (Node FriendDeclarationSort) (Either (Node ConstantSort) (Either (Node FunctionItemSort) (Either (Node StructItemSort) (Either (Node EnumItemSort) (Either (Node SpecBlockSort) (Node UseDeclarationSort))))))] -> Node sort
pattern ModuleBody nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (ModuleBodyContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern EnumItem :: () => (sort ~ EnumItemSort) => NodeId -> Range -> Node EnumDefinitionSort -> Node sort
pattern EnumItem nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (EnumItemContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern EnumDefinition :: () => (sort ~ EnumDefinitionSort) => NodeId -> Range -> Node EnumSignatureSort -> Node EnumVariantsSort -> Maybe (Node PostfixAbilityDeclsSort) -> Node sort
pattern EnumDefinition nodeId range nodeChild0 nodeChild1 nodeChild2 =
  Node (RegularWellSorted Refl) (EnumDefinitionContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 (Cons nodeChild2 Nil)))))

pattern EnumSignature :: () => (sort ~ EnumSignatureSort) => NodeId -> Range -> Node EnumIdentifierSort -> Maybe (Node TypeParametersSort) -> Maybe (Node AbilityDeclsSort) -> Node sort
pattern EnumSignature nodeId range nodeChild0 nodeChild1 nodeChild2 =
  Node (RegularWellSorted Refl) (EnumSignatureContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 (Cons nodeChild2 Nil)))))

pattern EnumIdentifier :: () => (sort ~ EnumIdentifierSort) => NodeId -> Range -> Node IdentifierSort -> Node sort
pattern EnumIdentifier nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (EnumIdentifierContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern Identifier :: () => (sort ~ IdentifierSort) => NodeId -> Range -> Node sort
pattern Identifier nodeId range =
  Node (RegularWellSorted Refl) (IdentifierContent nodeId range)

pattern AbilityDecls :: () => (sort ~ AbilityDeclsSort) => NodeId -> Range -> (Maybe (Node AbilitySort), [Node AbilitySort]) -> Node sort
pattern AbilityDecls nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (AbilityDeclsContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern Ability :: () => (sort ~ AbilitySort) => NodeId -> Range -> Node sort
pattern Ability nodeId range =
  Node (RegularWellSorted Refl) (AbilityContent nodeId range)

pattern TypeParameters :: () => (sort ~ TypeParametersSort) => NodeId -> Range -> ([Node TypeParameterSort], Node TypeParameterSort) -> Node sort
pattern TypeParameters nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (TypeParametersContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern TypeParameter :: () => (sort ~ TypeParameterSort) => NodeId -> Range -> Node TypeParameterIdentifierSort -> Maybe ([Node AbilitySort], Node AbilitySort) -> Node sort
pattern TypeParameter nodeId range nodeChild0 nodeChild1 =
  Node (RegularWellSorted Refl) (TypeParameterContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 Nil))))

pattern TypeParameterIdentifier :: () => (sort ~ TypeParameterIdentifierSort) => NodeId -> Range -> Node IdentifierSort -> Node sort
pattern TypeParameterIdentifier nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (TypeParameterIdentifierContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern EnumVariants :: () => (sort ~ EnumVariantsSort) => NodeId -> Range -> (Maybe (Node VariantSort), [Node VariantSort]) -> Node sort
pattern EnumVariants nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (EnumVariantsContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern Variant :: () => (sort ~ VariantSort) => NodeId -> Range -> Node VariantIdentifierSort -> Maybe (Node DatatypeFieldsSort) -> Node sort
pattern Variant nodeId range nodeChild0 nodeChild1 =
  Node (RegularWellSorted Refl) (VariantContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 Nil))))

pattern VariantIdentifier :: () => (sort ~ VariantIdentifierSort) => NodeId -> Range -> Node IdentifierSort -> Node sort
pattern VariantIdentifier nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (VariantIdentifierContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern DatatypeFields :: () => (sort ~ DatatypeFieldsSort) => NodeId -> Range -> Either (Node NamedFieldsSort) (Node PositionalFieldsSort) -> Node sort
pattern DatatypeFields nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (DatatypeFieldsContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern NamedFields :: () => (sort ~ NamedFieldsSort) => NodeId -> Range -> (Maybe (Node FieldAnnotationSort), [Node FieldAnnotationSort]) -> Node sort
pattern NamedFields nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (NamedFieldsContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern FieldAnnotation :: () => (sort ~ FieldAnnotationSort) => NodeId -> Range -> Node FieldIdentifierSort -> Node TypeSort -> Node sort
pattern FieldAnnotation nodeId range nodeChild0 nodeChild1 =
  Node (RegularWellSorted Refl) (FieldAnnotationContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 Nil))))

pattern FieldIdentifier :: () => (sort ~ FieldIdentifierSort) => NodeId -> Range -> Node IdentifierSort -> Node sort
pattern FieldIdentifier nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (FieldIdentifierContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern Type :: () => (sort ~ TypeSort) => NodeId -> Range -> Either (Node RefTypeSort) (Either (Node TupleTypeSort) (Either (Node FunctionTypeSort) (Either (Node PrimitiveTypeSort) (Node ApplyTypeSort)))) -> Node sort
pattern Type nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (TypeContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern ApplyType :: () => (sort ~ ApplyTypeSort) => NodeId -> Range -> (Maybe (Node TypeArgumentsSort), Node ModuleAccessSort) -> Node sort
pattern ApplyType nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (ApplyTypeContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern ModuleAccess :: () => (sort ~ ModuleAccessSort) => NodeId -> Range -> Either (Node IdentifierSort) (Either (Node ReservedIdentifierSort) (Either (Maybe (Node TypeArgumentsSort), Node IdentifierSort) (Either (Maybe (Node TypeArgumentsSort), (Node IdentifierSort, Node ModuleIdentifierSort)) (Either (Node IdentifierSort, (Node TypeArgumentsSort, Node ModuleIdentitySort)) (Either (Maybe (Node TypeArgumentsSort), Node ModuleIdentitySort) (Either (Maybe (Node TypeArgumentsSort), (Node IdentifierSort, Node ModuleIdentitySort)) (Either (Node IdentifierSort, (Maybe (Node TypeArgumentsSort), (Node IdentifierSort, Node ModuleIdentitySort))) (Node IdentifierSort)))))))) -> Node sort
pattern ModuleAccess nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (ModuleAccessContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern ModuleIdentifier :: () => (sort ~ ModuleIdentifierSort) => NodeId -> Range -> Node IdentifierSort -> Node sort
pattern ModuleIdentifier nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (ModuleIdentifierContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern ReservedIdentifier :: () => (sort ~ ReservedIdentifierSort) => NodeId -> Range -> Either (Node ExistsSort) (Node ForallSort) -> Node sort
pattern ReservedIdentifier nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (ReservedIdentifierContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern Exists :: () => (sort ~ ExistsSort) => NodeId -> Range -> Node sort
pattern Exists nodeId range =
  Node (RegularWellSorted Refl) (ExistsContent nodeId range)

pattern Forall :: () => (sort ~ ForallSort) => NodeId -> Range -> Node sort
pattern Forall nodeId range =
  Node (RegularWellSorted Refl) (ForallContent nodeId range)

pattern ModuleIdentity :: () => (sort ~ ModuleIdentitySort) => NodeId -> Range -> Either (Node ModuleIdentifierSort) (Node NumLiteralSort) -> Node ModuleIdentifierSort -> Node sort
pattern ModuleIdentity nodeId range nodeChild0 nodeChild1 =
  Node (RegularWellSorted Refl) (ModuleIdentityContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 Nil))))

pattern NumLiteral :: () => (sort ~ NumLiteralSort) => NodeId -> Range -> Node sort
pattern NumLiteral nodeId range =
  Node (RegularWellSorted Refl) (NumLiteralContent nodeId range)

pattern TypeArguments :: () => (sort ~ TypeArgumentsSort) => NodeId -> Range -> ([Node TypeSort], Node TypeSort) -> Node sort
pattern TypeArguments nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (TypeArgumentsContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern FunctionType :: () => (sort ~ FunctionTypeSort) => NodeId -> Range -> Node FunctionTypeParametersSort -> Maybe (Node TypeSort) -> Node sort
pattern FunctionType nodeId range nodeChild0 nodeChild1 =
  Node (RegularWellSorted Refl) (FunctionTypeContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 Nil))))

pattern FunctionTypeParameters :: () => (sort ~ FunctionTypeParametersSort) => NodeId -> Range -> (Maybe (Node TypeSort), [Node TypeSort]) -> Node sort
pattern FunctionTypeParameters nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (FunctionTypeParametersContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern PrimitiveType :: () => (sort ~ PrimitiveTypeSort) => NodeId -> Range -> Node sort
pattern PrimitiveType nodeId range =
  Node (RegularWellSorted Refl) (PrimitiveTypeContent nodeId range)

pattern RefType :: () => (sort ~ RefTypeSort) => NodeId -> Range -> Node ReferenceSort -> Node TypeSort -> Node sort
pattern RefType nodeId range nodeChild0 nodeChild1 =
  Node (RegularWellSorted Refl) (RefTypeContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 Nil))))

pattern Reference :: () => (sort ~ ReferenceSort) => NodeId -> Range -> Either (Node MutRefSort) (Node ImmRefSort) -> Node sort
pattern Reference nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (ReferenceContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern ImmRef :: () => (sort ~ ImmRefSort) => NodeId -> Range -> Node sort
pattern ImmRef nodeId range =
  Node (RegularWellSorted Refl) (ImmRefContent nodeId range)

pattern MutRef :: () => (sort ~ MutRefSort) => NodeId -> Range -> Node sort
pattern MutRef nodeId range =
  Node (RegularWellSorted Refl) (MutRefContent nodeId range)

pattern TupleType :: () => (sort ~ TupleTypeSort) => NodeId -> Range -> (Maybe (Node TypeSort), [Node TypeSort]) -> Node sort
pattern TupleType nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (TupleTypeContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern PositionalFields :: () => (sort ~ PositionalFieldsSort) => NodeId -> Range -> (Maybe (Node TypeSort), [Node TypeSort]) -> Node sort
pattern PositionalFields nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (PositionalFieldsContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern PostfixAbilityDecls :: () => (sort ~ PostfixAbilityDeclsSort) => NodeId -> Range -> (Maybe (Node AbilitySort), [Node AbilitySort]) -> Node sort
pattern PostfixAbilityDecls nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (PostfixAbilityDeclsContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern FunctionItem :: () => (sort ~ FunctionItemSort) => NodeId -> Range -> Either (Node MacroFunctionDefinitionSort) (Either (Node FunctionDefinitionSort) (Node NativeFunctionDefinitionSort)) -> Node sort
pattern FunctionItem nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (FunctionItemContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern FunctionDefinition :: () => (sort ~ FunctionDefinitionSort) => NodeId -> Range -> Node FunctionSignatureSort -> Node BlockSort -> Node sort
pattern FunctionDefinition nodeId range nodeChild0 nodeChild1 =
  Node (RegularWellSorted Refl) (FunctionDefinitionContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 Nil))))

pattern FunctionSignature :: () => (sort ~ FunctionSignatureSort) => NodeId -> Range -> Maybe (Node ModifierSort) -> Maybe (Node ModifierSort) -> Maybe (Node ModifierSort) -> Node FunctionIdentifierSort -> Maybe (Node TypeParametersSort) -> Node FunctionParametersSort -> Maybe (Node RetTypeSort) -> Node sort
pattern FunctionSignature nodeId range nodeChild0 nodeChild1 nodeChild2 nodeChild3 nodeChild4 nodeChild5 nodeChild6 =
  Node (RegularWellSorted Refl) (FunctionSignatureContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 (Cons nodeChild2 (Cons nodeChild3 (Cons nodeChild4 (Cons nodeChild5 (Cons nodeChild6 Nil)))))))))

pattern FunctionIdentifier :: () => (sort ~ FunctionIdentifierSort) => NodeId -> Range -> Node IdentifierSort -> Node sort
pattern FunctionIdentifier nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (FunctionIdentifierContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern FunctionParameters :: () => (sort ~ FunctionParametersSort) => NodeId -> Range -> (Maybe (Either (Node FunctionParameterSort) (Node MutFunctionParameterSort)), [Either (Node FunctionParameterSort) (Node MutFunctionParameterSort)]) -> Node sort
pattern FunctionParameters nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (FunctionParametersContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern FunctionParameter :: () => (sort ~ FunctionParameterSort) => NodeId -> Range -> Either (Node VariableIdentifierSort) (Node VariableIdentifierSort) -> Node TypeSort -> Node sort
pattern FunctionParameter nodeId range nodeChild0 nodeChild1 =
  Node (RegularWellSorted Refl) (FunctionParameterContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 Nil))))

pattern VariableIdentifier :: () => (sort ~ VariableIdentifierSort) => NodeId -> Range -> Node IdentifierSort -> Node sort
pattern VariableIdentifier nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (VariableIdentifierContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern MutFunctionParameter :: () => (sort ~ MutFunctionParameterSort) => NodeId -> Range -> Node FunctionParameterSort -> Node sort
pattern MutFunctionParameter nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (MutFunctionParameterContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern Modifier :: () => (sort ~ ModifierSort) => NodeId -> Range -> Node sort
pattern Modifier nodeId range =
  Node (RegularWellSorted Refl) (ModifierContent nodeId range)

pattern RetType :: () => (sort ~ RetTypeSort) => NodeId -> Range -> Node TypeSort -> Node sort
pattern RetType nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (RetTypeContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern Block :: () => (sort ~ BlockSort) => NodeId -> Range -> [Node UseDeclarationSort] -> [Node BlockItemSort] -> Maybe (Node ExpressionSort) -> Node sort
pattern Block nodeId range nodeChild0 nodeChild1 nodeChild2 =
  Node (RegularWellSorted Refl) (BlockContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 (Cons nodeChild2 Nil)))))

pattern Expression :: () => (sort ~ ExpressionSort) => NodeId -> Range -> Either (Node MacroCallExpressionSort) (Either (Node LambdaExpressionSort) (Either (Node IfExpressionSort) (Either (Node WhileExpressionSort) (Either (Node ReturnExpressionSort) (Either (Node AbortExpressionSort) (Either (Node AssignExpressionSort) (Either (Node UnaryExpressionSort) (Either (Node BinaryExpressionSort) (Either (Node CastExpressionSort) (Either (Node QuantifierExpressionSort) (Either (Node MatchExpressionSort) (Either (Node VectorExpressionSort) (Either (Node LoopExpressionSort) (Either (Node IdentifiedExpressionSort) (Node CallExpressionSort))))))))))))))) -> Node sort
pattern Expression nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (ExpressionContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern UnaryExpression :: () => (sort ~ UnaryExpressionSort) => NodeId -> Range -> Either (Node BorrowExpressionSort) (Either (Node DereferenceExpressionSort) (Either (Node MoveOrCopyExpressionSort) (Either (Node ExpressionTermSort) (Node UnaryExpressionSort)))) -> Node sort
pattern UnaryExpression nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (UnaryExpressionContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern ExpressionTerm :: () => (sort ~ ExpressionTermSort) => NodeId -> Range -> Either (Node BreakExpressionSort) (Either (Node ContinueExpressionSort) (Either (Node NameExpressionSort) (Either (Node MacroCallExpressionSort) (Either (Node PackExpressionSort) (Either (Node LiteralValueSort) (Either (Node UnitExpressionSort) (Either (Node ExpressionListSort) (Either (Node AnnotationExpressionSort) (Either (Node BlockSort) (Either (Node SpecBlockSort) (Either (Node IfExpressionSort) (Either (Node DotExpressionSort) (Either (Node IndexExpressionSort) (Either (Node VectorExpressionSort) (Either (Node MatchExpressionSort) (Node CallExpressionSort)))))))))))))))) -> Node sort
pattern ExpressionTerm nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (ExpressionTermContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern LiteralValue :: () => (sort ~ LiteralValueSort) => NodeId -> Range -> Either (Node BoolLiteralSort) (Either (Node NumLiteralSort) (Either (Node HexStringLiteralSort) (Either (Node ByteStringLiteralSort) (Node AddressLiteralSort)))) -> Node sort
pattern LiteralValue nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (LiteralValueContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern AddressLiteral :: () => (sort ~ AddressLiteralSort) => NodeId -> Range -> Node sort
pattern AddressLiteral nodeId range =
  Node (RegularWellSorted Refl) (AddressLiteralContent nodeId range)

pattern BoolLiteral :: () => (sort ~ BoolLiteralSort) => NodeId -> Range -> Node sort
pattern BoolLiteral nodeId range =
  Node (RegularWellSorted Refl) (BoolLiteralContent nodeId range)

pattern ByteStringLiteral :: () => (sort ~ ByteStringLiteralSort) => NodeId -> Range -> Node sort
pattern ByteStringLiteral nodeId range =
  Node (RegularWellSorted Refl) (ByteStringLiteralContent nodeId range)

pattern HexStringLiteral :: () => (sort ~ HexStringLiteralSort) => NodeId -> Range -> Node sort
pattern HexStringLiteral nodeId range =
  Node (RegularWellSorted Refl) (HexStringLiteralContent nodeId range)

pattern AnnotationExpression :: () => (sort ~ AnnotationExpressionSort) => NodeId -> Range -> Node ExpressionSort -> Node TypeSort -> Node sort
pattern AnnotationExpression nodeId range nodeChild0 nodeChild1 =
  Node (RegularWellSorted Refl) (AnnotationExpressionContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 Nil))))

pattern BreakExpression :: () => (sort ~ BreakExpressionSort) => NodeId -> Range -> Maybe (Node LabelSort) -> Maybe (Node ExpressionSort) -> Node sort
pattern BreakExpression nodeId range nodeChild0 nodeChild1 =
  Node (RegularWellSorted Refl) (BreakExpressionContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 Nil))))

pattern Label :: () => (sort ~ LabelSort) => NodeId -> Range -> Node IdentifierSort -> Node sort
pattern Label nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (LabelContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern CallExpression :: () => (sort ~ CallExpressionSort) => NodeId -> Range -> (Node ArgListSort, Node NameExpressionSort) -> Node sort
pattern CallExpression nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (CallExpressionContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern ArgList :: () => (sort ~ ArgListSort) => NodeId -> Range -> (Maybe (Node ExpressionSort), [Node ExpressionSort]) -> Node sort
pattern ArgList nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (ArgListContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern NameExpression :: () => (sort ~ NameExpressionSort) => NodeId -> Range -> Node ModuleAccessSort -> Node sort
pattern NameExpression nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (NameExpressionContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern ContinueExpression :: () => (sort ~ ContinueExpressionSort) => NodeId -> Range -> Maybe (Node LabelSort) -> Node sort
pattern ContinueExpression nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (ContinueExpressionContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern DotExpression :: () => (sort ~ DotExpressionSort) => NodeId -> Range -> (Node ExpressionTermSort, Node ExpressionTermSort) -> Node sort
pattern DotExpression nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (DotExpressionContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern ExpressionList :: () => (sort ~ ExpressionListSort) => NodeId -> Range -> ([Node ExpressionSort], Node ExpressionSort) -> Node sort
pattern ExpressionList nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (ExpressionListContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern IfExpression :: () => (sort ~ IfExpressionSort) => NodeId -> Range -> (Node ExpressionSort, (Node ExpressionSort, Maybe (Node ExpressionSort))) -> Node sort
pattern IfExpression nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (IfExpressionContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern IndexExpression :: () => (sort ~ IndexExpressionSort) => NodeId -> Range -> ((Maybe (Node ExpressionSort), [Node ExpressionSort]), Node ExpressionTermSort) -> Node sort
pattern IndexExpression nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (IndexExpressionContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern MacroCallExpression :: () => (sort ~ MacroCallExpressionSort) => NodeId -> Range -> Node MacroModuleAccessSort -> Maybe (Node TypeArgumentsSort) -> Node ArgListSort -> Node sort
pattern MacroCallExpression nodeId range nodeChild0 nodeChild1 nodeChild2 =
  Node (RegularWellSorted Refl) (MacroCallExpressionContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 (Cons nodeChild2 Nil)))))

pattern MacroModuleAccess :: () => (sort ~ MacroModuleAccessSort) => NodeId -> Range -> Node ModuleAccessSort -> Node sort
pattern MacroModuleAccess nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (MacroModuleAccessContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern MatchExpression :: () => (sort ~ MatchExpressionSort) => NodeId -> Range -> Node ExpressionSort -> Node MatchBodySort -> Node sort
pattern MatchExpression nodeId range nodeChild0 nodeChild1 =
  Node (RegularWellSorted Refl) (MatchExpressionContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 Nil))))

pattern MatchBody :: () => (sort ~ MatchBodySort) => NodeId -> Range -> (Maybe (Node MatchArmSort), [Node MatchArmSort]) -> Node sort
pattern MatchBody nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (MatchBodyContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern MatchArm :: () => (sort ~ MatchArmSort) => NodeId -> Range -> Node BindListSort -> Maybe (Node MatchConditionSort) -> Node ExpressionSort -> Node sort
pattern MatchArm nodeId range nodeChild0 nodeChild1 nodeChild2 =
  Node (RegularWellSorted Refl) (MatchArmContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 (Cons nodeChild2 Nil)))))

pattern BindList :: () => (sort ~ BindListSort) => NodeId -> Range -> Either (Node CommaBindListSort) (Either (Node OrBindListSort) (Node BindSort)) -> Node sort
pattern BindList nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (BindListContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern Bind :: () => (sort ~ BindSort) => NodeId -> Range -> Either (Node BindUnpackSort) (Either (Node AtBindSort) (Either (Node LiteralValueSort) (Either (Node VariableIdentifierSort) (Node MutBindVarSort)))) -> Node sort
pattern Bind nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (BindContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern AtBind :: () => (sort ~ AtBindSort) => NodeId -> Range -> Node VariableIdentifierSort -> Node BindListSort -> Node sort
pattern AtBind nodeId range nodeChild0 nodeChild1 =
  Node (RegularWellSorted Refl) (AtBindContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 Nil))))

pattern BindUnpack :: () => (sort ~ BindUnpackSort) => NodeId -> Range -> Node NameExpressionSort -> Maybe (Node BindFieldsSort) -> Node sort
pattern BindUnpack nodeId range nodeChild0 nodeChild1 =
  Node (RegularWellSorted Refl) (BindUnpackContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 Nil))))

pattern BindFields :: () => (sort ~ BindFieldsSort) => NodeId -> Range -> Either (Node BindNamedFieldsSort) (Node BindPositionalFieldsSort) -> Node sort
pattern BindFields nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (BindFieldsContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern BindNamedFields :: () => (sort ~ BindNamedFieldsSort) => NodeId -> Range -> (Maybe (Either (Node MutBindFieldSort) (Node BindFieldSort)), [Either (Node MutBindFieldSort) (Node BindFieldSort)]) -> Node sort
pattern BindNamedFields nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (BindNamedFieldsContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern BindField :: () => (sort ~ BindFieldSort) => NodeId -> Range -> Either (Node SpreadOperatorSort) (Maybe (Node BindListSort), Node BindListSort) -> Node sort
pattern BindField nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (BindFieldContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern SpreadOperator :: () => (sort ~ SpreadOperatorSort) => NodeId -> Range -> Node sort
pattern SpreadOperator nodeId range =
  Node (RegularWellSorted Refl) (SpreadOperatorContent nodeId range)

pattern MutBindField :: () => (sort ~ MutBindFieldSort) => NodeId -> Range -> Node BindFieldSort -> Node sort
pattern MutBindField nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (MutBindFieldContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern BindPositionalFields :: () => (sort ~ BindPositionalFieldsSort) => NodeId -> Range -> (Maybe (Either (Node MutBindFieldSort) (Node BindFieldSort)), [Either (Node MutBindFieldSort) (Node BindFieldSort)]) -> Node sort
pattern BindPositionalFields nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (BindPositionalFieldsContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern MutBindVar :: () => (sort ~ MutBindVarSort) => NodeId -> Range -> Node VariableIdentifierSort -> Node sort
pattern MutBindVar nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (MutBindVarContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern CommaBindList :: () => (sort ~ CommaBindListSort) => NodeId -> Range -> (Maybe (Node BindSort), [Node BindSort]) -> Node sort
pattern CommaBindList nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (CommaBindListContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern OrBindList :: () => (sort ~ OrBindListSort) => NodeId -> Range -> ([Node BindSort], Node BindSort) -> Node sort
pattern OrBindList nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (OrBindListContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern MatchCondition :: () => (sort ~ MatchConditionSort) => NodeId -> Range -> Node ExpressionSort -> Node sort
pattern MatchCondition nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (MatchConditionContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern PackExpression :: () => (sort ~ PackExpressionSort) => NodeId -> Range -> Node NameExpressionSort -> Node FieldInitializeListSort -> Node sort
pattern PackExpression nodeId range nodeChild0 nodeChild1 =
  Node (RegularWellSorted Refl) (PackExpressionContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 Nil))))

pattern FieldInitializeList :: () => (sort ~ FieldInitializeListSort) => NodeId -> Range -> (Maybe (Node ExpFieldSort), [Node ExpFieldSort]) -> Node sort
pattern FieldInitializeList nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (FieldInitializeListContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern ExpField :: () => (sort ~ ExpFieldSort) => NodeId -> Range -> Node FieldIdentifierSort -> Maybe (Node ExpressionSort) -> Node sort
pattern ExpField nodeId range nodeChild0 nodeChild1 =
  Node (RegularWellSorted Refl) (ExpFieldContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 Nil))))

pattern SpecBlock :: () => (sort ~ SpecBlockSort) => NodeId -> Range -> Either (Node SpecFunctionSort) (Node SpecBodySort, Maybe (Node SpecBlockTargetSort)) -> Node sort
pattern SpecBlock nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (SpecBlockContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern Identifier :: () => (sort ~ SpecBlockTargetSort) => NodeId -> Range -> Node sort
pattern Identifier nodeId range =
  Node (RegularWellSorted Refl) (IdentifierContent nodeId range)

pattern SpecBlockTargetSchema :: () => (sort ~ SpecBlockTargetSort) => NodeId -> Range -> Node StructIdentifierSort -> Maybe (Node TypeParametersSort) -> Node sort
pattern SpecBlockTargetSchema nodeId range nodeChild0 nodeChild1 =
  Node (RegularWellSorted Refl) (SpecBlockTargetSchemaContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 Nil))))

pattern StructIdentifier :: () => (sort ~ StructIdentifierSort) => NodeId -> Range -> Node IdentifierSort -> Node sort
pattern StructIdentifier nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (StructIdentifierContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern SpecFunction :: () => (sort ~ SpecFunctionSort) => NodeId -> Range -> Either (Node UsualSpecFunctionSort) (Either (Node UninterpretedSpecFunctionSort) (Node NativeSpecFunctionSort)) -> Node sort
pattern SpecFunction nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (SpecFunctionContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern NativeSpecFunction :: () => (sort ~ NativeSpecFunctionSort) => NodeId -> Range -> Node SpecFunctionSignatureSort -> Node sort
pattern NativeSpecFunction nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (NativeSpecFunctionContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern SpecFunctionSignature :: () => (sort ~ SpecFunctionSignatureSort) => NodeId -> Range -> Node FunctionIdentifierSort -> Maybe (Node TypeParametersSort) -> Node FunctionParametersSort -> Node RetTypeSort -> Node sort
pattern SpecFunctionSignature nodeId range nodeChild0 nodeChild1 nodeChild2 nodeChild3 =
  Node (RegularWellSorted Refl) (SpecFunctionSignatureContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 (Cons nodeChild2 (Cons nodeChild3 Nil))))))

pattern UninterpretedSpecFunction :: () => (sort ~ UninterpretedSpecFunctionSort) => NodeId -> Range -> Node SpecFunctionSignatureSort -> Node sort
pattern UninterpretedSpecFunction nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (UninterpretedSpecFunctionContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern UsualSpecFunction :: () => (sort ~ UsualSpecFunctionSort) => NodeId -> Range -> Node SpecFunctionSignatureSort -> Node BlockSort -> Node sort
pattern UsualSpecFunction nodeId range nodeChild0 nodeChild1 =
  Node (RegularWellSorted Refl) (UsualSpecFunctionContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 Nil))))

pattern SpecBody :: () => (sort ~ SpecBodySort) => NodeId -> Range -> [Node UseDeclarationSort] -> [Node SpecBlockMemeberSort] -> Node sort
pattern SpecBody nodeId range nodeChild0 nodeChild1 =
  Node (RegularWellSorted Refl) (SpecBodyContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 Nil))))

pattern SpecBlockMemeber :: () => (sort ~ SpecBlockMemeberSort) => NodeId -> Range -> Either (Node SpecFunctionSort) (Either (Node SpecConditionSort) (Either (Node SpecIncludeSort) (Either (Node SpecApplySort) (Either (Node SpecPragmaSort) (Either (Node SpecVariableSort) (Either (Node SpecLetSort) (Node SpecInvariantSort))))))) -> Node sort
pattern SpecBlockMemeber nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (SpecBlockMemeberContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern SpecApply :: () => (sort ~ SpecApplySort) => NodeId -> Range -> Node ExpressionSort -> ([Node SpecApplyPatternSort], Node SpecApplyPatternSort) -> Maybe ([Node SpecApplyPatternSort], Node SpecApplyPatternSort) -> Node sort
pattern SpecApply nodeId range nodeChild0 nodeChild1 nodeChild2 =
  Node (RegularWellSorted Refl) (SpecApplyContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 (Cons nodeChild2 Nil)))))

pattern SpecApplyPattern :: () => (sort ~ SpecApplyPatternSort) => NodeId -> Range -> Node SpecApplyNamePatternSort -> Maybe (Node TypeParametersSort) -> Node sort
pattern SpecApplyPattern nodeId range nodeChild0 nodeChild1 =
  Node (RegularWellSorted Refl) (SpecApplyPatternContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 Nil))))

pattern SpecApplyNamePattern :: () => (sort ~ SpecApplyNamePatternSort) => NodeId -> Range -> Node sort
pattern SpecApplyNamePattern nodeId range =
  Node (RegularWellSorted Refl) (SpecApplyNamePatternContent nodeId range)

pattern SpecCondition :: () => (sort ~ SpecConditionSort) => NodeId -> Range -> Either (Node SpecAbortIfSort) (Either (Node SpecAbortWithOrModifiesSort) (Node SpecConditionSort)) -> Node sort
pattern SpecCondition nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (SpecConditionContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern SpecAbortIf :: () => (sort ~ SpecAbortIfSort) => NodeId -> Range -> Maybe (Node ConditionPropertiesSort) -> Node ExpressionSort -> Maybe (Node ExpressionSort) -> Node sort
pattern SpecAbortIf nodeId range nodeChild0 nodeChild1 nodeChild2 =
  Node (RegularWellSorted Refl) (SpecAbortIfContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 (Cons nodeChild2 Nil)))))

pattern ConditionProperties :: () => (sort ~ ConditionPropertiesSort) => NodeId -> Range -> (Maybe (Node SpecPropertySort), [Node SpecPropertySort]) -> Node sort
pattern ConditionProperties nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (ConditionPropertiesContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern SpecProperty :: () => (sort ~ SpecPropertySort) => NodeId -> Range -> Node IdentifierSort -> Maybe (Node LiteralValueSort) -> Node sort
pattern SpecProperty nodeId range nodeChild0 nodeChild1 =
  Node (RegularWellSorted Refl) (SpecPropertyContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 Nil))))

pattern SpecAbortWithOrModifies :: () => (sort ~ SpecAbortWithOrModifiesSort) => NodeId -> Range -> Maybe (Node ConditionPropertiesSort) -> ([Node ExpressionSort], Node ExpressionSort) -> Node sort
pattern SpecAbortWithOrModifies nodeId range nodeChild0 nodeChild1 =
  Node (RegularWellSorted Refl) (SpecAbortWithOrModifiesContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 Nil))))

pattern SpecCondition :: () => (sort ~ SpecConditionSort) => NodeId -> Range -> Maybe (Node SpecConditionKindSort) -> Maybe (Node ConditionPropertiesSort) -> Node ExpressionSort -> Node sort
pattern SpecCondition nodeId range nodeChild0 nodeChild1 nodeChild2 =
  Node (RegularWellSorted Refl) (SpecConditionContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 (Cons nodeChild2 Nil)))))

pattern SpecConditionKind :: () => (sort ~ SpecConditionKindSort) => NodeId -> Range -> Node sort
pattern SpecConditionKind nodeId range =
  Node (RegularWellSorted Refl) (SpecConditionKindContent nodeId range)

pattern SpecInclude :: () => (sort ~ SpecIncludeSort) => NodeId -> Range -> Node ExpressionSort -> Node sort
pattern SpecInclude nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (SpecIncludeContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern SpecInvariant :: () => (sort ~ SpecInvariantSort) => NodeId -> Range -> Maybe (Node ConditionPropertiesSort) -> Node ExpressionSort -> Node sort
pattern SpecInvariant nodeId range nodeChild0 nodeChild1 =
  Node (RegularWellSorted Refl) (SpecInvariantContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 Nil))))

pattern SpecLet :: () => (sort ~ SpecLetSort) => NodeId -> Range -> Node IdentifierSort -> Node ExpressionSort -> Node sort
pattern SpecLet nodeId range nodeChild0 nodeChild1 =
  Node (RegularWellSorted Refl) (SpecLetContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 Nil))))

pattern SpecPragma :: () => (sort ~ SpecPragmaSort) => NodeId -> Range -> (Maybe (Node SpecPropertySort), [Node SpecPropertySort]) -> Node sort
pattern SpecPragma nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (SpecPragmaContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern SpecVariable :: () => (sort ~ SpecVariableSort) => NodeId -> Range -> Node IdentifierSort -> Maybe (Node TypeParametersSort) -> Node TypeSort -> Node sort
pattern SpecVariable nodeId range nodeChild0 nodeChild1 nodeChild2 =
  Node (RegularWellSorted Refl) (SpecVariableContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 (Cons nodeChild2 Nil)))))

pattern UseDeclaration :: () => (sort ~ UseDeclarationSort) => NodeId -> Range -> Either (Node UseModuleSort) (Either (Node UseModuleMemberSort) (Either (Node UseModuleMembersSort) (Node UseFunSort))) -> Node sort
pattern UseDeclaration nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (UseDeclarationContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern UseFun :: () => (sort ~ UseFunSort) => NodeId -> Range -> Node ModuleAccessSort -> (Node FunctionIdentifierSort, Node ModuleAccessSort) -> Node sort
pattern UseFun nodeId range nodeChild0 nodeChild1 =
  Node (RegularWellSorted Refl) (UseFunContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 Nil))))

pattern UseModule :: () => (sort ~ UseModuleSort) => NodeId -> Range -> Node ModuleIdentitySort -> Maybe (Node ModuleIdentifierSort) -> Node sort
pattern UseModule nodeId range nodeChild0 nodeChild1 =
  Node (RegularWellSorted Refl) (UseModuleContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 Nil))))

pattern UseModuleMember :: () => (sort ~ UseModuleMemberSort) => NodeId -> Range -> Node ModuleIdentitySort -> Node UseMemberSort -> Node sort
pattern UseModuleMember nodeId range nodeChild0 nodeChild1 =
  Node (RegularWellSorted Refl) (UseModuleMemberContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 Nil))))

pattern UseMember :: () => (sort ~ UseMemberSort) => NodeId -> Range -> Either (Node IdentifierSort, (Maybe (Node IdentifierSort), Node IdentifierSort)) (Either (Maybe (Node IdentifierSort), Node IdentifierSort) (([Node UseMemberSort], Node UseMemberSort), Node IdentifierSort)) -> Node sort
pattern UseMember nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (UseMemberContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern UseModuleMembers :: () => (sort ~ UseModuleMembersSort) => NodeId -> Range -> Either (([Node UseMemberSort], Node UseMemberSort), Node ModuleIdentitySort) (([Node UseMemberSort], Node UseMemberSort), Either (Node ModuleIdentifierSort) (Node NumLiteralSort)) -> Node sort
pattern UseModuleMembers nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (UseModuleMembersContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern UnitExpression :: () => (sort ~ UnitExpressionSort) => NodeId -> Range -> Node sort
pattern UnitExpression nodeId range =
  Node (RegularWellSorted Refl) (UnitExpressionContent nodeId range)

pattern VectorExpression :: () => (sort ~ VectorExpressionSort) => NodeId -> Range -> Maybe ([Node TypeSort], Node TypeSort) -> (Maybe (Node ExpressionSort), [Node ExpressionSort]) -> Node sort
pattern VectorExpression nodeId range nodeChild0 nodeChild1 =
  Node (RegularWellSorted Refl) (VectorExpressionContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 Nil))))

pattern BorrowExpression :: () => (sort ~ BorrowExpressionSort) => NodeId -> Range -> (Node ExpressionSort, Node ReferenceSort) -> Node sort
pattern BorrowExpression nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (BorrowExpressionContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern DereferenceExpression :: () => (sort ~ DereferenceExpressionSort) => NodeId -> Range -> Node ExpressionSort -> Node sort
pattern DereferenceExpression nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (DereferenceExpressionContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern MoveOrCopyExpression :: () => (sort ~ MoveOrCopyExpressionSort) => NodeId -> Range -> Node ExpressionSort -> Node sort
pattern MoveOrCopyExpression nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (MoveOrCopyExpressionContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern UnaryExpression :: () => (sort ~ UnaryExpressionSort) => NodeId -> Range -> Node UnaryOpSort -> Node ExpressionSort -> Node sort
pattern UnaryExpression nodeId range nodeChild0 nodeChild1 =
  Node (RegularWellSorted Refl) (UnaryExpressionContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 Nil))))

pattern UnaryOp :: () => (sort ~ UnaryOpSort) => NodeId -> Range -> Node sort
pattern UnaryOp nodeId range =
  Node (RegularWellSorted Refl) (UnaryOpContent nodeId range)

pattern AbortExpression :: () => (sort ~ AbortExpressionSort) => NodeId -> Range -> Maybe (Node ExpressionSort) -> Node sort
pattern AbortExpression nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (AbortExpressionContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern AssignExpression :: () => (sort ~ AssignExpressionSort) => NodeId -> Range -> (Node ExpressionSort, Node UnaryExpressionSort) -> Node sort
pattern AssignExpression nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (AssignExpressionContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern BinaryExpression :: () => (sort ~ BinaryExpressionSort) => NodeId -> Range -> Either (Node ExpressionSort, Node ExpressionSort) (Either (Node ExpressionSort, Node ExpressionSort) (Either (Node ExpressionSort, Node ExpressionSort) (Either (Node ExpressionSort, Node ExpressionSort) (Either (Node ExpressionSort, Node ExpressionSort) (Either (Node ExpressionSort, Node ExpressionSort) (Either (Node ExpressionSort, Node ExpressionSort) (Either (Node ExpressionSort, Node ExpressionSort) (Either (Node ExpressionSort, Node ExpressionSort) (Either (Node ExpressionSort, Node ExpressionSort) (Either (Node ExpressionSort, Node ExpressionSort) (Either (Node ExpressionSort, Node ExpressionSort) (Either (Node ExpressionSort, Node ExpressionSort) (Either (Node ExpressionSort, Node ExpressionSort) (Either (Node ExpressionSort, Node ExpressionSort) (Either (Node ExpressionSort, Node ExpressionSort) (Either (Node ExpressionSort, Node ExpressionSort) (Either (Node ExpressionSort, Node ExpressionSort) (Either (Node ExpressionSort, Node ExpressionSort) (Node ExpressionSort, Node ExpressionSort))))))))))))))))))) -> Node sort
pattern BinaryExpression nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (BinaryExpressionContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern CastExpression :: () => (sort ~ CastExpressionSort) => NodeId -> Range -> (Node TypeSort, Node ExpressionSort) -> Node sort
pattern CastExpression nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (CastExpressionContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern IdentifiedExpression :: () => (sort ~ IdentifiedExpressionSort) => NodeId -> Range -> Node BlockIdentifierSort -> Node ExpressionSort -> Node sort
pattern IdentifiedExpression nodeId range nodeChild0 nodeChild1 =
  Node (RegularWellSorted Refl) (IdentifiedExpressionContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 Nil))))

pattern BlockIdentifier :: () => (sort ~ BlockIdentifierSort) => NodeId -> Range -> Node LabelSort -> Node sort
pattern BlockIdentifier nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (BlockIdentifierContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern LambdaExpression :: () => (sort ~ LambdaExpressionSort) => NodeId -> Range -> Node LambdaBindingsSort -> Maybe (Node TypeSort) -> Node ExpressionSort -> Node sort
pattern LambdaExpression nodeId range nodeChild0 nodeChild1 nodeChild2 =
  Node (RegularWellSorted Refl) (LambdaExpressionContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 (Cons nodeChild2 Nil)))))

pattern LambdaBindings :: () => (sort ~ LambdaBindingsSort) => NodeId -> Range -> (Maybe (Node LambdaBindingSort), [Node LambdaBindingSort]) -> Node sort
pattern LambdaBindings nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (LambdaBindingsContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern LambdaBinding :: () => (sort ~ LambdaBindingSort) => NodeId -> Range -> Either (Node BindSort) (Either (Maybe (Node TypeSort), Node BindSort) (Node CommaBindListSort)) -> Node sort
pattern LambdaBinding nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (LambdaBindingContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern LoopExpression :: () => (sort ~ LoopExpressionSort) => NodeId -> Range -> Node ExpressionSort -> Node sort
pattern LoopExpression nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (LoopExpressionContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern QuantifierExpression :: () => (sort ~ QuantifierExpressionSort) => NodeId -> Range -> (Node QuantifierBindingsSort, (Maybe (Node ExpressionSort), (Node ExpressionSort, Either (Node ExistsSort) (Node ForallSort)))) -> Node sort
pattern QuantifierExpression nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (QuantifierExpressionContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern QuantifierBindings :: () => (sort ~ QuantifierBindingsSort) => NodeId -> Range -> Node QuantifierBindingSort -> [Node QuantifierBindingSort] -> Node sort
pattern QuantifierBindings nodeId range nodeChild0 nodeChild1 =
  Node (RegularWellSorted Refl) (QuantifierBindingsContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 Nil))))

pattern QuantifierBinding :: () => (sort ~ QuantifierBindingSort) => NodeId -> Range -> Either (Node ExpressionSort, Node IdentifierSort) (Node TypeSort, Node IdentifierSort) -> Node sort
pattern QuantifierBinding nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (QuantifierBindingContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern ReturnExpression :: () => (sort ~ ReturnExpressionSort) => NodeId -> Range -> Either (Maybe (Node LabelSort)) (Maybe (Node LabelSort), Node ExpressionSort) -> Node sort
pattern ReturnExpression nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (ReturnExpressionContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern WhileExpression :: () => (sort ~ WhileExpressionSort) => NodeId -> Range -> Node ExpressionSort -> Node ExpressionSort -> Node sort
pattern WhileExpression nodeId range nodeChild0 nodeChild1 =
  Node (RegularWellSorted Refl) (WhileExpressionContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 Nil))))

pattern BlockItem :: () => (sort ~ BlockItemSort) => NodeId -> Range -> Either (Node LetStatementSort) (Node ExpressionSort) -> Node sort
pattern BlockItem nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (BlockItemContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern LetStatement :: () => (sort ~ LetStatementSort) => NodeId -> Range -> Node BindListSort -> Maybe (Node TypeSort) -> Maybe (Node ExpressionSort) -> Node sort
pattern LetStatement nodeId range nodeChild0 nodeChild1 nodeChild2 =
  Node (RegularWellSorted Refl) (LetStatementContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 (Cons nodeChild2 Nil)))))

pattern MacroFunctionDefinition :: () => (sort ~ MacroFunctionDefinitionSort) => NodeId -> Range -> Maybe (Node ModifierSort) -> Node MacroSignatureSort -> Node BlockSort -> Node sort
pattern MacroFunctionDefinition nodeId range nodeChild0 nodeChild1 nodeChild2 =
  Node (RegularWellSorted Refl) (MacroFunctionDefinitionContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 (Cons nodeChild2 Nil)))))

pattern MacroSignature :: () => (sort ~ MacroSignatureSort) => NodeId -> Range -> Maybe (Node ModifierSort) -> Node FunctionIdentifierSort -> Maybe (Node TypeParametersSort) -> Node FunctionParametersSort -> Maybe (Node RetTypeSort) -> Node sort
pattern MacroSignature nodeId range nodeChild0 nodeChild1 nodeChild2 nodeChild3 nodeChild4 =
  Node (RegularWellSorted Refl) (MacroSignatureContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 (Cons nodeChild2 (Cons nodeChild3 (Cons nodeChild4 Nil)))))))

pattern NativeFunctionDefinition :: () => (sort ~ NativeFunctionDefinitionSort) => NodeId -> Range -> Node FunctionSignatureSort -> Node sort
pattern NativeFunctionDefinition nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (NativeFunctionDefinitionContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern StructItem :: () => (sort ~ StructItemSort) => NodeId -> Range -> Either (Node StructDefinitionSort) (Node NativeStructDefinitionSort) -> Node sort
pattern StructItem nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (StructItemContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern NativeStructDefinition :: () => (sort ~ NativeStructDefinitionSort) => NodeId -> Range -> Node StructSignatureSort -> Node sort
pattern NativeStructDefinition nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (NativeStructDefinitionContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern StructSignature :: () => (sort ~ StructSignatureSort) => NodeId -> Range -> Node StructIdentifierSort -> Maybe (Node TypeParametersSort) -> Maybe (Node AbilityDeclsSort) -> Node sort
pattern StructSignature nodeId range nodeChild0 nodeChild1 nodeChild2 =
  Node (RegularWellSorted Refl) (StructSignatureContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 (Cons nodeChild2 Nil)))))

pattern StructDefinition :: () => (sort ~ StructDefinitionSort) => NodeId -> Range -> Node StructSignatureSort -> Node DatatypeFieldsSort -> Maybe (Node PostfixAbilityDeclsSort) -> Node sort
pattern StructDefinition nodeId range nodeChild0 nodeChild1 nodeChild2 =
  Node (RegularWellSorted Refl) (StructDefinitionContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 (Cons nodeChild2 Nil)))))

pattern Constant :: () => (sort ~ ConstantSort) => NodeId -> Range -> Node IdentifierSort -> Node TypeSort -> Node ExpressionSort -> Node sort
pattern Constant nodeId range nodeChild0 nodeChild1 nodeChild2 =
  Node (RegularWellSorted Refl) (ConstantContent nodeId range (Children (Cons nodeChild0 (Cons nodeChild1 (Cons nodeChild2 Nil)))))

pattern FriendDeclaration :: () => (sort ~ FriendDeclarationSort) => NodeId -> Range -> Node FriendAccessSort -> Node sort
pattern FriendDeclaration nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (FriendDeclarationContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern FriendAccess :: () => (sort ~ FriendAccessSort) => NodeId -> Range -> Either (Node ModuleIdentitySort) (Node IdentifierSort) -> Node sort
pattern FriendAccess nodeId range nodeChild0 =
  Node (RegularWellSorted Refl) (FriendAccessContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern Error :: NodeId -> Range -> [SomeNode] -> Node sort
pattern Error nodeId range nodeChild0 =
  Node AuxiliaryWellSorted (ErrorContent nodeId range (Children (Cons nodeChild0 Nil)))

pattern Missing :: NodeId -> Range -> Node sort
pattern Missing nodeId range =
  Node AuxiliaryWellSorted (MissingContent nodeId range)

pattern SortMismatch :: SomeNode -> Node sort
pattern SortMismatch nodeChild0 =
  Node VirtualWellSorted (SortMismatchContent nodeChild0)

{-# COMPLETE
  SourceFile
  , ModuleDefinition
  , ModuleBody
  , EnumItem
  , EnumDefinition
  , EnumSignature
  , EnumIdentifier
  , Identifier
  , AbilityDecls
  , Ability
  , TypeParameters
  , TypeParameter
  , TypeParameterIdentifier
  , EnumVariants
  , Variant
  , VariantIdentifier
  , DatatypeFields
  , NamedFields
  , FieldAnnotation
  , FieldIdentifier
  , Type
  , ApplyType
  , ModuleAccess
  , ModuleIdentifier
  , ReservedIdentifier
  , Exists
  , Forall
  , ModuleIdentity
  , NumLiteral
  , TypeArguments
  , FunctionType
  , FunctionTypeParameters
  , PrimitiveType
  , RefType
  , Reference
  , ImmRef
  , MutRef
  , TupleType
  , PositionalFields
  , PostfixAbilityDecls
  , FunctionItem
  , FunctionDefinition
  , FunctionSignature
  , FunctionIdentifier
  , FunctionParameters
  , FunctionParameter
  , VariableIdentifier
  , MutFunctionParameter
  , Modifier
  , RetType
  , Block
  , Expression
  , UnaryExpression
  , ExpressionTerm
  , LiteralValue
  , AddressLiteral
  , BoolLiteral
  , ByteStringLiteral
  , HexStringLiteral
  , AnnotationExpression
  , BreakExpression
  , Label
  , CallExpression
  , ArgList
  , NameExpression
  , ContinueExpression
  , DotExpression
  , ExpressionList
  , IfExpression
  , IndexExpression
  , MacroCallExpression
  , MacroModuleAccess
  , MatchExpression
  , MatchBody
  , MatchArm
  , BindList
  , Bind
  , AtBind
  , BindUnpack
  , BindFields
  , BindNamedFields
  , BindField
  , SpreadOperator
  , MutBindField
  , BindPositionalFields
  , MutBindVar
  , CommaBindList
  , OrBindList
  , MatchCondition
  , PackExpression
  , FieldInitializeList
  , ExpField
  , SpecBlock
  , Identifier
  , SpecBlockTargetSchema
  , StructIdentifier
  , SpecFunction
  , NativeSpecFunction
  , SpecFunctionSignature
  , UninterpretedSpecFunction
  , UsualSpecFunction
  , SpecBody
  , SpecBlockMemeber
  , SpecApply
  , SpecApplyPattern
  , SpecApplyNamePattern
  , SpecCondition
  , SpecAbortIf
  , ConditionProperties
  , SpecProperty
  , SpecAbortWithOrModifies
  , SpecCondition
  , SpecConditionKind
  , SpecInclude
  , SpecInvariant
  , SpecLet
  , SpecPragma
  , SpecVariable
  , UseDeclaration
  , UseFun
  , UseModule
  , UseModuleMember
  , UseMember
  , UseModuleMembers
  , UnitExpression
  , VectorExpression
  , BorrowExpression
  , DereferenceExpression
  , MoveOrCopyExpression
  , UnaryExpression
  , UnaryOp
  , AbortExpression
  , AssignExpression
  , BinaryExpression
  , CastExpression
  , IdentifiedExpression
  , BlockIdentifier
  , LambdaExpression
  , LambdaBindings
  , LambdaBinding
  , LoopExpression
  , QuantifierExpression
  , QuantifierBindings
  , QuantifierBinding
  , ReturnExpression
  , WhileExpression
  , BlockItem
  , LetStatement
  , MacroFunctionDefinition
  , MacroSignature
  , NativeFunctionDefinition
  , StructItem
  , NativeStructDefinition
  , StructSignature
  , StructDefinition
  , Constant
  , FriendDeclaration
  , FriendAccess
  , Error
  , Missing
  , SortMismatch
  #-}

--------------------------------------------------------------------------------
-- Show Instance using Pattern Synonyms
--------------------------------------------------------------------------------

instance Show (Node sort) where
  showsPrec :: Int -> Node sort -> ShowS
  showsPrec prec =
    showParen (prec > 10) . \case
      SourceFile nodeId range nodeChild0 ->
        showString "SourceFile " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      ModuleDefinition nodeId range nodeChild0 nodeChild1 ->
        showString "ModuleDefinition " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1
      ModuleBody nodeId range nodeChild0 ->
        showString "ModuleBody " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      EnumItem nodeId range nodeChild0 ->
        showString "EnumItem " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      EnumDefinition nodeId range nodeChild0 nodeChild1 nodeChild2 ->
        showString "EnumDefinition " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1 . showChar ' ' . showsPrec 11 nodeChild2
      EnumSignature nodeId range nodeChild0 nodeChild1 nodeChild2 ->
        showString "EnumSignature " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1 . showChar ' ' . showsPrec 11 nodeChild2
      EnumIdentifier nodeId range nodeChild0 ->
        showString "EnumIdentifier " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      Identifier nodeId range ->
        showString "Identifier " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range 
      AbilityDecls nodeId range nodeChild0 ->
        showString "AbilityDecls " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      Ability nodeId range ->
        showString "Ability " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range 
      TypeParameters nodeId range nodeChild0 ->
        showString "TypeParameters " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      TypeParameter nodeId range nodeChild0 nodeChild1 ->
        showString "TypeParameter " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1
      TypeParameterIdentifier nodeId range nodeChild0 ->
        showString "TypeParameterIdentifier " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      EnumVariants nodeId range nodeChild0 ->
        showString "EnumVariants " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      Variant nodeId range nodeChild0 nodeChild1 ->
        showString "Variant " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1
      VariantIdentifier nodeId range nodeChild0 ->
        showString "VariantIdentifier " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      DatatypeFields nodeId range nodeChild0 ->
        showString "DatatypeFields " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      NamedFields nodeId range nodeChild0 ->
        showString "NamedFields " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      FieldAnnotation nodeId range nodeChild0 nodeChild1 ->
        showString "FieldAnnotation " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1
      FieldIdentifier nodeId range nodeChild0 ->
        showString "FieldIdentifier " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      Type nodeId range nodeChild0 ->
        showString "Type " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      ApplyType nodeId range nodeChild0 ->
        showString "ApplyType " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      ModuleAccess nodeId range nodeChild0 ->
        showString "ModuleAccess " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      ModuleIdentifier nodeId range nodeChild0 ->
        showString "ModuleIdentifier " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      ReservedIdentifier nodeId range nodeChild0 ->
        showString "ReservedIdentifier " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      Exists nodeId range ->
        showString "Exists " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range 
      Forall nodeId range ->
        showString "Forall " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range 
      ModuleIdentity nodeId range nodeChild0 nodeChild1 ->
        showString "ModuleIdentity " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1
      NumLiteral nodeId range ->
        showString "NumLiteral " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range 
      TypeArguments nodeId range nodeChild0 ->
        showString "TypeArguments " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      FunctionType nodeId range nodeChild0 nodeChild1 ->
        showString "FunctionType " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1
      FunctionTypeParameters nodeId range nodeChild0 ->
        showString "FunctionTypeParameters " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      PrimitiveType nodeId range ->
        showString "PrimitiveType " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range 
      RefType nodeId range nodeChild0 nodeChild1 ->
        showString "RefType " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1
      Reference nodeId range nodeChild0 ->
        showString "Reference " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      ImmRef nodeId range ->
        showString "ImmRef " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range 
      MutRef nodeId range ->
        showString "MutRef " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range 
      TupleType nodeId range nodeChild0 ->
        showString "TupleType " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      PositionalFields nodeId range nodeChild0 ->
        showString "PositionalFields " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      PostfixAbilityDecls nodeId range nodeChild0 ->
        showString "PostfixAbilityDecls " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      FunctionItem nodeId range nodeChild0 ->
        showString "FunctionItem " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      FunctionDefinition nodeId range nodeChild0 nodeChild1 ->
        showString "FunctionDefinition " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1
      FunctionSignature nodeId range nodeChild0 nodeChild1 nodeChild2 nodeChild3 nodeChild4 nodeChild5 nodeChild6 ->
        showString "FunctionSignature " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1 . showChar ' ' . showsPrec 11 nodeChild2 . showChar ' ' . showsPrec 11 nodeChild3 . showChar ' ' . showsPrec 11 nodeChild4 . showChar ' ' . showsPrec 11 nodeChild5 . showChar ' ' . showsPrec 11 nodeChild6
      FunctionIdentifier nodeId range nodeChild0 ->
        showString "FunctionIdentifier " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      FunctionParameters nodeId range nodeChild0 ->
        showString "FunctionParameters " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      FunctionParameter nodeId range nodeChild0 nodeChild1 ->
        showString "FunctionParameter " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1
      VariableIdentifier nodeId range nodeChild0 ->
        showString "VariableIdentifier " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      MutFunctionParameter nodeId range nodeChild0 ->
        showString "MutFunctionParameter " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      Modifier nodeId range ->
        showString "Modifier " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range 
      RetType nodeId range nodeChild0 ->
        showString "RetType " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      Block nodeId range nodeChild0 nodeChild1 nodeChild2 ->
        showString "Block " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1 . showChar ' ' . showsPrec 11 nodeChild2
      Expression nodeId range nodeChild0 ->
        showString "Expression " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      UnaryExpression nodeId range nodeChild0 ->
        showString "UnaryExpression " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      ExpressionTerm nodeId range nodeChild0 ->
        showString "ExpressionTerm " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      LiteralValue nodeId range nodeChild0 ->
        showString "LiteralValue " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      AddressLiteral nodeId range ->
        showString "AddressLiteral " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range 
      BoolLiteral nodeId range ->
        showString "BoolLiteral " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range 
      ByteStringLiteral nodeId range ->
        showString "ByteStringLiteral " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range 
      HexStringLiteral nodeId range ->
        showString "HexStringLiteral " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range 
      AnnotationExpression nodeId range nodeChild0 nodeChild1 ->
        showString "AnnotationExpression " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1
      BreakExpression nodeId range nodeChild0 nodeChild1 ->
        showString "BreakExpression " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1
      Label nodeId range nodeChild0 ->
        showString "Label " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      CallExpression nodeId range nodeChild0 ->
        showString "CallExpression " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      ArgList nodeId range nodeChild0 ->
        showString "ArgList " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      NameExpression nodeId range nodeChild0 ->
        showString "NameExpression " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      ContinueExpression nodeId range nodeChild0 ->
        showString "ContinueExpression " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      DotExpression nodeId range nodeChild0 ->
        showString "DotExpression " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      ExpressionList nodeId range nodeChild0 ->
        showString "ExpressionList " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      IfExpression nodeId range nodeChild0 ->
        showString "IfExpression " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      IndexExpression nodeId range nodeChild0 ->
        showString "IndexExpression " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      MacroCallExpression nodeId range nodeChild0 nodeChild1 nodeChild2 ->
        showString "MacroCallExpression " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1 . showChar ' ' . showsPrec 11 nodeChild2
      MacroModuleAccess nodeId range nodeChild0 ->
        showString "MacroModuleAccess " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      MatchExpression nodeId range nodeChild0 nodeChild1 ->
        showString "MatchExpression " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1
      MatchBody nodeId range nodeChild0 ->
        showString "MatchBody " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      MatchArm nodeId range nodeChild0 nodeChild1 nodeChild2 ->
        showString "MatchArm " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1 . showChar ' ' . showsPrec 11 nodeChild2
      BindList nodeId range nodeChild0 ->
        showString "BindList " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      Bind nodeId range nodeChild0 ->
        showString "Bind " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      AtBind nodeId range nodeChild0 nodeChild1 ->
        showString "AtBind " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1
      BindUnpack nodeId range nodeChild0 nodeChild1 ->
        showString "BindUnpack " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1
      BindFields nodeId range nodeChild0 ->
        showString "BindFields " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      BindNamedFields nodeId range nodeChild0 ->
        showString "BindNamedFields " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      BindField nodeId range nodeChild0 ->
        showString "BindField " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      SpreadOperator nodeId range ->
        showString "SpreadOperator " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range 
      MutBindField nodeId range nodeChild0 ->
        showString "MutBindField " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      BindPositionalFields nodeId range nodeChild0 ->
        showString "BindPositionalFields " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      MutBindVar nodeId range nodeChild0 ->
        showString "MutBindVar " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      CommaBindList nodeId range nodeChild0 ->
        showString "CommaBindList " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      OrBindList nodeId range nodeChild0 ->
        showString "OrBindList " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      MatchCondition nodeId range nodeChild0 ->
        showString "MatchCondition " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      PackExpression nodeId range nodeChild0 nodeChild1 ->
        showString "PackExpression " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1
      FieldInitializeList nodeId range nodeChild0 ->
        showString "FieldInitializeList " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      ExpField nodeId range nodeChild0 nodeChild1 ->
        showString "ExpField " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1
      SpecBlock nodeId range nodeChild0 ->
        showString "SpecBlock " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      Identifier nodeId range ->
        showString "Identifier " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range 
      SpecBlockTargetSchema nodeId range nodeChild0 nodeChild1 ->
        showString "SpecBlockTargetSchema " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1
      StructIdentifier nodeId range nodeChild0 ->
        showString "StructIdentifier " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      SpecFunction nodeId range nodeChild0 ->
        showString "SpecFunction " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      NativeSpecFunction nodeId range nodeChild0 ->
        showString "NativeSpecFunction " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      SpecFunctionSignature nodeId range nodeChild0 nodeChild1 nodeChild2 nodeChild3 ->
        showString "SpecFunctionSignature " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1 . showChar ' ' . showsPrec 11 nodeChild2 . showChar ' ' . showsPrec 11 nodeChild3
      UninterpretedSpecFunction nodeId range nodeChild0 ->
        showString "UninterpretedSpecFunction " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      UsualSpecFunction nodeId range nodeChild0 nodeChild1 ->
        showString "UsualSpecFunction " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1
      SpecBody nodeId range nodeChild0 nodeChild1 ->
        showString "SpecBody " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1
      SpecBlockMemeber nodeId range nodeChild0 ->
        showString "SpecBlockMemeber " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      SpecApply nodeId range nodeChild0 nodeChild1 nodeChild2 ->
        showString "SpecApply " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1 . showChar ' ' . showsPrec 11 nodeChild2
      SpecApplyPattern nodeId range nodeChild0 nodeChild1 ->
        showString "SpecApplyPattern " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1
      SpecApplyNamePattern nodeId range ->
        showString "SpecApplyNamePattern " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range 
      SpecCondition nodeId range nodeChild0 ->
        showString "SpecCondition " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      SpecAbortIf nodeId range nodeChild0 nodeChild1 nodeChild2 ->
        showString "SpecAbortIf " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1 . showChar ' ' . showsPrec 11 nodeChild2
      ConditionProperties nodeId range nodeChild0 ->
        showString "ConditionProperties " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      SpecProperty nodeId range nodeChild0 nodeChild1 ->
        showString "SpecProperty " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1
      SpecAbortWithOrModifies nodeId range nodeChild0 nodeChild1 ->
        showString "SpecAbortWithOrModifies " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1
      SpecCondition nodeId range nodeChild0 nodeChild1 nodeChild2 ->
        showString "SpecCondition " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1 . showChar ' ' . showsPrec 11 nodeChild2
      SpecConditionKind nodeId range ->
        showString "SpecConditionKind " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range 
      SpecInclude nodeId range nodeChild0 ->
        showString "SpecInclude " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      SpecInvariant nodeId range nodeChild0 nodeChild1 ->
        showString "SpecInvariant " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1
      SpecLet nodeId range nodeChild0 nodeChild1 ->
        showString "SpecLet " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1
      SpecPragma nodeId range nodeChild0 ->
        showString "SpecPragma " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      SpecVariable nodeId range nodeChild0 nodeChild1 nodeChild2 ->
        showString "SpecVariable " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1 . showChar ' ' . showsPrec 11 nodeChild2
      UseDeclaration nodeId range nodeChild0 ->
        showString "UseDeclaration " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      UseFun nodeId range nodeChild0 nodeChild1 ->
        showString "UseFun " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1
      UseModule nodeId range nodeChild0 nodeChild1 ->
        showString "UseModule " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1
      UseModuleMember nodeId range nodeChild0 nodeChild1 ->
        showString "UseModuleMember " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1
      UseMember nodeId range nodeChild0 ->
        showString "UseMember " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      UseModuleMembers nodeId range nodeChild0 ->
        showString "UseModuleMembers " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      UnitExpression nodeId range ->
        showString "UnitExpression " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range 
      VectorExpression nodeId range nodeChild0 nodeChild1 ->
        showString "VectorExpression " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1
      BorrowExpression nodeId range nodeChild0 ->
        showString "BorrowExpression " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      DereferenceExpression nodeId range nodeChild0 ->
        showString "DereferenceExpression " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      MoveOrCopyExpression nodeId range nodeChild0 ->
        showString "MoveOrCopyExpression " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      UnaryExpression nodeId range nodeChild0 nodeChild1 ->
        showString "UnaryExpression " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1
      UnaryOp nodeId range ->
        showString "UnaryOp " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range 
      AbortExpression nodeId range nodeChild0 ->
        showString "AbortExpression " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      AssignExpression nodeId range nodeChild0 ->
        showString "AssignExpression " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      BinaryExpression nodeId range nodeChild0 ->
        showString "BinaryExpression " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      CastExpression nodeId range nodeChild0 ->
        showString "CastExpression " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      IdentifiedExpression nodeId range nodeChild0 nodeChild1 ->
        showString "IdentifiedExpression " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1
      BlockIdentifier nodeId range nodeChild0 ->
        showString "BlockIdentifier " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      LambdaExpression nodeId range nodeChild0 nodeChild1 nodeChild2 ->
        showString "LambdaExpression " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1 . showChar ' ' . showsPrec 11 nodeChild2
      LambdaBindings nodeId range nodeChild0 ->
        showString "LambdaBindings " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      LambdaBinding nodeId range nodeChild0 ->
        showString "LambdaBinding " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      LoopExpression nodeId range nodeChild0 ->
        showString "LoopExpression " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      QuantifierExpression nodeId range nodeChild0 ->
        showString "QuantifierExpression " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      QuantifierBindings nodeId range nodeChild0 nodeChild1 ->
        showString "QuantifierBindings " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1
      QuantifierBinding nodeId range nodeChild0 ->
        showString "QuantifierBinding " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      ReturnExpression nodeId range nodeChild0 ->
        showString "ReturnExpression " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      WhileExpression nodeId range nodeChild0 nodeChild1 ->
        showString "WhileExpression " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1
      BlockItem nodeId range nodeChild0 ->
        showString "BlockItem " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      LetStatement nodeId range nodeChild0 nodeChild1 nodeChild2 ->
        showString "LetStatement " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1 . showChar ' ' . showsPrec 11 nodeChild2
      MacroFunctionDefinition nodeId range nodeChild0 nodeChild1 nodeChild2 ->
        showString "MacroFunctionDefinition " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1 . showChar ' ' . showsPrec 11 nodeChild2
      MacroSignature nodeId range nodeChild0 nodeChild1 nodeChild2 nodeChild3 nodeChild4 ->
        showString "MacroSignature " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1 . showChar ' ' . showsPrec 11 nodeChild2 . showChar ' ' . showsPrec 11 nodeChild3 . showChar ' ' . showsPrec 11 nodeChild4
      NativeFunctionDefinition nodeId range nodeChild0 ->
        showString "NativeFunctionDefinition " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      StructItem nodeId range nodeChild0 ->
        showString "StructItem " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      NativeStructDefinition nodeId range nodeChild0 ->
        showString "NativeStructDefinition " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      StructSignature nodeId range nodeChild0 nodeChild1 nodeChild2 ->
        showString "StructSignature " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1 . showChar ' ' . showsPrec 11 nodeChild2
      StructDefinition nodeId range nodeChild0 nodeChild1 nodeChild2 ->
        showString "StructDefinition " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1 . showChar ' ' . showsPrec 11 nodeChild2
      Constant nodeId range nodeChild0 nodeChild1 nodeChild2 ->
        showString "Constant " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0 . showChar ' ' . showsPrec 11 nodeChild1 . showChar ' ' . showsPrec 11 nodeChild2
      FriendDeclaration nodeId range nodeChild0 ->
        showString "FriendDeclaration " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      FriendAccess nodeId range nodeChild0 ->
        showString "FriendAccess " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range  . showChar ' ' . showsPrec 11 nodeChild0
      Error nodeId range nodeChild0 ->
        showString "Error " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range . showChar ' ' . showsPrec 11 nodeChild0
      Missing nodeId range ->
        showString "Missing " . showsPrec 11 nodeId . showChar ' ' . showsPrec 11 range
      SortMismatch nodeChild0 ->
        showString "SortMismatch " . showsPrec 11 nodeChild0

--------------------------------------------------------------------------------
-- Symbol Table
--------------------------------------------------------------------------------

newtype SymbolTable = SymbolTable {unSymbolTable :: IntMap SomeSymbolSing}

mkSymbolTable :: TS.Language -> IO SymbolTable
mkSymbolTable language =
  fmap (SymbolTable . IM.fromList) . sequence $
    [ mkEntry "source_file" (SomeRegularSymbolSing SSourceFileSymbol)
    , mkEntry "module_definition" (SomeRegularSymbolSing SModuleDefinitionSymbol)
    , mkEntry "module_body" (SomeRegularSymbolSing SModuleBodySymbol)
    , mkEntry "_enum_item" (SomeRegularSymbolSing SEnumItemSymbol)
    , mkEntry "enum_definition" (SomeRegularSymbolSing SEnumDefinitionSymbol)
    , mkEntry "_enum_signature" (SomeRegularSymbolSing SEnumSignatureSymbol)
    , mkEntry "_enum_identifier" (SomeRegularSymbolSing SEnumIdentifierSymbol)
    , mkEntry "identifier" (SomeRegularSymbolSing SIdentifierSymbol)
    , mkEntry "ability_decls" (SomeRegularSymbolSing SAbilityDeclsSymbol)
    , mkEntry "ability" (SomeRegularSymbolSing SAbilitySymbol)
    , mkEntry "type_parameters" (SomeRegularSymbolSing STypeParametersSymbol)
    , mkEntry "type_parameter" (SomeRegularSymbolSing STypeParameterSymbol)
    , mkEntry "_type_parameter_identifier" (SomeRegularSymbolSing STypeParameterIdentifierSymbol)
    , mkEntry "enum_variants" (SomeRegularSymbolSing SEnumVariantsSymbol)
    , mkEntry "variant" (SomeRegularSymbolSing SVariantSymbol)
    , mkEntry "_variant_identifier" (SomeRegularSymbolSing SVariantIdentifierSymbol)
    , mkEntry "datatype_fields" (SomeRegularSymbolSing SDatatypeFieldsSymbol)
    , mkEntry "named_fields" (SomeRegularSymbolSing SNamedFieldsSymbol)
    , mkEntry "field_annotation" (SomeRegularSymbolSing SFieldAnnotationSymbol)
    , mkEntry "_field_identifier" (SomeRegularSymbolSing SFieldIdentifierSymbol)
    , mkEntry "_type" (SomeRegularSymbolSing STypeSymbol)
    , mkEntry "apply_type" (SomeRegularSymbolSing SApplyTypeSymbol)
    , mkEntry "module_access" (SomeRegularSymbolSing SModuleAccessSymbol)
    , mkEntry "_module_identifier" (SomeRegularSymbolSing SModuleIdentifierSymbol)
    , mkEntry "_reserved_identifier" (SomeRegularSymbolSing SReservedIdentifierSymbol)
    , mkEntry "_exists" (SomeRegularSymbolSing SExistsSymbol)
    , mkEntry "_forall" (SomeRegularSymbolSing SForallSymbol)
    , mkEntry "module_identity" (SomeRegularSymbolSing SModuleIdentitySymbol)
    , mkEntry "num_literal" (SomeRegularSymbolSing SNumLiteralSymbol)
    , mkEntry "type_arguments" (SomeRegularSymbolSing STypeArgumentsSymbol)
    , mkEntry "function_type" (SomeRegularSymbolSing SFunctionTypeSymbol)
    , mkEntry "function_type_parameters" (SomeRegularSymbolSing SFunctionTypeParametersSymbol)
    , mkEntry "primitive_type" (SomeRegularSymbolSing SPrimitiveTypeSymbol)
    , mkEntry "ref_type" (SomeRegularSymbolSing SRefTypeSymbol)
    , mkEntry "_reference" (SomeRegularSymbolSing SReferenceSymbol)
    , mkEntry "imm_ref" (SomeRegularSymbolSing SImmRefSymbol)
    , mkEntry "mut_ref" (SomeRegularSymbolSing SMutRefSymbol)
    , mkEntry "tuple_type" (SomeRegularSymbolSing STupleTypeSymbol)
    , mkEntry "positional_fields" (SomeRegularSymbolSing SPositionalFieldsSymbol)
    , mkEntry "postfix_ability_decls" (SomeRegularSymbolSing SPostfixAbilityDeclsSymbol)
    , mkEntry "_function_item" (SomeRegularSymbolSing SFunctionItemSymbol)
    , mkEntry "function_definition" (SomeRegularSymbolSing SFunctionDefinitionSymbol)
    , mkEntry "_function_signature" (SomeRegularSymbolSing SFunctionSignatureSymbol)
    , mkEntry "_function_identifier" (SomeRegularSymbolSing SFunctionIdentifierSymbol)
    , mkEntry "function_parameters" (SomeRegularSymbolSing SFunctionParametersSymbol)
    , mkEntry "function_parameter" (SomeRegularSymbolSing SFunctionParameterSymbol)
    , mkEntry "_variable_identifier" (SomeRegularSymbolSing SVariableIdentifierSymbol)
    , mkEntry "mut_function_parameter" (SomeRegularSymbolSing SMutFunctionParameterSymbol)
    , mkEntry "modifier" (SomeRegularSymbolSing SModifierSymbol)
    , mkEntry "ret_type" (SomeRegularSymbolSing SRetTypeSymbol)
    , mkEntry "block" (SomeRegularSymbolSing SBlockSymbol)
    , mkEntry "_expression" (SomeRegularSymbolSing SExpressionSymbol)
    , mkEntry "_unary_expression" (SomeRegularSymbolSing SUnaryExpressionSymbol)
    , mkEntry "_expression_term" (SomeRegularSymbolSing SExpressionTermSymbol)
    , mkEntry "_literal_value" (SomeRegularSymbolSing SLiteralValueSymbol)
    , mkEntry "address_literal" (SomeRegularSymbolSing SAddressLiteralSymbol)
    , mkEntry "bool_literal" (SomeRegularSymbolSing SBoolLiteralSymbol)
    , mkEntry "byte_string_literal" (SomeRegularSymbolSing SByteStringLiteralSymbol)
    , mkEntry "hex_string_literal" (SomeRegularSymbolSing SHexStringLiteralSymbol)
    , mkEntry "annotation_expression" (SomeRegularSymbolSing SAnnotationExpressionSymbol)
    , mkEntry "break_expression" (SomeRegularSymbolSing SBreakExpressionSymbol)
    , mkEntry "label" (SomeRegularSymbolSing SLabelSymbol)
    , mkEntry "call_expression" (SomeRegularSymbolSing SCallExpressionSymbol)
    , mkEntry "arg_list" (SomeRegularSymbolSing SArgListSymbol)
    , mkEntry "name_expression" (SomeRegularSymbolSing SNameExpressionSymbol)
    , mkEntry "continue_expression" (SomeRegularSymbolSing SContinueExpressionSymbol)
    , mkEntry "dot_expression" (SomeRegularSymbolSing SDotExpressionSymbol)
    , mkEntry "expression_list" (SomeRegularSymbolSing SExpressionListSymbol)
    , mkEntry "if_expression" (SomeRegularSymbolSing SIfExpressionSymbol)
    , mkEntry "index_expression" (SomeRegularSymbolSing SIndexExpressionSymbol)
    , mkEntry "macro_call_expression" (SomeRegularSymbolSing SMacroCallExpressionSymbol)
    , mkEntry "macro_module_access" (SomeRegularSymbolSing SMacroModuleAccessSymbol)
    , mkEntry "match_expression" (SomeRegularSymbolSing SMatchExpressionSymbol)
    , mkEntry "_match_body" (SomeRegularSymbolSing SMatchBodySymbol)
    , mkEntry "match_arm" (SomeRegularSymbolSing SMatchArmSymbol)
    , mkEntry "bind_list" (SomeRegularSymbolSing SBindListSymbol)
    , mkEntry "_bind" (SomeRegularSymbolSing SBindSymbol)
    , mkEntry "at_bind" (SomeRegularSymbolSing SAtBindSymbol)
    , mkEntry "bind_unpack" (SomeRegularSymbolSing SBindUnpackSymbol)
    , mkEntry "bind_fields" (SomeRegularSymbolSing SBindFieldsSymbol)
    , mkEntry "bind_named_fields" (SomeRegularSymbolSing SBindNamedFieldsSymbol)
    , mkEntry "bind_field" (SomeRegularSymbolSing SBindFieldSymbol)
    , mkEntry "_spread_operator" (SomeRegularSymbolSing SSpreadOperatorSymbol)
    , mkEntry "mut_bind_field" (SomeRegularSymbolSing SMutBindFieldSymbol)
    , mkEntry "bind_positional_fields" (SomeRegularSymbolSing SBindPositionalFieldsSymbol)
    , mkEntry "mut_bind_var" (SomeRegularSymbolSing SMutBindVarSymbol)
    , mkEntry "comma_bind_list" (SomeRegularSymbolSing SCommaBindListSymbol)
    , mkEntry "or_bind_list" (SomeRegularSymbolSing SOrBindListSymbol)
    , mkEntry "match_condition" (SomeRegularSymbolSing SMatchConditionSymbol)
    , mkEntry "pack_expression" (SomeRegularSymbolSing SPackExpressionSymbol)
    , mkEntry "field_initialize_list" (SomeRegularSymbolSing SFieldInitializeListSymbol)
    , mkEntry "exp_field" (SomeRegularSymbolSing SExpFieldSymbol)
    , mkEntry "spec_block" (SomeRegularSymbolSing SSpecBlockSymbol)
    , mkEntry "identifier" (SomeRegularSymbolSing SIdentifierSymbol)
    , mkEntry "spec_block_target_schema" (SomeRegularSymbolSing SSpecBlockTargetSchemaSymbol)
    , mkEntry "_struct_identifier" (SomeRegularSymbolSing SStructIdentifierSymbol)
    , mkEntry "_spec_function" (SomeRegularSymbolSing SSpecFunctionSymbol)
    , mkEntry "native_spec_function" (SomeRegularSymbolSing SNativeSpecFunctionSymbol)
    , mkEntry "_spec_function_signature" (SomeRegularSymbolSing SSpecFunctionSignatureSymbol)
    , mkEntry "uninterpreted_spec_function" (SomeRegularSymbolSing SUninterpretedSpecFunctionSymbol)
    , mkEntry "usual_spec_function" (SomeRegularSymbolSing SUsualSpecFunctionSymbol)
    , mkEntry "spec_body" (SomeRegularSymbolSing SSpecBodySymbol)
    , mkEntry "_spec_block_memeber" (SomeRegularSymbolSing SSpecBlockMemeberSymbol)
    , mkEntry "spec_apply" (SomeRegularSymbolSing SSpecApplySymbol)
    , mkEntry "spec_apply_pattern" (SomeRegularSymbolSing SSpecApplyPatternSymbol)
    , mkEntry "spec_apply_name_pattern" (SomeRegularSymbolSing SSpecApplyNamePatternSymbol)
    , mkEntry "spec_condition" (SomeRegularSymbolSing SSpecConditionSymbol)
    , mkEntry "_spec_abort_if" (SomeRegularSymbolSing SSpecAbortIfSymbol)
    , mkEntry "condition_properties" (SomeRegularSymbolSing SConditionPropertiesSymbol)
    , mkEntry "spec_property" (SomeRegularSymbolSing SSpecPropertySymbol)
    , mkEntry "_spec_abort_with_or_modifies" (SomeRegularSymbolSing SSpecAbortWithOrModifiesSymbol)
    , mkEntry "_spec_condition" (SomeRegularSymbolSing SSpecConditionSymbol)
    , mkEntry "_spec_condition_kind" (SomeRegularSymbolSing SSpecConditionKindSymbol)
    , mkEntry "spec_include" (SomeRegularSymbolSing SSpecIncludeSymbol)
    , mkEntry "spec_invariant" (SomeRegularSymbolSing SSpecInvariantSymbol)
    , mkEntry "spec_let" (SomeRegularSymbolSing SSpecLetSymbol)
    , mkEntry "spec_pragma" (SomeRegularSymbolSing SSpecPragmaSymbol)
    , mkEntry "spec_variable" (SomeRegularSymbolSing SSpecVariableSymbol)
    , mkEntry "use_declaration" (SomeRegularSymbolSing SUseDeclarationSymbol)
    , mkEntry "use_fun" (SomeRegularSymbolSing SUseFunSymbol)
    , mkEntry "use_module" (SomeRegularSymbolSing SUseModuleSymbol)
    , mkEntry "use_module_member" (SomeRegularSymbolSing SUseModuleMemberSymbol)
    , mkEntry "use_member" (SomeRegularSymbolSing SUseMemberSymbol)
    , mkEntry "use_module_members" (SomeRegularSymbolSing SUseModuleMembersSymbol)
    , mkEntry "unit_expression" (SomeRegularSymbolSing SUnitExpressionSymbol)
    , mkEntry "vector_expression" (SomeRegularSymbolSing SVectorExpressionSymbol)
    , mkEntry "borrow_expression" (SomeRegularSymbolSing SBorrowExpressionSymbol)
    , mkEntry "dereference_expression" (SomeRegularSymbolSing SDereferenceExpressionSymbol)
    , mkEntry "move_or_copy_expression" (SomeRegularSymbolSing SMoveOrCopyExpressionSymbol)
    , mkEntry "unary_expression" (SomeRegularSymbolSing SUnaryExpressionSymbol)
    , mkEntry "unary_op" (SomeRegularSymbolSing SUnaryOpSymbol)
    , mkEntry "abort_expression" (SomeRegularSymbolSing SAbortExpressionSymbol)
    , mkEntry "assign_expression" (SomeRegularSymbolSing SAssignExpressionSymbol)
    , mkEntry "binary_expression" (SomeRegularSymbolSing SBinaryExpressionSymbol)
    , mkEntry "cast_expression" (SomeRegularSymbolSing SCastExpressionSymbol)
    , mkEntry "identified_expression" (SomeRegularSymbolSing SIdentifiedExpressionSymbol)
    , mkEntry "block_identifier" (SomeRegularSymbolSing SBlockIdentifierSymbol)
    , mkEntry "lambda_expression" (SomeRegularSymbolSing SLambdaExpressionSymbol)
    , mkEntry "lambda_bindings" (SomeRegularSymbolSing SLambdaBindingsSymbol)
    , mkEntry "lambda_binding" (SomeRegularSymbolSing SLambdaBindingSymbol)
    , mkEntry "loop_expression" (SomeRegularSymbolSing SLoopExpressionSymbol)
    , mkEntry "quantifier_expression" (SomeRegularSymbolSing SQuantifierExpressionSymbol)
    , mkEntry "quantifier_bindings" (SomeRegularSymbolSing SQuantifierBindingsSymbol)
    , mkEntry "quantifier_binding" (SomeRegularSymbolSing SQuantifierBindingSymbol)
    , mkEntry "return_expression" (SomeRegularSymbolSing SReturnExpressionSymbol)
    , mkEntry "while_expression" (SomeRegularSymbolSing SWhileExpressionSymbol)
    , mkEntry "block_item" (SomeRegularSymbolSing SBlockItemSymbol)
    , mkEntry "let_statement" (SomeRegularSymbolSing SLetStatementSymbol)
    , mkEntry "macro_function_definition" (SomeRegularSymbolSing SMacroFunctionDefinitionSymbol)
    , mkEntry "_macro_signature" (SomeRegularSymbolSing SMacroSignatureSymbol)
    , mkEntry "native_function_definition" (SomeRegularSymbolSing SNativeFunctionDefinitionSymbol)
    , mkEntry "_struct_item" (SomeRegularSymbolSing SStructItemSymbol)
    , mkEntry "native_struct_definition" (SomeRegularSymbolSing SNativeStructDefinitionSymbol)
    , mkEntry "_struct_signature" (SomeRegularSymbolSing SStructSignatureSymbol)
    , mkEntry "struct_definition" (SomeRegularSymbolSing SStructDefinitionSymbol)
    , mkEntry "constant" (SomeRegularSymbolSing SConstantSymbol)
    , mkEntry "friend_declaration" (SomeRegularSymbolSing SFriendDeclarationSymbol)
    , mkEntry "friend_access" (SomeRegularSymbolSing SFriendAccessSymbol)
    ]
 where
  mkEntry :: String -> SomeSymbolSing -> IO (Int, SomeSymbolSing)
  mkEntry grammarType someSymbol = do
    (,someSymbol) . fromIntegral <$> TS.languageSymbolForGrammarType language (BSC.pack grammarType) True

--------------------------------------------------------------------------------
-- Node Cache
--------------------------------------------------------------------------------

newtype AstCache = AstCache {unAstCache :: IntMap SomeNode}
  deriving (Show, Semigroup, Monoid)

--------------------------------------------------------------------------------
-- Parser Monad
--------------------------------------------------------------------------------

data PState = PState
  { currentNode :: {-# UNPACK #-} !TS.Node
  , newCache :: {-# NOUNPACK #-} !AstCache
  }

data PEnv = PEnv
  { symbolTable :: {-# UNPACK #-} !SymbolTable
  , treeCursor :: {-# UNPACK #-} !TS.TreeCursor
  , oldCache :: {-# UNPACK #-} !AstCache
  }

newtype P a = P {unP :: MaybeT (ReaderT PEnv (StateT PState IO)) a}
  deriving (Functor, Applicative, Monad, MonadIO, MonadReader PEnv, MonadState PState, Alternative, MonadPlus)

getCurrentNode :: P TS.Node
getCurrentNode = gets currentNode

putCurrentNode :: TS.Node -> P ()
putCurrentNode node = modify' (\pstate -> pstate{currentNode = node})

getSymbol :: TS.Node -> P SomeSymbolSing
getSymbol node = do
  currentNodeIsError <- liftIO (TS.nodeIsError node)
  if currentNodeIsError
    then pure (SomeAuxiliarySymbolSing SErrorSymbol)
    else do
      currentNodeIsMissing <- liftIO (TS.nodeIsMissing node)
      if currentNodeIsMissing
        then pure (SomeAuxiliarySymbolSing SMissingSymbol)
        else do
          symbol <- liftIO (TS.nodeSymbol node)
          asks ((IM.! fromIntegral symbol) . unSymbolTable . symbolTable)

cacheSomeNode :: SomeNode -> P SomeNode
cacheSomeNode someNode = modify' updatePState >> pure someNode
 where
  nodeId = someNodeToNodeId someNode
  updateAstCache = AstCache . IM.insert (unWrapTSNodeId nodeId) someNode . unAstCache
  updatePState pstate = pstate{newCache = updateAstCache (newCache pstate)}

findOldSomeNodeInCache :: P SomeNode
findOldSomeNodeInCache =
  gets (TS.nodeId . currentNode) >>= \nodeId -> do
    asks (IM.lookup (unWrapTSNodeId nodeId) . unAstCache . oldCache)
      >>= maybe mzero pure

gotoParent :: P ()
gotoParent = do
  treeCursor <- asks treeCursor
  success <- liftIO (TS.treeCursorGotoParent treeCursor)
  if not success
    then mzero
    else do
      currentNode <- liftIO (TS.treeCursorCurrentNode treeCursor)
      putCurrentNode currentNode

gotoFirstNamedChild :: P ()
gotoFirstNamedChild = do
  treeCursor <- asks treeCursor
  success <- liftIO (TS.treeCursorGotoFirstChild treeCursor)
  if not success
    then mzero
    else do
      currentNode <- liftIO (TS.treeCursorCurrentNode treeCursor)
      currentNodeIsNamed <- liftIO (TS.nodeIsNamed currentNode)
      if currentNodeIsNamed
        then putCurrentNode currentNode
        else gotoNextNamedSibling

gotoNextNamedSibling :: P ()
gotoNextNamedSibling = do
  treeCursor <- asks treeCursor
  success <- liftIO (TS.treeCursorGotoNextSibling treeCursor)
  if not success
    then mzero
    else do
      currentNode <- liftIO (TS.treeCursorCurrentNode treeCursor)
      currentNodeIsNamed <- liftIO (TS.nodeIsNamed currentNode)
      if currentNodeIsNamed
        then putCurrentNode currentNode
        else gotoNextNamedSibling

--------------------------------------------------------------------------------
-- Parser Class
--------------------------------------------------------------------------------

class HasParser a where
  p :: P a

instance HasParser NodeId where
  p :: P NodeId
  p = TS.nodeId <$> getCurrentNode

instance HasParser (ChildList '[]) where
  p :: P (ChildList '[])
  p = pure Nil

instance (HasParser a) => HasParser (ChildList (a ': '[])) where
  p :: P (ChildList '[a])
  p = Cons <$> p <*> pure Nil

instance (HasParser a, HasParser (ChildList (b ': bs))) => HasParser (ChildList (a ': b ': bs)) where
  p :: P (ChildList (a ': b ': bs))
  p = Cons <$> p <* gotoNextNamedSibling <*> p

instance (HasParser (ChildList as)) => HasParser (Children as) where
  p :: P (Children as)
  p = Children <$> (gotoFirstNamedChild *> p <* gotoParent)

instance (HasParser a) => HasParser (Maybe a) where
  p :: P (Maybe a)
  p = optional p

instance (HasParser a) => HasParser [a] where
  p :: P [a]
  p = pPostFence p gotoNextNamedSibling

instance (HasParser a) => HasParser (NonEmpty a) where
  p :: P (NonEmpty a)
  p = pPostFence1 p gotoNextNamedSibling

instance HasParser Range where
  p :: P Range
  p = liftIO . TS.nodeRange =<< getCurrentNode

pPostFence :: P a -> P () -> P [a]
pPostFence post fence = postFence
 where
  fencePost = fence *> postFence <|> pure []
  postFence = ((:) <$> post <*> fencePost) <|> pure []

pPostFence1 :: P a -> P () -> P (NonEmpty a)
pPostFence1 post fence = postFence
 where
  fencePost = fence *> pPostFence post fence <|> pure []
  postFence = (:|) <$> post <*> fencePost

--------------------------------------------------------------------------------
-- Node Parser
--------------------------------------------------------------------------------

instance (KnownSort sort) => HasParser (Node sort) where
  p :: P (Node sort)
  p = pNode

pNode :: (KnownSort sort) => P (Node sort)
pNode =
  pSomeNode >>= \someNode@(SomeNode isReal content) -> do
    let symbol = nodeContentToSymbol content
    case isReal of
      RegularIsReal ->
        pure $
          case decSortSing (symbolToSort symbol) sortSing of
            Just prf -> Node (RegularWellSorted prf) content
            Nothing -> SortMismatch someNode
      AuxiliaryIsReal -> pure $ Node AuxiliaryWellSorted content

instance HasParser SomeNode where
  p :: P SomeNode
  p = pSomeNode

pSomeNode :: P SomeNode
pSomeNode = cacheSomeNode =<< pSomeNode' =<< getCurrentNode
 where
  pSomeNode' :: TS.Node -> P SomeNode
  pSomeNode' node = tryCache <|> tryParse
   where
    tryCache = do
      liftIO (TS.nodeHasChanges node) >>= \nodeHasChanges ->
        if nodeHasChanges then mzero else findOldSomeNodeInCache
    tryParse = do
      getSymbol node >>= \(SomeSymbolSing isReal symbol) ->
        SomeNode isReal <$> pNodeContent symbol

pNodeContent :: SymbolSing symbolType symbol -> P (NodeContent symbolType symbol)
pNodeContent = \case
  SSourceFileSymbol -> SourceFileContent <$> p <*> p <*> p
  SModuleDefinitionSymbol -> ModuleDefinitionContent <$> p <*> p <*> p
  SModuleBodySymbol -> ModuleBodyContent <$> p <*> p <*> p
  SEnumItemSymbol -> EnumItemContent <$> p <*> p <*> p
  SEnumDefinitionSymbol -> EnumDefinitionContent <$> p <*> p <*> p
  SEnumSignatureSymbol -> EnumSignatureContent <$> p <*> p <*> p
  SEnumIdentifierSymbol -> EnumIdentifierContent <$> p <*> p <*> p
  SIdentifierSymbol -> IdentifierContent <$> p <*> p
  SAbilityDeclsSymbol -> AbilityDeclsContent <$> p <*> p <*> p
  SAbilitySymbol -> AbilityContent <$> p <*> p
  STypeParametersSymbol -> TypeParametersContent <$> p <*> p <*> p
  STypeParameterSymbol -> TypeParameterContent <$> p <*> p <*> p
  STypeParameterIdentifierSymbol -> TypeParameterIdentifierContent <$> p <*> p <*> p
  SEnumVariantsSymbol -> EnumVariantsContent <$> p <*> p <*> p
  SVariantSymbol -> VariantContent <$> p <*> p <*> p
  SVariantIdentifierSymbol -> VariantIdentifierContent <$> p <*> p <*> p
  SDatatypeFieldsSymbol -> DatatypeFieldsContent <$> p <*> p <*> p
  SNamedFieldsSymbol -> NamedFieldsContent <$> p <*> p <*> p
  SFieldAnnotationSymbol -> FieldAnnotationContent <$> p <*> p <*> p
  SFieldIdentifierSymbol -> FieldIdentifierContent <$> p <*> p <*> p
  STypeSymbol -> TypeContent <$> p <*> p <*> p
  SApplyTypeSymbol -> ApplyTypeContent <$> p <*> p <*> p
  SModuleAccessSymbol -> ModuleAccessContent <$> p <*> p <*> p
  SModuleIdentifierSymbol -> ModuleIdentifierContent <$> p <*> p <*> p
  SReservedIdentifierSymbol -> ReservedIdentifierContent <$> p <*> p <*> p
  SExistsSymbol -> ExistsContent <$> p <*> p
  SForallSymbol -> ForallContent <$> p <*> p
  SModuleIdentitySymbol -> ModuleIdentityContent <$> p <*> p <*> p
  SNumLiteralSymbol -> NumLiteralContent <$> p <*> p
  STypeArgumentsSymbol -> TypeArgumentsContent <$> p <*> p <*> p
  SFunctionTypeSymbol -> FunctionTypeContent <$> p <*> p <*> p
  SFunctionTypeParametersSymbol -> FunctionTypeParametersContent <$> p <*> p <*> p
  SPrimitiveTypeSymbol -> PrimitiveTypeContent <$> p <*> p
  SRefTypeSymbol -> RefTypeContent <$> p <*> p <*> p
  SReferenceSymbol -> ReferenceContent <$> p <*> p <*> p
  SImmRefSymbol -> ImmRefContent <$> p <*> p
  SMutRefSymbol -> MutRefContent <$> p <*> p
  STupleTypeSymbol -> TupleTypeContent <$> p <*> p <*> p
  SPositionalFieldsSymbol -> PositionalFieldsContent <$> p <*> p <*> p
  SPostfixAbilityDeclsSymbol -> PostfixAbilityDeclsContent <$> p <*> p <*> p
  SFunctionItemSymbol -> FunctionItemContent <$> p <*> p <*> p
  SFunctionDefinitionSymbol -> FunctionDefinitionContent <$> p <*> p <*> p
  SFunctionSignatureSymbol -> FunctionSignatureContent <$> p <*> p <*> p
  SFunctionIdentifierSymbol -> FunctionIdentifierContent <$> p <*> p <*> p
  SFunctionParametersSymbol -> FunctionParametersContent <$> p <*> p <*> p
  SFunctionParameterSymbol -> FunctionParameterContent <$> p <*> p <*> p
  SVariableIdentifierSymbol -> VariableIdentifierContent <$> p <*> p <*> p
  SMutFunctionParameterSymbol -> MutFunctionParameterContent <$> p <*> p <*> p
  SModifierSymbol -> ModifierContent <$> p <*> p
  SRetTypeSymbol -> RetTypeContent <$> p <*> p <*> p
  SBlockSymbol -> BlockContent <$> p <*> p <*> p
  SExpressionSymbol -> ExpressionContent <$> p <*> p <*> p
  SUnaryExpressionSymbol -> UnaryExpressionContent <$> p <*> p <*> p
  SExpressionTermSymbol -> ExpressionTermContent <$> p <*> p <*> p
  SLiteralValueSymbol -> LiteralValueContent <$> p <*> p <*> p
  SAddressLiteralSymbol -> AddressLiteralContent <$> p <*> p
  SBoolLiteralSymbol -> BoolLiteralContent <$> p <*> p
  SByteStringLiteralSymbol -> ByteStringLiteralContent <$> p <*> p
  SHexStringLiteralSymbol -> HexStringLiteralContent <$> p <*> p
  SAnnotationExpressionSymbol -> AnnotationExpressionContent <$> p <*> p <*> p
  SBreakExpressionSymbol -> BreakExpressionContent <$> p <*> p <*> p
  SLabelSymbol -> LabelContent <$> p <*> p <*> p
  SCallExpressionSymbol -> CallExpressionContent <$> p <*> p <*> p
  SArgListSymbol -> ArgListContent <$> p <*> p <*> p
  SNameExpressionSymbol -> NameExpressionContent <$> p <*> p <*> p
  SContinueExpressionSymbol -> ContinueExpressionContent <$> p <*> p <*> p
  SDotExpressionSymbol -> DotExpressionContent <$> p <*> p <*> p
  SExpressionListSymbol -> ExpressionListContent <$> p <*> p <*> p
  SIfExpressionSymbol -> IfExpressionContent <$> p <*> p <*> p
  SIndexExpressionSymbol -> IndexExpressionContent <$> p <*> p <*> p
  SMacroCallExpressionSymbol -> MacroCallExpressionContent <$> p <*> p <*> p
  SMacroModuleAccessSymbol -> MacroModuleAccessContent <$> p <*> p <*> p
  SMatchExpressionSymbol -> MatchExpressionContent <$> p <*> p <*> p
  SMatchBodySymbol -> MatchBodyContent <$> p <*> p <*> p
  SMatchArmSymbol -> MatchArmContent <$> p <*> p <*> p
  SBindListSymbol -> BindListContent <$> p <*> p <*> p
  SBindSymbol -> BindContent <$> p <*> p <*> p
  SAtBindSymbol -> AtBindContent <$> p <*> p <*> p
  SBindUnpackSymbol -> BindUnpackContent <$> p <*> p <*> p
  SBindFieldsSymbol -> BindFieldsContent <$> p <*> p <*> p
  SBindNamedFieldsSymbol -> BindNamedFieldsContent <$> p <*> p <*> p
  SBindFieldSymbol -> BindFieldContent <$> p <*> p <*> p
  SSpreadOperatorSymbol -> SpreadOperatorContent <$> p <*> p
  SMutBindFieldSymbol -> MutBindFieldContent <$> p <*> p <*> p
  SBindPositionalFieldsSymbol -> BindPositionalFieldsContent <$> p <*> p <*> p
  SMutBindVarSymbol -> MutBindVarContent <$> p <*> p <*> p
  SCommaBindListSymbol -> CommaBindListContent <$> p <*> p <*> p
  SOrBindListSymbol -> OrBindListContent <$> p <*> p <*> p
  SMatchConditionSymbol -> MatchConditionContent <$> p <*> p <*> p
  SPackExpressionSymbol -> PackExpressionContent <$> p <*> p <*> p
  SFieldInitializeListSymbol -> FieldInitializeListContent <$> p <*> p <*> p
  SExpFieldSymbol -> ExpFieldContent <$> p <*> p <*> p
  SSpecBlockSymbol -> SpecBlockContent <$> p <*> p <*> p
  SIdentifierSymbol -> IdentifierContent <$> p <*> p
  SSpecBlockTargetSchemaSymbol -> SpecBlockTargetSchemaContent <$> p <*> p <*> p
  SStructIdentifierSymbol -> StructIdentifierContent <$> p <*> p <*> p
  SSpecFunctionSymbol -> SpecFunctionContent <$> p <*> p <*> p
  SNativeSpecFunctionSymbol -> NativeSpecFunctionContent <$> p <*> p <*> p
  SSpecFunctionSignatureSymbol -> SpecFunctionSignatureContent <$> p <*> p <*> p
  SUninterpretedSpecFunctionSymbol -> UninterpretedSpecFunctionContent <$> p <*> p <*> p
  SUsualSpecFunctionSymbol -> UsualSpecFunctionContent <$> p <*> p <*> p
  SSpecBodySymbol -> SpecBodyContent <$> p <*> p <*> p
  SSpecBlockMemeberSymbol -> SpecBlockMemeberContent <$> p <*> p <*> p
  SSpecApplySymbol -> SpecApplyContent <$> p <*> p <*> p
  SSpecApplyPatternSymbol -> SpecApplyPatternContent <$> p <*> p <*> p
  SSpecApplyNamePatternSymbol -> SpecApplyNamePatternContent <$> p <*> p
  SSpecConditionSymbol -> SpecConditionContent <$> p <*> p <*> p
  SSpecAbortIfSymbol -> SpecAbortIfContent <$> p <*> p <*> p
  SConditionPropertiesSymbol -> ConditionPropertiesContent <$> p <*> p <*> p
  SSpecPropertySymbol -> SpecPropertyContent <$> p <*> p <*> p
  SSpecAbortWithOrModifiesSymbol -> SpecAbortWithOrModifiesContent <$> p <*> p <*> p
  SSpecConditionSymbol -> SpecConditionContent <$> p <*> p <*> p
  SSpecConditionKindSymbol -> SpecConditionKindContent <$> p <*> p
  SSpecIncludeSymbol -> SpecIncludeContent <$> p <*> p <*> p
  SSpecInvariantSymbol -> SpecInvariantContent <$> p <*> p <*> p
  SSpecLetSymbol -> SpecLetContent <$> p <*> p <*> p
  SSpecPragmaSymbol -> SpecPragmaContent <$> p <*> p <*> p
  SSpecVariableSymbol -> SpecVariableContent <$> p <*> p <*> p
  SUseDeclarationSymbol -> UseDeclarationContent <$> p <*> p <*> p
  SUseFunSymbol -> UseFunContent <$> p <*> p <*> p
  SUseModuleSymbol -> UseModuleContent <$> p <*> p <*> p
  SUseModuleMemberSymbol -> UseModuleMemberContent <$> p <*> p <*> p
  SUseMemberSymbol -> UseMemberContent <$> p <*> p <*> p
  SUseModuleMembersSymbol -> UseModuleMembersContent <$> p <*> p <*> p
  SUnitExpressionSymbol -> UnitExpressionContent <$> p <*> p
  SVectorExpressionSymbol -> VectorExpressionContent <$> p <*> p <*> p
  SBorrowExpressionSymbol -> BorrowExpressionContent <$> p <*> p <*> p
  SDereferenceExpressionSymbol -> DereferenceExpressionContent <$> p <*> p <*> p
  SMoveOrCopyExpressionSymbol -> MoveOrCopyExpressionContent <$> p <*> p <*> p
  SUnaryExpressionSymbol -> UnaryExpressionContent <$> p <*> p <*> p
  SUnaryOpSymbol -> UnaryOpContent <$> p <*> p
  SAbortExpressionSymbol -> AbortExpressionContent <$> p <*> p <*> p
  SAssignExpressionSymbol -> AssignExpressionContent <$> p <*> p <*> p
  SBinaryExpressionSymbol -> BinaryExpressionContent <$> p <*> p <*> p
  SCastExpressionSymbol -> CastExpressionContent <$> p <*> p <*> p
  SIdentifiedExpressionSymbol -> IdentifiedExpressionContent <$> p <*> p <*> p
  SBlockIdentifierSymbol -> BlockIdentifierContent <$> p <*> p <*> p
  SLambdaExpressionSymbol -> LambdaExpressionContent <$> p <*> p <*> p
  SLambdaBindingsSymbol -> LambdaBindingsContent <$> p <*> p <*> p
  SLambdaBindingSymbol -> LambdaBindingContent <$> p <*> p <*> p
  SLoopExpressionSymbol -> LoopExpressionContent <$> p <*> p <*> p
  SQuantifierExpressionSymbol -> QuantifierExpressionContent <$> p <*> p <*> p
  SQuantifierBindingsSymbol -> QuantifierBindingsContent <$> p <*> p <*> p
  SQuantifierBindingSymbol -> QuantifierBindingContent <$> p <*> p <*> p
  SReturnExpressionSymbol -> ReturnExpressionContent <$> p <*> p <*> p
  SWhileExpressionSymbol -> WhileExpressionContent <$> p <*> p <*> p
  SBlockItemSymbol -> BlockItemContent <$> p <*> p <*> p
  SLetStatementSymbol -> LetStatementContent <$> p <*> p <*> p
  SMacroFunctionDefinitionSymbol -> MacroFunctionDefinitionContent <$> p <*> p <*> p
  SMacroSignatureSymbol -> MacroSignatureContent <$> p <*> p <*> p
  SNativeFunctionDefinitionSymbol -> NativeFunctionDefinitionContent <$> p <*> p <*> p
  SStructItemSymbol -> StructItemContent <$> p <*> p <*> p
  SNativeStructDefinitionSymbol -> NativeStructDefinitionContent <$> p <*> p <*> p
  SStructSignatureSymbol -> StructSignatureContent <$> p <*> p <*> p
  SStructDefinitionSymbol -> StructDefinitionContent <$> p <*> p <*> p
  SConstantSymbol -> ConstantContent <$> p <*> p <*> p
  SFriendDeclarationSymbol -> FriendDeclarationContent <$> p <*> p <*> p
  SFriendAccessSymbol -> FriendAccessContent <$> p <*> p <*> p
  SErrorSymbol -> ErrorContent <$> p <*> p <*> p
  SMissingSymbol -> MissingContent <$> p <*> p
  SSortMismatchSymbol -> SortMismatchContent <$> p

--------------------------------------------------------------------------------
-- Pretty Printing
--------------------------------------------------------------------------------

instance Pretty SomeNode where
  pretty :: SomeNode -> Doc ann
  pretty (SomeNode _isReal content) = pretty content

instance Pretty (Node sort) where
  pretty :: Node sort -> Doc ann
  pretty (Node _isWellSorted content) = pretty content

instance Pretty (NodeContent symbolType symbol) where
  pretty :: NodeContent symbolType symbol -> Doc ann
  pretty content = prettySList (pretty (nodeContentToSymbol content) : fmap pretty (getNodes content))

prettySList :: [Doc ann] -> Doc ann
prettySList = parens . nest 2 . sep

instance Pretty (SymbolSing symbolType symbol) where
  pretty :: SymbolSing symbolType symbol -> Doc ann
  pretty = \case
    SSourceFileSymbol -> "source_file"
    SModuleDefinitionSymbol -> "module_definition"
    SModuleBodySymbol -> "module_body"
    SEnumItemSymbol -> "_enum_item"
    SEnumDefinitionSymbol -> "enum_definition"
    SEnumSignatureSymbol -> "_enum_signature"
    SEnumIdentifierSymbol -> "_enum_identifier"
    SIdentifierSymbol -> "identifier"
    SAbilityDeclsSymbol -> "ability_decls"
    SAbilitySymbol -> "ability"
    STypeParametersSymbol -> "type_parameters"
    STypeParameterSymbol -> "type_parameter"
    STypeParameterIdentifierSymbol -> "_type_parameter_identifier"
    SEnumVariantsSymbol -> "enum_variants"
    SVariantSymbol -> "variant"
    SVariantIdentifierSymbol -> "_variant_identifier"
    SDatatypeFieldsSymbol -> "datatype_fields"
    SNamedFieldsSymbol -> "named_fields"
    SFieldAnnotationSymbol -> "field_annotation"
    SFieldIdentifierSymbol -> "_field_identifier"
    STypeSymbol -> "_type"
    SApplyTypeSymbol -> "apply_type"
    SModuleAccessSymbol -> "module_access"
    SModuleIdentifierSymbol -> "_module_identifier"
    SReservedIdentifierSymbol -> "_reserved_identifier"
    SExistsSymbol -> "_exists"
    SForallSymbol -> "_forall"
    SModuleIdentitySymbol -> "module_identity"
    SNumLiteralSymbol -> "num_literal"
    STypeArgumentsSymbol -> "type_arguments"
    SFunctionTypeSymbol -> "function_type"
    SFunctionTypeParametersSymbol -> "function_type_parameters"
    SPrimitiveTypeSymbol -> "primitive_type"
    SRefTypeSymbol -> "ref_type"
    SReferenceSymbol -> "_reference"
    SImmRefSymbol -> "imm_ref"
    SMutRefSymbol -> "mut_ref"
    STupleTypeSymbol -> "tuple_type"
    SPositionalFieldsSymbol -> "positional_fields"
    SPostfixAbilityDeclsSymbol -> "postfix_ability_decls"
    SFunctionItemSymbol -> "_function_item"
    SFunctionDefinitionSymbol -> "function_definition"
    SFunctionSignatureSymbol -> "_function_signature"
    SFunctionIdentifierSymbol -> "_function_identifier"
    SFunctionParametersSymbol -> "function_parameters"
    SFunctionParameterSymbol -> "function_parameter"
    SVariableIdentifierSymbol -> "_variable_identifier"
    SMutFunctionParameterSymbol -> "mut_function_parameter"
    SModifierSymbol -> "modifier"
    SRetTypeSymbol -> "ret_type"
    SBlockSymbol -> "block"
    SExpressionSymbol -> "_expression"
    SUnaryExpressionSymbol -> "_unary_expression"
    SExpressionTermSymbol -> "_expression_term"
    SLiteralValueSymbol -> "_literal_value"
    SAddressLiteralSymbol -> "address_literal"
    SBoolLiteralSymbol -> "bool_literal"
    SByteStringLiteralSymbol -> "byte_string_literal"
    SHexStringLiteralSymbol -> "hex_string_literal"
    SAnnotationExpressionSymbol -> "annotation_expression"
    SBreakExpressionSymbol -> "break_expression"
    SLabelSymbol -> "label"
    SCallExpressionSymbol -> "call_expression"
    SArgListSymbol -> "arg_list"
    SNameExpressionSymbol -> "name_expression"
    SContinueExpressionSymbol -> "continue_expression"
    SDotExpressionSymbol -> "dot_expression"
    SExpressionListSymbol -> "expression_list"
    SIfExpressionSymbol -> "if_expression"
    SIndexExpressionSymbol -> "index_expression"
    SMacroCallExpressionSymbol -> "macro_call_expression"
    SMacroModuleAccessSymbol -> "macro_module_access"
    SMatchExpressionSymbol -> "match_expression"
    SMatchBodySymbol -> "_match_body"
    SMatchArmSymbol -> "match_arm"
    SBindListSymbol -> "bind_list"
    SBindSymbol -> "_bind"
    SAtBindSymbol -> "at_bind"
    SBindUnpackSymbol -> "bind_unpack"
    SBindFieldsSymbol -> "bind_fields"
    SBindNamedFieldsSymbol -> "bind_named_fields"
    SBindFieldSymbol -> "bind_field"
    SSpreadOperatorSymbol -> "_spread_operator"
    SMutBindFieldSymbol -> "mut_bind_field"
    SBindPositionalFieldsSymbol -> "bind_positional_fields"
    SMutBindVarSymbol -> "mut_bind_var"
    SCommaBindListSymbol -> "comma_bind_list"
    SOrBindListSymbol -> "or_bind_list"
    SMatchConditionSymbol -> "match_condition"
    SPackExpressionSymbol -> "pack_expression"
    SFieldInitializeListSymbol -> "field_initialize_list"
    SExpFieldSymbol -> "exp_field"
    SSpecBlockSymbol -> "spec_block"
    SIdentifierSymbol -> "identifier"
    SSpecBlockTargetSchemaSymbol -> "spec_block_target_schema"
    SStructIdentifierSymbol -> "_struct_identifier"
    SSpecFunctionSymbol -> "_spec_function"
    SNativeSpecFunctionSymbol -> "native_spec_function"
    SSpecFunctionSignatureSymbol -> "_spec_function_signature"
    SUninterpretedSpecFunctionSymbol -> "uninterpreted_spec_function"
    SUsualSpecFunctionSymbol -> "usual_spec_function"
    SSpecBodySymbol -> "spec_body"
    SSpecBlockMemeberSymbol -> "_spec_block_memeber"
    SSpecApplySymbol -> "spec_apply"
    SSpecApplyPatternSymbol -> "spec_apply_pattern"
    SSpecApplyNamePatternSymbol -> "spec_apply_name_pattern"
    SSpecConditionSymbol -> "spec_condition"
    SSpecAbortIfSymbol -> "_spec_abort_if"
    SConditionPropertiesSymbol -> "condition_properties"
    SSpecPropertySymbol -> "spec_property"
    SSpecAbortWithOrModifiesSymbol -> "_spec_abort_with_or_modifies"
    SSpecConditionSymbol -> "_spec_condition"
    SSpecConditionKindSymbol -> "_spec_condition_kind"
    SSpecIncludeSymbol -> "spec_include"
    SSpecInvariantSymbol -> "spec_invariant"
    SSpecLetSymbol -> "spec_let"
    SSpecPragmaSymbol -> "spec_pragma"
    SSpecVariableSymbol -> "spec_variable"
    SUseDeclarationSymbol -> "use_declaration"
    SUseFunSymbol -> "use_fun"
    SUseModuleSymbol -> "use_module"
    SUseModuleMemberSymbol -> "use_module_member"
    SUseMemberSymbol -> "use_member"
    SUseModuleMembersSymbol -> "use_module_members"
    SUnitExpressionSymbol -> "unit_expression"
    SVectorExpressionSymbol -> "vector_expression"
    SBorrowExpressionSymbol -> "borrow_expression"
    SDereferenceExpressionSymbol -> "dereference_expression"
    SMoveOrCopyExpressionSymbol -> "move_or_copy_expression"
    SUnaryExpressionSymbol -> "unary_expression"
    SUnaryOpSymbol -> "unary_op"
    SAbortExpressionSymbol -> "abort_expression"
    SAssignExpressionSymbol -> "assign_expression"
    SBinaryExpressionSymbol -> "binary_expression"
    SCastExpressionSymbol -> "cast_expression"
    SIdentifiedExpressionSymbol -> "identified_expression"
    SBlockIdentifierSymbol -> "block_identifier"
    SLambdaExpressionSymbol -> "lambda_expression"
    SLambdaBindingsSymbol -> "lambda_bindings"
    SLambdaBindingSymbol -> "lambda_binding"
    SLoopExpressionSymbol -> "loop_expression"
    SQuantifierExpressionSymbol -> "quantifier_expression"
    SQuantifierBindingsSymbol -> "quantifier_bindings"
    SQuantifierBindingSymbol -> "quantifier_binding"
    SReturnExpressionSymbol -> "return_expression"
    SWhileExpressionSymbol -> "while_expression"
    SBlockItemSymbol -> "block_item"
    SLetStatementSymbol -> "let_statement"
    SMacroFunctionDefinitionSymbol -> "macro_function_definition"
    SMacroSignatureSymbol -> "_macro_signature"
    SNativeFunctionDefinitionSymbol -> "native_function_definition"
    SStructItemSymbol -> "_struct_item"
    SNativeStructDefinitionSymbol -> "native_struct_definition"
    SStructSignatureSymbol -> "_struct_signature"
    SStructDefinitionSymbol -> "struct_definition"
    SConstantSymbol -> "constant"
    SFriendDeclarationSymbol -> "friend_declaration"
    SFriendAccessSymbol -> "friend_access"
    SErrorSymbol -> "ERROR"
    SMissingSymbol -> "MISSING"
    SSortMismatchSymbol -> "SORT_MISMATCH"
