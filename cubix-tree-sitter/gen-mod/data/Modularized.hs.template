-- WARNING: This module was generated by `tree-sitter-generate-ast`.
--
-- build-depends:
--   , base          >=4.13 && <5
--   , bytestring    >=0.11 && <0.13
--   , containers    >=0.6  && <0.8
--   , mtl           >=2.3  && <2.4
{-+}
${if(pretty)}
--   , prettyprinter >=1.7  && <1.8
${endif}
{+-}
--   , transformers  >=0.6  && <0.7
--   , tree-sitter
--
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE ImportQualifiedPost #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE PatternSynonyms #-}
{-# LANGUAGE StandaloneKindSignatures #-}
{-# LANGUAGE TypeData #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE UndecidableInstances #-}

{-+}
module ${moduleName} (
{+-}
) where

import Control.Applicative (Alternative (..), optional)
import Control.Monad (MonadPlus (..))
import Control.Monad.IO.Class (MonadIO (..))
import Control.Monad.Reader (MonadReader, ReaderT (..), asks)
import Control.Monad.State.Strict (MonadState (..), StateT (..), gets, modify')
import Control.Monad.Trans.Maybe (MaybeT (..))
import Data.ByteString.Char8 qualified as BSC
import Data.IntMap.Strict (IntMap)
import Data.IntMap.Strict qualified as IM
import Data.Kind (Type)
import Data.List.NonEmpty (NonEmpty (..))
import Data.Maybe (isJust)
import Data.Type.Equality (type (:~:) (..), type (:~~:) (..))
{-+}
${if(pretty)}
import Prettyprinter (Doc, Pretty (..), nest, parens, sep)
${endif}
{+-}
import TreeSitter (NodeId (..), Range (..))
import TreeSitter qualified as TS

import Data.Comp.Multi.Kinds (type Sort)

--------------------------------------------------------------------------------
-- Modularized syntax
--------------------------------------------------------------------------------

{-+}
${for(dataTypes)}
data ${it.name.camelCase} e l where
${for(it.constrs)}
  ${it.name.camelCase} ::
  ${for(it.fields)}
  ${it.type} ->
  ${endfor}
  ${dataTypes.name.camelCase} ${it.sort.camelCase}L
${endfor}

${endfor}
{+-}

--------------------------------------------------------------------------------
-- Signature
--------------------------------------------------------------------------------

{-+}
type ${grammarName}Sig = '[]

type ${grammarName}Term      = Term LuaSig
type ${grammarName}TermLab l = TermLab LuaSig l
{+-}

--------------------------------------------------------------------------------
-- Entry point
--------------------------------------------------------------------------------

{-+}
type RootSort ${grammarName}Sig = ${startSort.camelCase}L
{+-}
