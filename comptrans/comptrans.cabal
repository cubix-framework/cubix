cabal-version: 1.12

-- This file has been generated from package.yaml by hpack version 0.35.2.
--
-- see: https://github.com/sol/hpack
--
-- hash: f31771e5e49450a27b8ea0c95caa88cc58676be7cbb0357f436bde07c3fc8f47

name:           comptrans
version:        0.1.0.6
synopsis:       Automatically converting ASTs into compositional data types
description:    Template Haskell for converting an AST for a language written using normal
                algebraic data types into ones written using multi-sorted compositional data types
                (`Data.Comp.Multi` from the `compdata` library) so that you can use generic and modular operators
                on it. You might need to add additional constructors that can e.g.: convert a (Term e Foo) into a
                (Term e [Foo]).
                .
                The sCource files have comments showing example output for a simple language. See the examples directory
                for an extended example of generating a compositional data type for the entire Java language, with labelled variants
                as well as variants where an entire project of source files can be treated as a single AST -- and you can use the same operations
                on all of them!
category:       Data,Generics
homepage:       https://github.com/jkoppel/comptrans#readme
bug-reports:    https://github.com/jkoppel/comptrans/issues
author:         James Koppel
maintainer:     James Koppel
license:        BSD3
license-file:   LICENSE
build-type:     Simple

source-repository head
  type: git
  location: https://github.com/jkoppel/comptrans

library
  exposed-modules:
      Data.Comp.Trans
  other-modules:
      Data.Comp.Trans.Collect
      Data.Comp.Trans.DeriveMulti
      Data.Comp.Trans.DeriveTrans
      Data.Comp.Trans.DeriveUntrans
      Data.Comp.Trans.Util
      Paths_comptrans
  hs-source-dirs:
      ./
  default-extensions:
      ApplicativeDo
      BangPatterns
      ConstraintKinds
      DataKinds
      DefaultSignatures
      DeriveFoldable
      DeriveFunctor
      DeriveGeneric
      DeriveLift
      DeriveTraversable
      DerivingStrategies
      EmptyCase
      ExistentialQuantification
      FlexibleContexts
      FlexibleInstances
      FunctionalDependencies
      GADTs
      GeneralizedNewtypeDeriving
      ImportQualifiedPost
      InstanceSigs
      KindSignatures
      LambdaCase
      MultiParamTypeClasses
      MultiWayIf
      NamedFieldPuns
      OverloadedStrings
      PatternSynonyms
      QuasiQuotes
      RankNTypes
      ScopedTypeVariables
      StandaloneDeriving
      TupleSections
      TypeApplications
      TypeFamilies
      TypeFamilyDependencies
      TypeOperators
      ViewPatterns
  ghc-options: -Wall
  build-depends:
      base
    , bytestring
    , containers
    , cubix-compdata
    , deepseq
    , deepseq-generics
    , ghc-prim
    , lens
    , mtl
    , syb
    , template-haskell
    , text
    , th-expand-syns
    , transformers
  default-language: Haskell2010
